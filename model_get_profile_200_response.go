/*
Linode API

[Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

API version: 4.189.2
Contact: support@linode.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GetProfile200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetProfile200Response{}

// GetProfile200Response A Profile represents your User in our system. This is where you can change information about your User. This information is available to any OAuth Client regardless of requested scopes, and can be used to populate User information in third-party applications.
type GetProfile200Response struct {
	// This account's Cloud Manager authentication type. Authentication types are chosen through Cloud Manager and authorized when logging into your account. These authentication types are either the user's password (in conjunction with their username), or the name of their identity provider such as GitHub. For example, if a user:  - Has never used Third-Party Authentication, their authentication type will be `password`. - Is using Third-Party Authentication, their authentication type will be the name of their Identity Provider (eg. `github`). - Has used Third-Party Authentication and has since revoked it, their authentication type will be `password`.  __Note__. This functionality may not yet be available in Cloud Manager. See the [Cloud Manager Changelog](https://www.linode.com/docs/products/tools/cloud-manager/release-notes/) for the latest updates.
	AuthenticationType *string `json:"authentication_type,omitempty"`
	// The list of SSH Keys authorized to use Lish for your User. This value is ignored if `lish_auth_method` is `disabled`.
	AuthorizedKeys []string `json:"authorized_keys,omitempty"`
	// Your email address.  This address will be used for communication with Linode as necessary.
	Email *string `json:"email,omitempty"`
	// If true, you will receive email notifications about account activity.  If false, you may still receive business-critical communications through email.
	EmailNotifications *bool `json:"email_notifications,omitempty"`
	// If true, logins for your User will only be allowed from whitelisted IPs. This setting is currently deprecated, and cannot be enabled. If you disable this setting, you will not be able to re-enable it.
	// Deprecated
	IpWhitelistEnabled *bool `json:"ip_whitelist_enabled,omitempty"`
	// The authentication methods that are allowed when connecting to [the Linode Shell (Lish)](https://www.linode.com/docs/guides/lish/).  - `keys_only` is the most secure if you intend to use Lish. - `disabled` is recommended if you do not intend to use Lish at all. - If this account's Cloud Manager authentication type is set to a Third-Party Authentication method, `password_keys` cannot be used as your Lish authentication method. To view this account's Cloud Manager `authentication_type` field, send a request to the [Get a profile](https://techdocs.akamai.com/linode-api/reference/get-profile) operation.
	LishAuthMethod *string `json:"lish_auth_method,omitempty"`
	Referrals *GetProfile200ResponseReferrals `json:"referrals,omitempty"`
	// If true, your User has restrictions on what can be accessed on your Account. To get details on what entities/actions you can access/perform, run [List grants](https://techdocs.akamai.com/linode-api/reference/get-profile-grants).
	Restricted *bool `json:"restricted,omitempty"`
	// The timezone you prefer to see times in. This is not used by the API directly. It is provided for the benefit of clients such as the Linode Cloud Manager and other clients built on the API. All times returned by the API are in UTC.
	Timezone *string `json:"timezone,omitempty"`
	// If true, logins from untrusted computers will require Two Factor Authentication.  Run [Create a two factor secret](https://techdocs.akamai.com/linode-api/reference/post-tfa-enable) to enable Two Factor Authentication.
	TwoFactorAuth *bool `json:"two_factor_auth,omitempty"`
	// Your unique ID in our system. This value will never change, and can safely be used to identify your User.
	Uid *int32 `json:"uid,omitempty"`
	// Your username, used for logging in to our system.
	Username *string `json:"username,omitempty"`
	// The phone number verified for this Profile with the [Verify a phone number](https://techdocs.akamai.com/linode-api/reference/post-profile-phone-number-verify) operation.  `null` if this Profile has no verified phone number.
	VerifiedPhoneNumber NullableString `json:"verified_phone_number,omitempty"`
}

// NewGetProfile200Response instantiates a new GetProfile200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetProfile200Response() *GetProfile200Response {
	this := GetProfile200Response{}
	return &this
}

// NewGetProfile200ResponseWithDefaults instantiates a new GetProfile200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetProfile200ResponseWithDefaults() *GetProfile200Response {
	this := GetProfile200Response{}
	return &this
}

// GetAuthenticationType returns the AuthenticationType field value if set, zero value otherwise.
func (o *GetProfile200Response) GetAuthenticationType() string {
	if o == nil || IsNil(o.AuthenticationType) {
		var ret string
		return ret
	}
	return *o.AuthenticationType
}

// GetAuthenticationTypeOk returns a tuple with the AuthenticationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetProfile200Response) GetAuthenticationTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AuthenticationType) {
		return nil, false
	}
	return o.AuthenticationType, true
}

// HasAuthenticationType returns a boolean if a field has been set.
func (o *GetProfile200Response) HasAuthenticationType() bool {
	if o != nil && !IsNil(o.AuthenticationType) {
		return true
	}

	return false
}

// SetAuthenticationType gets a reference to the given string and assigns it to the AuthenticationType field.
func (o *GetProfile200Response) SetAuthenticationType(v string) {
	o.AuthenticationType = &v
}

// GetAuthorizedKeys returns the AuthorizedKeys field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetProfile200Response) GetAuthorizedKeys() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.AuthorizedKeys
}

// GetAuthorizedKeysOk returns a tuple with the AuthorizedKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetProfile200Response) GetAuthorizedKeysOk() ([]string, bool) {
	if o == nil || IsNil(o.AuthorizedKeys) {
		return nil, false
	}
	return o.AuthorizedKeys, true
}

// HasAuthorizedKeys returns a boolean if a field has been set.
func (o *GetProfile200Response) HasAuthorizedKeys() bool {
	if o != nil && !IsNil(o.AuthorizedKeys) {
		return true
	}

	return false
}

// SetAuthorizedKeys gets a reference to the given []string and assigns it to the AuthorizedKeys field.
func (o *GetProfile200Response) SetAuthorizedKeys(v []string) {
	o.AuthorizedKeys = v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *GetProfile200Response) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetProfile200Response) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *GetProfile200Response) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *GetProfile200Response) SetEmail(v string) {
	o.Email = &v
}

// GetEmailNotifications returns the EmailNotifications field value if set, zero value otherwise.
func (o *GetProfile200Response) GetEmailNotifications() bool {
	if o == nil || IsNil(o.EmailNotifications) {
		var ret bool
		return ret
	}
	return *o.EmailNotifications
}

// GetEmailNotificationsOk returns a tuple with the EmailNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetProfile200Response) GetEmailNotificationsOk() (*bool, bool) {
	if o == nil || IsNil(o.EmailNotifications) {
		return nil, false
	}
	return o.EmailNotifications, true
}

// HasEmailNotifications returns a boolean if a field has been set.
func (o *GetProfile200Response) HasEmailNotifications() bool {
	if o != nil && !IsNil(o.EmailNotifications) {
		return true
	}

	return false
}

// SetEmailNotifications gets a reference to the given bool and assigns it to the EmailNotifications field.
func (o *GetProfile200Response) SetEmailNotifications(v bool) {
	o.EmailNotifications = &v
}

// GetIpWhitelistEnabled returns the IpWhitelistEnabled field value if set, zero value otherwise.
// Deprecated
func (o *GetProfile200Response) GetIpWhitelistEnabled() bool {
	if o == nil || IsNil(o.IpWhitelistEnabled) {
		var ret bool
		return ret
	}
	return *o.IpWhitelistEnabled
}

// GetIpWhitelistEnabledOk returns a tuple with the IpWhitelistEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *GetProfile200Response) GetIpWhitelistEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IpWhitelistEnabled) {
		return nil, false
	}
	return o.IpWhitelistEnabled, true
}

// HasIpWhitelistEnabled returns a boolean if a field has been set.
func (o *GetProfile200Response) HasIpWhitelistEnabled() bool {
	if o != nil && !IsNil(o.IpWhitelistEnabled) {
		return true
	}

	return false
}

// SetIpWhitelistEnabled gets a reference to the given bool and assigns it to the IpWhitelistEnabled field.
// Deprecated
func (o *GetProfile200Response) SetIpWhitelistEnabled(v bool) {
	o.IpWhitelistEnabled = &v
}

// GetLishAuthMethod returns the LishAuthMethod field value if set, zero value otherwise.
func (o *GetProfile200Response) GetLishAuthMethod() string {
	if o == nil || IsNil(o.LishAuthMethod) {
		var ret string
		return ret
	}
	return *o.LishAuthMethod
}

// GetLishAuthMethodOk returns a tuple with the LishAuthMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetProfile200Response) GetLishAuthMethodOk() (*string, bool) {
	if o == nil || IsNil(o.LishAuthMethod) {
		return nil, false
	}
	return o.LishAuthMethod, true
}

// HasLishAuthMethod returns a boolean if a field has been set.
func (o *GetProfile200Response) HasLishAuthMethod() bool {
	if o != nil && !IsNil(o.LishAuthMethod) {
		return true
	}

	return false
}

// SetLishAuthMethod gets a reference to the given string and assigns it to the LishAuthMethod field.
func (o *GetProfile200Response) SetLishAuthMethod(v string) {
	o.LishAuthMethod = &v
}

// GetReferrals returns the Referrals field value if set, zero value otherwise.
func (o *GetProfile200Response) GetReferrals() GetProfile200ResponseReferrals {
	if o == nil || IsNil(o.Referrals) {
		var ret GetProfile200ResponseReferrals
		return ret
	}
	return *o.Referrals
}

// GetReferralsOk returns a tuple with the Referrals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetProfile200Response) GetReferralsOk() (*GetProfile200ResponseReferrals, bool) {
	if o == nil || IsNil(o.Referrals) {
		return nil, false
	}
	return o.Referrals, true
}

// HasReferrals returns a boolean if a field has been set.
func (o *GetProfile200Response) HasReferrals() bool {
	if o != nil && !IsNil(o.Referrals) {
		return true
	}

	return false
}

// SetReferrals gets a reference to the given GetProfile200ResponseReferrals and assigns it to the Referrals field.
func (o *GetProfile200Response) SetReferrals(v GetProfile200ResponseReferrals) {
	o.Referrals = &v
}

// GetRestricted returns the Restricted field value if set, zero value otherwise.
func (o *GetProfile200Response) GetRestricted() bool {
	if o == nil || IsNil(o.Restricted) {
		var ret bool
		return ret
	}
	return *o.Restricted
}

// GetRestrictedOk returns a tuple with the Restricted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetProfile200Response) GetRestrictedOk() (*bool, bool) {
	if o == nil || IsNil(o.Restricted) {
		return nil, false
	}
	return o.Restricted, true
}

// HasRestricted returns a boolean if a field has been set.
func (o *GetProfile200Response) HasRestricted() bool {
	if o != nil && !IsNil(o.Restricted) {
		return true
	}

	return false
}

// SetRestricted gets a reference to the given bool and assigns it to the Restricted field.
func (o *GetProfile200Response) SetRestricted(v bool) {
	o.Restricted = &v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *GetProfile200Response) GetTimezone() string {
	if o == nil || IsNil(o.Timezone) {
		var ret string
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetProfile200Response) GetTimezoneOk() (*string, bool) {
	if o == nil || IsNil(o.Timezone) {
		return nil, false
	}
	return o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *GetProfile200Response) HasTimezone() bool {
	if o != nil && !IsNil(o.Timezone) {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given string and assigns it to the Timezone field.
func (o *GetProfile200Response) SetTimezone(v string) {
	o.Timezone = &v
}

// GetTwoFactorAuth returns the TwoFactorAuth field value if set, zero value otherwise.
func (o *GetProfile200Response) GetTwoFactorAuth() bool {
	if o == nil || IsNil(o.TwoFactorAuth) {
		var ret bool
		return ret
	}
	return *o.TwoFactorAuth
}

// GetTwoFactorAuthOk returns a tuple with the TwoFactorAuth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetProfile200Response) GetTwoFactorAuthOk() (*bool, bool) {
	if o == nil || IsNil(o.TwoFactorAuth) {
		return nil, false
	}
	return o.TwoFactorAuth, true
}

// HasTwoFactorAuth returns a boolean if a field has been set.
func (o *GetProfile200Response) HasTwoFactorAuth() bool {
	if o != nil && !IsNil(o.TwoFactorAuth) {
		return true
	}

	return false
}

// SetTwoFactorAuth gets a reference to the given bool and assigns it to the TwoFactorAuth field.
func (o *GetProfile200Response) SetTwoFactorAuth(v bool) {
	o.TwoFactorAuth = &v
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *GetProfile200Response) GetUid() int32 {
	if o == nil || IsNil(o.Uid) {
		var ret int32
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetProfile200Response) GetUidOk() (*int32, bool) {
	if o == nil || IsNil(o.Uid) {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *GetProfile200Response) HasUid() bool {
	if o != nil && !IsNil(o.Uid) {
		return true
	}

	return false
}

// SetUid gets a reference to the given int32 and assigns it to the Uid field.
func (o *GetProfile200Response) SetUid(v int32) {
	o.Uid = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *GetProfile200Response) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetProfile200Response) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *GetProfile200Response) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *GetProfile200Response) SetUsername(v string) {
	o.Username = &v
}

// GetVerifiedPhoneNumber returns the VerifiedPhoneNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetProfile200Response) GetVerifiedPhoneNumber() string {
	if o == nil || IsNil(o.VerifiedPhoneNumber.Get()) {
		var ret string
		return ret
	}
	return *o.VerifiedPhoneNumber.Get()
}

// GetVerifiedPhoneNumberOk returns a tuple with the VerifiedPhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetProfile200Response) GetVerifiedPhoneNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VerifiedPhoneNumber.Get(), o.VerifiedPhoneNumber.IsSet()
}

// HasVerifiedPhoneNumber returns a boolean if a field has been set.
func (o *GetProfile200Response) HasVerifiedPhoneNumber() bool {
	if o != nil && o.VerifiedPhoneNumber.IsSet() {
		return true
	}

	return false
}

// SetVerifiedPhoneNumber gets a reference to the given NullableString and assigns it to the VerifiedPhoneNumber field.
func (o *GetProfile200Response) SetVerifiedPhoneNumber(v string) {
	o.VerifiedPhoneNumber.Set(&v)
}
// SetVerifiedPhoneNumberNil sets the value for VerifiedPhoneNumber to be an explicit nil
func (o *GetProfile200Response) SetVerifiedPhoneNumberNil() {
	o.VerifiedPhoneNumber.Set(nil)
}

// UnsetVerifiedPhoneNumber ensures that no value is present for VerifiedPhoneNumber, not even an explicit nil
func (o *GetProfile200Response) UnsetVerifiedPhoneNumber() {
	o.VerifiedPhoneNumber.Unset()
}

func (o GetProfile200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetProfile200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AuthenticationType) {
		toSerialize["authentication_type"] = o.AuthenticationType
	}
	if o.AuthorizedKeys != nil {
		toSerialize["authorized_keys"] = o.AuthorizedKeys
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.EmailNotifications) {
		toSerialize["email_notifications"] = o.EmailNotifications
	}
	if !IsNil(o.IpWhitelistEnabled) {
		toSerialize["ip_whitelist_enabled"] = o.IpWhitelistEnabled
	}
	if !IsNil(o.LishAuthMethod) {
		toSerialize["lish_auth_method"] = o.LishAuthMethod
	}
	if !IsNil(o.Referrals) {
		toSerialize["referrals"] = o.Referrals
	}
	if !IsNil(o.Restricted) {
		toSerialize["restricted"] = o.Restricted
	}
	if !IsNil(o.Timezone) {
		toSerialize["timezone"] = o.Timezone
	}
	if !IsNil(o.TwoFactorAuth) {
		toSerialize["two_factor_auth"] = o.TwoFactorAuth
	}
	if !IsNil(o.Uid) {
		toSerialize["uid"] = o.Uid
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if o.VerifiedPhoneNumber.IsSet() {
		toSerialize["verified_phone_number"] = o.VerifiedPhoneNumber.Get()
	}
	return toSerialize, nil
}

type NullableGetProfile200Response struct {
	value *GetProfile200Response
	isSet bool
}

func (v NullableGetProfile200Response) Get() *GetProfile200Response {
	return v.value
}

func (v *NullableGetProfile200Response) Set(val *GetProfile200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetProfile200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetProfile200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetProfile200Response(val *GetProfile200Response) *NullableGetProfile200Response {
	return &NullableGetProfile200Response{value: val, isSet: true}
}

func (v NullableGetProfile200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetProfile200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


