/*
Linode API

[Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

API version: 4.189.2
Contact: support@linode.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PostObjectStorageObjectUrlRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostObjectStorageObjectUrlRequest{}

// PostObjectStorageObjectUrlRequest struct for PostObjectStorageObjectUrlRequest
type PostObjectStorageObjectUrlRequest struct {
	// The expected `Content-type` header of the request this signed URL will be valid for.  If provided, the `Content-type` header _must_ be sent with the request when this URL is used, and _must_ be the same as it was when the signed URL was created. Required for all methods _except_ `GET` or `DELETE`.
	ContentType *string `json:"content_type,omitempty"`
	// How long this signed URL will be valid for, in seconds.  If omitted, the URL will be valid for 3600 seconds (1 hour).
	ExpiresIn *int32 `json:"expires_in,omitempty"`
	// The HTTP method allowed to be used with the pre-signed URL.
	Method string `json:"method"`
	// The name of the object that will be accessed with the pre-signed URL. This object need not exist, and no error will be returned if it doesn't. This behavior is useful for generating pre-signed URLs to upload new objects to by setting the `method` to `PUT`.
	Name string `json:"name"`
}

type _PostObjectStorageObjectUrlRequest PostObjectStorageObjectUrlRequest

// NewPostObjectStorageObjectUrlRequest instantiates a new PostObjectStorageObjectUrlRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostObjectStorageObjectUrlRequest(method string, name string) *PostObjectStorageObjectUrlRequest {
	this := PostObjectStorageObjectUrlRequest{}
	var expiresIn int32 = 3600
	this.ExpiresIn = &expiresIn
	this.Method = method
	this.Name = name
	return &this
}

// NewPostObjectStorageObjectUrlRequestWithDefaults instantiates a new PostObjectStorageObjectUrlRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostObjectStorageObjectUrlRequestWithDefaults() *PostObjectStorageObjectUrlRequest {
	this := PostObjectStorageObjectUrlRequest{}
	var expiresIn int32 = 3600
	this.ExpiresIn = &expiresIn
	var method string = "GET"
	this.Method = method
	return &this
}

// GetContentType returns the ContentType field value if set, zero value otherwise.
func (o *PostObjectStorageObjectUrlRequest) GetContentType() string {
	if o == nil || IsNil(o.ContentType) {
		var ret string
		return ret
	}
	return *o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostObjectStorageObjectUrlRequest) GetContentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ContentType) {
		return nil, false
	}
	return o.ContentType, true
}

// HasContentType returns a boolean if a field has been set.
func (o *PostObjectStorageObjectUrlRequest) HasContentType() bool {
	if o != nil && !IsNil(o.ContentType) {
		return true
	}

	return false
}

// SetContentType gets a reference to the given string and assigns it to the ContentType field.
func (o *PostObjectStorageObjectUrlRequest) SetContentType(v string) {
	o.ContentType = &v
}

// GetExpiresIn returns the ExpiresIn field value if set, zero value otherwise.
func (o *PostObjectStorageObjectUrlRequest) GetExpiresIn() int32 {
	if o == nil || IsNil(o.ExpiresIn) {
		var ret int32
		return ret
	}
	return *o.ExpiresIn
}

// GetExpiresInOk returns a tuple with the ExpiresIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostObjectStorageObjectUrlRequest) GetExpiresInOk() (*int32, bool) {
	if o == nil || IsNil(o.ExpiresIn) {
		return nil, false
	}
	return o.ExpiresIn, true
}

// HasExpiresIn returns a boolean if a field has been set.
func (o *PostObjectStorageObjectUrlRequest) HasExpiresIn() bool {
	if o != nil && !IsNil(o.ExpiresIn) {
		return true
	}

	return false
}

// SetExpiresIn gets a reference to the given int32 and assigns it to the ExpiresIn field.
func (o *PostObjectStorageObjectUrlRequest) SetExpiresIn(v int32) {
	o.ExpiresIn = &v
}

// GetMethod returns the Method field value
func (o *PostObjectStorageObjectUrlRequest) GetMethod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Method
}

// GetMethodOk returns a tuple with the Method field value
// and a boolean to check if the value has been set.
func (o *PostObjectStorageObjectUrlRequest) GetMethodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Method, true
}

// SetMethod sets field value
func (o *PostObjectStorageObjectUrlRequest) SetMethod(v string) {
	o.Method = v
}

// GetName returns the Name field value
func (o *PostObjectStorageObjectUrlRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PostObjectStorageObjectUrlRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PostObjectStorageObjectUrlRequest) SetName(v string) {
	o.Name = v
}

func (o PostObjectStorageObjectUrlRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostObjectStorageObjectUrlRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ContentType) {
		toSerialize["content_type"] = o.ContentType
	}
	if !IsNil(o.ExpiresIn) {
		toSerialize["expires_in"] = o.ExpiresIn
	}
	toSerialize["method"] = o.Method
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

func (o *PostObjectStorageObjectUrlRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"method",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPostObjectStorageObjectUrlRequest := _PostObjectStorageObjectUrlRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPostObjectStorageObjectUrlRequest)

	if err != nil {
		return err
	}

	*o = PostObjectStorageObjectUrlRequest(varPostObjectStorageObjectUrlRequest)

	return err
}

type NullablePostObjectStorageObjectUrlRequest struct {
	value *PostObjectStorageObjectUrlRequest
	isSet bool
}

func (v NullablePostObjectStorageObjectUrlRequest) Get() *PostObjectStorageObjectUrlRequest {
	return v.value
}

func (v *NullablePostObjectStorageObjectUrlRequest) Set(val *PostObjectStorageObjectUrlRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePostObjectStorageObjectUrlRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePostObjectStorageObjectUrlRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostObjectStorageObjectUrlRequest(val *PostObjectStorageObjectUrlRequest) *NullablePostObjectStorageObjectUrlRequest {
	return &NullablePostObjectStorageObjectUrlRequest{value: val, isSet: true}
}

func (v NullablePostObjectStorageObjectUrlRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostObjectStorageObjectUrlRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


