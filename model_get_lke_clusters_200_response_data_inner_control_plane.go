/*
Linode API

[Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

API version: 4.189.2
Contact: support@linode.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GetLkeClusters200ResponseDataInnerControlPlane type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetLkeClusters200ResponseDataInnerControlPlane{}

// GetLkeClusters200ResponseDataInnerControlPlane Defines settings for the Kubernetes Control Plane, including High Availability (HA) and IP-based Access Control List (ACL) for Control Plane Components. Enabling of either of these for LKE is an __irreversible__ change.
type GetLkeClusters200ResponseDataInnerControlPlane struct {
	Acl *GetLkeClusters200ResponseDataInnerControlPlaneAcl `json:"acl,omitempty"`
	// Enables High Availability for the Control Plane Components of the cluster. Defaults to `false`. Enabling High Availability for LKE is an __irreversible__ change.
	HighAvailability *bool `json:"high_availability,omitempty"`
}

// NewGetLkeClusters200ResponseDataInnerControlPlane instantiates a new GetLkeClusters200ResponseDataInnerControlPlane object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetLkeClusters200ResponseDataInnerControlPlane() *GetLkeClusters200ResponseDataInnerControlPlane {
	this := GetLkeClusters200ResponseDataInnerControlPlane{}
	var highAvailability bool = false
	this.HighAvailability = &highAvailability
	return &this
}

// NewGetLkeClusters200ResponseDataInnerControlPlaneWithDefaults instantiates a new GetLkeClusters200ResponseDataInnerControlPlane object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetLkeClusters200ResponseDataInnerControlPlaneWithDefaults() *GetLkeClusters200ResponseDataInnerControlPlane {
	this := GetLkeClusters200ResponseDataInnerControlPlane{}
	var highAvailability bool = false
	this.HighAvailability = &highAvailability
	return &this
}

// GetAcl returns the Acl field value if set, zero value otherwise.
func (o *GetLkeClusters200ResponseDataInnerControlPlane) GetAcl() GetLkeClusters200ResponseDataInnerControlPlaneAcl {
	if o == nil || IsNil(o.Acl) {
		var ret GetLkeClusters200ResponseDataInnerControlPlaneAcl
		return ret
	}
	return *o.Acl
}

// GetAclOk returns a tuple with the Acl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLkeClusters200ResponseDataInnerControlPlane) GetAclOk() (*GetLkeClusters200ResponseDataInnerControlPlaneAcl, bool) {
	if o == nil || IsNil(o.Acl) {
		return nil, false
	}
	return o.Acl, true
}

// HasAcl returns a boolean if a field has been set.
func (o *GetLkeClusters200ResponseDataInnerControlPlane) HasAcl() bool {
	if o != nil && !IsNil(o.Acl) {
		return true
	}

	return false
}

// SetAcl gets a reference to the given GetLkeClusters200ResponseDataInnerControlPlaneAcl and assigns it to the Acl field.
func (o *GetLkeClusters200ResponseDataInnerControlPlane) SetAcl(v GetLkeClusters200ResponseDataInnerControlPlaneAcl) {
	o.Acl = &v
}

// GetHighAvailability returns the HighAvailability field value if set, zero value otherwise.
func (o *GetLkeClusters200ResponseDataInnerControlPlane) GetHighAvailability() bool {
	if o == nil || IsNil(o.HighAvailability) {
		var ret bool
		return ret
	}
	return *o.HighAvailability
}

// GetHighAvailabilityOk returns a tuple with the HighAvailability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLkeClusters200ResponseDataInnerControlPlane) GetHighAvailabilityOk() (*bool, bool) {
	if o == nil || IsNil(o.HighAvailability) {
		return nil, false
	}
	return o.HighAvailability, true
}

// HasHighAvailability returns a boolean if a field has been set.
func (o *GetLkeClusters200ResponseDataInnerControlPlane) HasHighAvailability() bool {
	if o != nil && !IsNil(o.HighAvailability) {
		return true
	}

	return false
}

// SetHighAvailability gets a reference to the given bool and assigns it to the HighAvailability field.
func (o *GetLkeClusters200ResponseDataInnerControlPlane) SetHighAvailability(v bool) {
	o.HighAvailability = &v
}

func (o GetLkeClusters200ResponseDataInnerControlPlane) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetLkeClusters200ResponseDataInnerControlPlane) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Acl) {
		toSerialize["acl"] = o.Acl
	}
	if !IsNil(o.HighAvailability) {
		toSerialize["high_availability"] = o.HighAvailability
	}
	return toSerialize, nil
}

type NullableGetLkeClusters200ResponseDataInnerControlPlane struct {
	value *GetLkeClusters200ResponseDataInnerControlPlane
	isSet bool
}

func (v NullableGetLkeClusters200ResponseDataInnerControlPlane) Get() *GetLkeClusters200ResponseDataInnerControlPlane {
	return v.value
}

func (v *NullableGetLkeClusters200ResponseDataInnerControlPlane) Set(val *GetLkeClusters200ResponseDataInnerControlPlane) {
	v.value = val
	v.isSet = true
}

func (v NullableGetLkeClusters200ResponseDataInnerControlPlane) IsSet() bool {
	return v.isSet
}

func (v *NullableGetLkeClusters200ResponseDataInnerControlPlane) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetLkeClusters200ResponseDataInnerControlPlane(val *GetLkeClusters200ResponseDataInnerControlPlane) *NullableGetLkeClusters200ResponseDataInnerControlPlane {
	return &NullableGetLkeClusters200ResponseDataInnerControlPlane{value: val, isSet: true}
}

func (v NullableGetLkeClusters200ResponseDataInnerControlPlane) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetLkeClusters200ResponseDataInnerControlPlane) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


