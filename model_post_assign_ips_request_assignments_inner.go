/*
Linode API

[Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

API version: 4.189.2
Contact: support@linode.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PostAssignIpsRequestAssignmentsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostAssignIpsRequestAssignmentsInner{}

// PostAssignIpsRequestAssignmentsInner struct for PostAssignIpsRequestAssignmentsInner
type PostAssignIpsRequestAssignmentsInner struct {
	// The IPv4 address or IPv6 range for this assignment.  - Must be an IPv4 address or an IPv6 range you can access in the Region specified. - IPv6 ranges must include a prefix length of `/56` or `/64`, for example: `2001:db8:3c4d:15::/64`. - Assignment of an IPv6 range to a Linode updates the route target of the range to the assigned Linode's SLAAC address. - May be a public or private address.
	Address string `json:"address"`
	// The ID of the Linode to assign this address to. The IP's previous Linode will lose this address, and must end up with at least one public address and no more than one private address once all assignments have been made.
	LinodeId int32 `json:"linode_id"`
}

type _PostAssignIpsRequestAssignmentsInner PostAssignIpsRequestAssignmentsInner

// NewPostAssignIpsRequestAssignmentsInner instantiates a new PostAssignIpsRequestAssignmentsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostAssignIpsRequestAssignmentsInner(address string, linodeId int32) *PostAssignIpsRequestAssignmentsInner {
	this := PostAssignIpsRequestAssignmentsInner{}
	this.Address = address
	this.LinodeId = linodeId
	return &this
}

// NewPostAssignIpsRequestAssignmentsInnerWithDefaults instantiates a new PostAssignIpsRequestAssignmentsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostAssignIpsRequestAssignmentsInnerWithDefaults() *PostAssignIpsRequestAssignmentsInner {
	this := PostAssignIpsRequestAssignmentsInner{}
	return &this
}

// GetAddress returns the Address field value
func (o *PostAssignIpsRequestAssignmentsInner) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *PostAssignIpsRequestAssignmentsInner) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *PostAssignIpsRequestAssignmentsInner) SetAddress(v string) {
	o.Address = v
}

// GetLinodeId returns the LinodeId field value
func (o *PostAssignIpsRequestAssignmentsInner) GetLinodeId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.LinodeId
}

// GetLinodeIdOk returns a tuple with the LinodeId field value
// and a boolean to check if the value has been set.
func (o *PostAssignIpsRequestAssignmentsInner) GetLinodeIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LinodeId, true
}

// SetLinodeId sets field value
func (o *PostAssignIpsRequestAssignmentsInner) SetLinodeId(v int32) {
	o.LinodeId = v
}

func (o PostAssignIpsRequestAssignmentsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostAssignIpsRequestAssignmentsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["address"] = o.Address
	toSerialize["linode_id"] = o.LinodeId
	return toSerialize, nil
}

func (o *PostAssignIpsRequestAssignmentsInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"address",
		"linode_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPostAssignIpsRequestAssignmentsInner := _PostAssignIpsRequestAssignmentsInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPostAssignIpsRequestAssignmentsInner)

	if err != nil {
		return err
	}

	*o = PostAssignIpsRequestAssignmentsInner(varPostAssignIpsRequestAssignmentsInner)

	return err
}

type NullablePostAssignIpsRequestAssignmentsInner struct {
	value *PostAssignIpsRequestAssignmentsInner
	isSet bool
}

func (v NullablePostAssignIpsRequestAssignmentsInner) Get() *PostAssignIpsRequestAssignmentsInner {
	return v.value
}

func (v *NullablePostAssignIpsRequestAssignmentsInner) Set(val *PostAssignIpsRequestAssignmentsInner) {
	v.value = val
	v.isSet = true
}

func (v NullablePostAssignIpsRequestAssignmentsInner) IsSet() bool {
	return v.isSet
}

func (v *NullablePostAssignIpsRequestAssignmentsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostAssignIpsRequestAssignmentsInner(val *PostAssignIpsRequestAssignmentsInner) *NullablePostAssignIpsRequestAssignmentsInner {
	return &NullablePostAssignIpsRequestAssignmentsInner{value: val, isSet: true}
}

func (v NullablePostAssignIpsRequestAssignmentsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostAssignIpsRequestAssignmentsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


