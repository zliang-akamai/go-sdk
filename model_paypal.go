/*
Linode API

[Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

API version: 4.189.2
Contact: support@linode.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Paypal type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Paypal{}

// Paypal PayPal information.
type Paypal struct {
	// The email address associated with your PayPal account.
	Email *string `json:"email,omitempty"`
	// PayPal Merchant ID associated with your PayPal account.
	PaypalId *string `json:"paypal_id,omitempty"`
}

// NewPaypal instantiates a new Paypal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaypal() *Paypal {
	this := Paypal{}
	return &this
}

// NewPaypalWithDefaults instantiates a new Paypal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaypalWithDefaults() *Paypal {
	this := Paypal{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *Paypal) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Paypal) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *Paypal) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *Paypal) SetEmail(v string) {
	o.Email = &v
}

// GetPaypalId returns the PaypalId field value if set, zero value otherwise.
func (o *Paypal) GetPaypalId() string {
	if o == nil || IsNil(o.PaypalId) {
		var ret string
		return ret
	}
	return *o.PaypalId
}

// GetPaypalIdOk returns a tuple with the PaypalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Paypal) GetPaypalIdOk() (*string, bool) {
	if o == nil || IsNil(o.PaypalId) {
		return nil, false
	}
	return o.PaypalId, true
}

// HasPaypalId returns a boolean if a field has been set.
func (o *Paypal) HasPaypalId() bool {
	if o != nil && !IsNil(o.PaypalId) {
		return true
	}

	return false
}

// SetPaypalId gets a reference to the given string and assigns it to the PaypalId field.
func (o *Paypal) SetPaypalId(v string) {
	o.PaypalId = &v
}

func (o Paypal) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Paypal) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.PaypalId) {
		toSerialize["paypal_id"] = o.PaypalId
	}
	return toSerialize, nil
}

type NullablePaypal struct {
	value *Paypal
	isSet bool
}

func (v NullablePaypal) Get() *Paypal {
	return v.value
}

func (v *NullablePaypal) Set(val *Paypal) {
	v.value = val
	v.isSet = true
}

func (v NullablePaypal) IsSet() bool {
	return v.isSet
}

func (v *NullablePaypal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaypal(val *Paypal) *NullablePaypal {
	return &NullablePaypal{value: val, isSet: true}
}

func (v NullablePaypal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaypal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


