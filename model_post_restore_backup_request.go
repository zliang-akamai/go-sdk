/*
Linode API

[Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

API version: 4.189.2
Contact: support@linode.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PostRestoreBackupRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostRestoreBackupRequest{}

// PostRestoreBackupRequest struct for PostRestoreBackupRequest
type PostRestoreBackupRequest struct {
	// The ID of the Linode to restore a Backup to.
	LinodeId int32 `json:"linode_id"`
	// If True, deletes all Disks and Configs on the target Linode before restoring.  If False, and the Disk image size is larger than the available space on the Linode, an error message indicating insufficient space is returned.
	Overwrite *bool `json:"overwrite,omitempty"`
}

type _PostRestoreBackupRequest PostRestoreBackupRequest

// NewPostRestoreBackupRequest instantiates a new PostRestoreBackupRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostRestoreBackupRequest(linodeId int32) *PostRestoreBackupRequest {
	this := PostRestoreBackupRequest{}
	this.LinodeId = linodeId
	return &this
}

// NewPostRestoreBackupRequestWithDefaults instantiates a new PostRestoreBackupRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostRestoreBackupRequestWithDefaults() *PostRestoreBackupRequest {
	this := PostRestoreBackupRequest{}
	return &this
}

// GetLinodeId returns the LinodeId field value
func (o *PostRestoreBackupRequest) GetLinodeId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.LinodeId
}

// GetLinodeIdOk returns a tuple with the LinodeId field value
// and a boolean to check if the value has been set.
func (o *PostRestoreBackupRequest) GetLinodeIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LinodeId, true
}

// SetLinodeId sets field value
func (o *PostRestoreBackupRequest) SetLinodeId(v int32) {
	o.LinodeId = v
}

// GetOverwrite returns the Overwrite field value if set, zero value otherwise.
func (o *PostRestoreBackupRequest) GetOverwrite() bool {
	if o == nil || IsNil(o.Overwrite) {
		var ret bool
		return ret
	}
	return *o.Overwrite
}

// GetOverwriteOk returns a tuple with the Overwrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostRestoreBackupRequest) GetOverwriteOk() (*bool, bool) {
	if o == nil || IsNil(o.Overwrite) {
		return nil, false
	}
	return o.Overwrite, true
}

// HasOverwrite returns a boolean if a field has been set.
func (o *PostRestoreBackupRequest) HasOverwrite() bool {
	if o != nil && !IsNil(o.Overwrite) {
		return true
	}

	return false
}

// SetOverwrite gets a reference to the given bool and assigns it to the Overwrite field.
func (o *PostRestoreBackupRequest) SetOverwrite(v bool) {
	o.Overwrite = &v
}

func (o PostRestoreBackupRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostRestoreBackupRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["linode_id"] = o.LinodeId
	if !IsNil(o.Overwrite) {
		toSerialize["overwrite"] = o.Overwrite
	}
	return toSerialize, nil
}

func (o *PostRestoreBackupRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"linode_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPostRestoreBackupRequest := _PostRestoreBackupRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPostRestoreBackupRequest)

	if err != nil {
		return err
	}

	*o = PostRestoreBackupRequest(varPostRestoreBackupRequest)

	return err
}

type NullablePostRestoreBackupRequest struct {
	value *PostRestoreBackupRequest
	isSet bool
}

func (v NullablePostRestoreBackupRequest) Get() *PostRestoreBackupRequest {
	return v.value
}

func (v *NullablePostRestoreBackupRequest) Set(val *PostRestoreBackupRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePostRestoreBackupRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePostRestoreBackupRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostRestoreBackupRequest(val *PostRestoreBackupRequest) *NullablePostRestoreBackupRequest {
	return &NullablePostRestoreBackupRequest{value: val, isSet: true}
}

func (v NullablePostRestoreBackupRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostRestoreBackupRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


