/*
Linode API

[Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

API version: 4.189.2
Contact: support@linode.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// GetTaggedObjects200ResponseDataInnerData - struct for GetTaggedObjects200ResponseDataInnerData
type GetTaggedObjects200ResponseDataInnerData struct {
	Domain1 *Domain1
	Linode2 *Linode2
	NodeBalancer1 *NodeBalancer1
	Volume1 *Volume1
}

// Domain1AsGetTaggedObjects200ResponseDataInnerData is a convenience function that returns Domain1 wrapped in GetTaggedObjects200ResponseDataInnerData
func Domain1AsGetTaggedObjects200ResponseDataInnerData(v *Domain1) GetTaggedObjects200ResponseDataInnerData {
	return GetTaggedObjects200ResponseDataInnerData{
		Domain1: v,
	}
}

// Linode2AsGetTaggedObjects200ResponseDataInnerData is a convenience function that returns Linode2 wrapped in GetTaggedObjects200ResponseDataInnerData
func Linode2AsGetTaggedObjects200ResponseDataInnerData(v *Linode2) GetTaggedObjects200ResponseDataInnerData {
	return GetTaggedObjects200ResponseDataInnerData{
		Linode2: v,
	}
}

// NodeBalancer1AsGetTaggedObjects200ResponseDataInnerData is a convenience function that returns NodeBalancer1 wrapped in GetTaggedObjects200ResponseDataInnerData
func NodeBalancer1AsGetTaggedObjects200ResponseDataInnerData(v *NodeBalancer1) GetTaggedObjects200ResponseDataInnerData {
	return GetTaggedObjects200ResponseDataInnerData{
		NodeBalancer1: v,
	}
}

// Volume1AsGetTaggedObjects200ResponseDataInnerData is a convenience function that returns Volume1 wrapped in GetTaggedObjects200ResponseDataInnerData
func Volume1AsGetTaggedObjects200ResponseDataInnerData(v *Volume1) GetTaggedObjects200ResponseDataInnerData {
	return GetTaggedObjects200ResponseDataInnerData{
		Volume1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetTaggedObjects200ResponseDataInnerData) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Domain1
	err = newStrictDecoder(data).Decode(&dst.Domain1)
	if err == nil {
		jsonDomain1, _ := json.Marshal(dst.Domain1)
		if string(jsonDomain1) == "{}" { // empty struct
			dst.Domain1 = nil
		} else {
			if err = validator.Validate(dst.Domain1); err != nil {
				dst.Domain1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Domain1 = nil
	}

	// try to unmarshal data into Linode2
	err = newStrictDecoder(data).Decode(&dst.Linode2)
	if err == nil {
		jsonLinode2, _ := json.Marshal(dst.Linode2)
		if string(jsonLinode2) == "{}" { // empty struct
			dst.Linode2 = nil
		} else {
			if err = validator.Validate(dst.Linode2); err != nil {
				dst.Linode2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Linode2 = nil
	}

	// try to unmarshal data into NodeBalancer1
	err = newStrictDecoder(data).Decode(&dst.NodeBalancer1)
	if err == nil {
		jsonNodeBalancer1, _ := json.Marshal(dst.NodeBalancer1)
		if string(jsonNodeBalancer1) == "{}" { // empty struct
			dst.NodeBalancer1 = nil
		} else {
			if err = validator.Validate(dst.NodeBalancer1); err != nil {
				dst.NodeBalancer1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.NodeBalancer1 = nil
	}

	// try to unmarshal data into Volume1
	err = newStrictDecoder(data).Decode(&dst.Volume1)
	if err == nil {
		jsonVolume1, _ := json.Marshal(dst.Volume1)
		if string(jsonVolume1) == "{}" { // empty struct
			dst.Volume1 = nil
		} else {
			if err = validator.Validate(dst.Volume1); err != nil {
				dst.Volume1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Volume1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Domain1 = nil
		dst.Linode2 = nil
		dst.NodeBalancer1 = nil
		dst.Volume1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetTaggedObjects200ResponseDataInnerData)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetTaggedObjects200ResponseDataInnerData)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetTaggedObjects200ResponseDataInnerData) MarshalJSON() ([]byte, error) {
	if src.Domain1 != nil {
		return json.Marshal(&src.Domain1)
	}

	if src.Linode2 != nil {
		return json.Marshal(&src.Linode2)
	}

	if src.NodeBalancer1 != nil {
		return json.Marshal(&src.NodeBalancer1)
	}

	if src.Volume1 != nil {
		return json.Marshal(&src.Volume1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetTaggedObjects200ResponseDataInnerData) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.Domain1 != nil {
		return obj.Domain1
	}

	if obj.Linode2 != nil {
		return obj.Linode2
	}

	if obj.NodeBalancer1 != nil {
		return obj.NodeBalancer1
	}

	if obj.Volume1 != nil {
		return obj.Volume1
	}

	// all schemas are nil
	return nil
}

type NullableGetTaggedObjects200ResponseDataInnerData struct {
	value *GetTaggedObjects200ResponseDataInnerData
	isSet bool
}

func (v NullableGetTaggedObjects200ResponseDataInnerData) Get() *GetTaggedObjects200ResponseDataInnerData {
	return v.value
}

func (v *NullableGetTaggedObjects200ResponseDataInnerData) Set(val *GetTaggedObjects200ResponseDataInnerData) {
	v.value = val
	v.isSet = true
}

func (v NullableGetTaggedObjects200ResponseDataInnerData) IsSet() bool {
	return v.isSet
}

func (v *NullableGetTaggedObjects200ResponseDataInnerData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetTaggedObjects200ResponseDataInnerData(val *GetTaggedObjects200ResponseDataInnerData) *NullableGetTaggedObjects200ResponseDataInnerData {
	return &NullableGetTaggedObjects200ResponseDataInnerData{value: val, isSet: true}
}

func (v NullableGetTaggedObjects200ResponseDataInnerData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetTaggedObjects200ResponseDataInnerData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


