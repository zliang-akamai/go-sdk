/*
Linode API

[Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

API version: 4.189.2
Contact: support@linode.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PutObjectStorageKey200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PutObjectStorageKey200Response{}

// PutObjectStorageKey200Response An updated Object Storage key used to communicate with the Object Storage S3 API.
type PutObjectStorageKey200Response struct {
	// A unique string chosen by the API to identify this key. Used as a user name to identify this key when making requests to the S3 API.
	AccessKey *string `json:"access_key,omitempty"`
	// This Object Storage key's unique numeric identifier.
	Id *int32 `json:"id,omitempty"`
	// The label given to this key. For display purposes only.
	Label *string `json:"label,omitempty"`
	// Whether this Object Storage key limits access to specific buckets and permissions. Returns `false` if this key grants full access.  > ðŸ“˜ > > The `bucket_access` array that contains limited Object Storage key settings doesn't appear in this response. Store this key's `id` from the response and run [Get an Object Storage key](https://techdocs.akamai.com/linode-api/reference/get-object-storage-key) to view these settings.
	Limited *bool `json:"limited,omitempty"`
	// The key can be used in these regions to create new buckets, but it can't be used to manage content in those buckets. See [Create an Object Storage key](https://techdocs.akamai.com/linode-api/reference/post-object-storage-keys) for more details.
	Regions []PutObjectStorageKey200ResponseRegionsInner `json:"regions,omitempty"`
	// This Object Storage key's secret key. Used as a password to validate this key when making requests to the S3 API. This value is only revealed in a response after creating or modifying a key.
	SecretKey *string `json:"secret_key,omitempty"`
}

// NewPutObjectStorageKey200Response instantiates a new PutObjectStorageKey200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPutObjectStorageKey200Response() *PutObjectStorageKey200Response {
	this := PutObjectStorageKey200Response{}
	return &this
}

// NewPutObjectStorageKey200ResponseWithDefaults instantiates a new PutObjectStorageKey200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPutObjectStorageKey200ResponseWithDefaults() *PutObjectStorageKey200Response {
	this := PutObjectStorageKey200Response{}
	return &this
}

// GetAccessKey returns the AccessKey field value if set, zero value otherwise.
func (o *PutObjectStorageKey200Response) GetAccessKey() string {
	if o == nil || IsNil(o.AccessKey) {
		var ret string
		return ret
	}
	return *o.AccessKey
}

// GetAccessKeyOk returns a tuple with the AccessKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutObjectStorageKey200Response) GetAccessKeyOk() (*string, bool) {
	if o == nil || IsNil(o.AccessKey) {
		return nil, false
	}
	return o.AccessKey, true
}

// HasAccessKey returns a boolean if a field has been set.
func (o *PutObjectStorageKey200Response) HasAccessKey() bool {
	if o != nil && !IsNil(o.AccessKey) {
		return true
	}

	return false
}

// SetAccessKey gets a reference to the given string and assigns it to the AccessKey field.
func (o *PutObjectStorageKey200Response) SetAccessKey(v string) {
	o.AccessKey = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PutObjectStorageKey200Response) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutObjectStorageKey200Response) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PutObjectStorageKey200Response) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *PutObjectStorageKey200Response) SetId(v int32) {
	o.Id = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *PutObjectStorageKey200Response) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutObjectStorageKey200Response) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *PutObjectStorageKey200Response) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *PutObjectStorageKey200Response) SetLabel(v string) {
	o.Label = &v
}

// GetLimited returns the Limited field value if set, zero value otherwise.
func (o *PutObjectStorageKey200Response) GetLimited() bool {
	if o == nil || IsNil(o.Limited) {
		var ret bool
		return ret
	}
	return *o.Limited
}

// GetLimitedOk returns a tuple with the Limited field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutObjectStorageKey200Response) GetLimitedOk() (*bool, bool) {
	if o == nil || IsNil(o.Limited) {
		return nil, false
	}
	return o.Limited, true
}

// HasLimited returns a boolean if a field has been set.
func (o *PutObjectStorageKey200Response) HasLimited() bool {
	if o != nil && !IsNil(o.Limited) {
		return true
	}

	return false
}

// SetLimited gets a reference to the given bool and assigns it to the Limited field.
func (o *PutObjectStorageKey200Response) SetLimited(v bool) {
	o.Limited = &v
}

// GetRegions returns the Regions field value if set, zero value otherwise.
func (o *PutObjectStorageKey200Response) GetRegions() []PutObjectStorageKey200ResponseRegionsInner {
	if o == nil || IsNil(o.Regions) {
		var ret []PutObjectStorageKey200ResponseRegionsInner
		return ret
	}
	return o.Regions
}

// GetRegionsOk returns a tuple with the Regions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutObjectStorageKey200Response) GetRegionsOk() ([]PutObjectStorageKey200ResponseRegionsInner, bool) {
	if o == nil || IsNil(o.Regions) {
		return nil, false
	}
	return o.Regions, true
}

// HasRegions returns a boolean if a field has been set.
func (o *PutObjectStorageKey200Response) HasRegions() bool {
	if o != nil && !IsNil(o.Regions) {
		return true
	}

	return false
}

// SetRegions gets a reference to the given []PutObjectStorageKey200ResponseRegionsInner and assigns it to the Regions field.
func (o *PutObjectStorageKey200Response) SetRegions(v []PutObjectStorageKey200ResponseRegionsInner) {
	o.Regions = v
}

// GetSecretKey returns the SecretKey field value if set, zero value otherwise.
func (o *PutObjectStorageKey200Response) GetSecretKey() string {
	if o == nil || IsNil(o.SecretKey) {
		var ret string
		return ret
	}
	return *o.SecretKey
}

// GetSecretKeyOk returns a tuple with the SecretKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutObjectStorageKey200Response) GetSecretKeyOk() (*string, bool) {
	if o == nil || IsNil(o.SecretKey) {
		return nil, false
	}
	return o.SecretKey, true
}

// HasSecretKey returns a boolean if a field has been set.
func (o *PutObjectStorageKey200Response) HasSecretKey() bool {
	if o != nil && !IsNil(o.SecretKey) {
		return true
	}

	return false
}

// SetSecretKey gets a reference to the given string and assigns it to the SecretKey field.
func (o *PutObjectStorageKey200Response) SetSecretKey(v string) {
	o.SecretKey = &v
}

func (o PutObjectStorageKey200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PutObjectStorageKey200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccessKey) {
		toSerialize["access_key"] = o.AccessKey
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.Limited) {
		toSerialize["limited"] = o.Limited
	}
	if !IsNil(o.Regions) {
		toSerialize["regions"] = o.Regions
	}
	if !IsNil(o.SecretKey) {
		toSerialize["secret_key"] = o.SecretKey
	}
	return toSerialize, nil
}

type NullablePutObjectStorageKey200Response struct {
	value *PutObjectStorageKey200Response
	isSet bool
}

func (v NullablePutObjectStorageKey200Response) Get() *PutObjectStorageKey200Response {
	return v.value
}

func (v *NullablePutObjectStorageKey200Response) Set(val *PutObjectStorageKey200Response) {
	v.value = val
	v.isSet = true
}

func (v NullablePutObjectStorageKey200Response) IsSet() bool {
	return v.isSet
}

func (v *NullablePutObjectStorageKey200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePutObjectStorageKey200Response(val *PutObjectStorageKey200Response) *NullablePutObjectStorageKey200Response {
	return &NullablePutObjectStorageKey200Response{value: val, isSet: true}
}

func (v NullablePutObjectStorageKey200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePutObjectStorageKey200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


