/*
Linode API

[Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

API version: 4.189.2
Contact: support@linode.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// GetManagedStats200ResponseData - struct for GetManagedStats200ResponseData
type GetManagedStats200ResponseData struct {
	StatsAvailable *StatsAvailable
	ArrayOfString *[]string
}

// StatsAvailableAsGetManagedStats200ResponseData is a convenience function that returns StatsAvailable wrapped in GetManagedStats200ResponseData
func StatsAvailableAsGetManagedStats200ResponseData(v *StatsAvailable) GetManagedStats200ResponseData {
	return GetManagedStats200ResponseData{
		StatsAvailable: v,
	}
}

// []stringAsGetManagedStats200ResponseData is a convenience function that returns []string wrapped in GetManagedStats200ResponseData
func ArrayOfStringAsGetManagedStats200ResponseData(v *[]string) GetManagedStats200ResponseData {
	return GetManagedStats200ResponseData{
		ArrayOfString: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetManagedStats200ResponseData) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into StatsAvailable
	err = newStrictDecoder(data).Decode(&dst.StatsAvailable)
	if err == nil {
		jsonStatsAvailable, _ := json.Marshal(dst.StatsAvailable)
		if string(jsonStatsAvailable) == "{}" { // empty struct
			dst.StatsAvailable = nil
		} else {
			if err = validator.Validate(dst.StatsAvailable); err != nil {
				dst.StatsAvailable = nil
			} else {
				match++
			}
		}
	} else {
		dst.StatsAvailable = nil
	}

	// try to unmarshal data into ArrayOfString
	err = newStrictDecoder(data).Decode(&dst.ArrayOfString)
	if err == nil {
		jsonArrayOfString, _ := json.Marshal(dst.ArrayOfString)
		if string(jsonArrayOfString) == "{}" { // empty struct
			dst.ArrayOfString = nil
		} else {
			if err = validator.Validate(dst.ArrayOfString); err != nil {
				dst.ArrayOfString = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfString = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.StatsAvailable = nil
		dst.ArrayOfString = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetManagedStats200ResponseData)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetManagedStats200ResponseData)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetManagedStats200ResponseData) MarshalJSON() ([]byte, error) {
	if src.StatsAvailable != nil {
		return json.Marshal(&src.StatsAvailable)
	}

	if src.ArrayOfString != nil {
		return json.Marshal(&src.ArrayOfString)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetManagedStats200ResponseData) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.StatsAvailable != nil {
		return obj.StatsAvailable
	}

	if obj.ArrayOfString != nil {
		return obj.ArrayOfString
	}

	// all schemas are nil
	return nil
}

type NullableGetManagedStats200ResponseData struct {
	value *GetManagedStats200ResponseData
	isSet bool
}

func (v NullableGetManagedStats200ResponseData) Get() *GetManagedStats200ResponseData {
	return v.value
}

func (v *NullableGetManagedStats200ResponseData) Set(val *GetManagedStats200ResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableGetManagedStats200ResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableGetManagedStats200ResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetManagedStats200ResponseData(val *GetManagedStats200ResponseData) *NullableGetManagedStats200ResponseData {
	return &NullableGetManagedStats200ResponseData{value: val, isSet: true}
}

func (v NullableGetManagedStats200ResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetManagedStats200ResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


