/*
Linode API

[Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

API version: 4.189.2
Contact: support@linode.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PostDomainRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostDomainRequest{}

// PostDomainRequest struct for PostDomainRequest
type PostDomainRequest struct {
	// The list of IPs that may perform a zone transfer for this Domain. The total combined length of all data within this array cannot exceed 1000 characters.  __Note__. This is potentially dangerous, and should be set to an empty list unless you intend to use it.
	AxfrIps []string `json:"axfr_ips,omitempty"`
	// A description for this Domain. This is for display purposes only.
	Description *string `json:"description,omitempty"`
	// The domain this Domain represents. Domain labels cannot be longer than 63 characters and must conform to [RFC1035](https://tools.ietf.org/html/rfc1035). Domains must be unique on Linode's platform, including across different Linode accounts; there cannot be two Domains representing the same domain.
	Domain string `json:"domain" validate:"regexp=^(\\\\*\\\\.)?([a-zA-Z0-9-_]{1,63}\\\\.)+([a-zA-Z]{2,3}\\\\.)?([a-zA-Z]{2,16}|xn--[a-zA-Z0-9]+)$"`
	// The amount of time in seconds that may pass before this Domain is no longer authoritative.  - Valid values are 0, 30, 120, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.  - Any other value is rounded up to the nearest valid value.  - A value of 0 is equivalent to the default value of 1209600.
	ExpireSec *int32 `json:"expire_sec,omitempty"`
	// The group this Domain belongs to.  This is for display purposes only.
	// Deprecated
	Group *string `json:"group,omitempty"`
	// This Domain's unique ID.
	Id *int32 `json:"id,omitempty"`
	// The IP addresses representing the master DNS for this Domain. At least one value is required for `type` slave Domains. The total combined length of all data within this array cannot exceed 1000 characters.
	MasterIps []string `json:"master_ips,omitempty"`
	// The amount of time in seconds before this Domain should be refreshed.  - Valid values are 0, 30, 120, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.  - Any other value is rounded up to the nearest valid value.  - A value of 0 is equivalent to the default value of 14400.
	RefreshSec *int32 `json:"refresh_sec,omitempty"`
	// The interval, in seconds, at which a failed refresh should be retried.  - Valid values are 0, 30, 120, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200.  - Any other value is rounded up to the nearest valid value.  - A value of 0 is equivalent to the default value of 14400.
	RetrySec *int32 `json:"retry_sec,omitempty"`
	// Start of Authority email address. This is required for `type` master Domains.
	SoaEmail *string `json:"soa_email,omitempty"`
	// Used to control whether this Domain is currently being rendered.
	Status *string `json:"status,omitempty"`
	// An array of tags applied to this object.  Tags are for organizational purposes only.
	Tags []string `json:"tags,omitempty"`
	// \"Time to Live\" - the amount of time in seconds that this Domain's records may be cached by resolvers or other domain servers.  - Valid values are 0, 30, 120, 300, 3600, 7200, 14400, 28800, 57600, 86400, 172800, 345600, 604800, 1209600, and 2419200. - Any other value is rounded up to the nearest valid value. - A value of 0 is equivalent to the default value of 86400.
	TtlSec *int32 `json:"ttl_sec,omitempty"`
	// Whether this Domain represents the authoritative source of information for the domain it describes (`master`), or whether it is a read-only copy of a master (`slave`).
	Type string `json:"type"`
}

type _PostDomainRequest PostDomainRequest

// NewPostDomainRequest instantiates a new PostDomainRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostDomainRequest(domain string, type_ string) *PostDomainRequest {
	this := PostDomainRequest{}
	this.Domain = domain
	var expireSec int32 = 0
	this.ExpireSec = &expireSec
	var refreshSec int32 = 0
	this.RefreshSec = &refreshSec
	var retrySec int32 = 0
	this.RetrySec = &retrySec
	var status string = "active"
	this.Status = &status
	var ttlSec int32 = 0
	this.TtlSec = &ttlSec
	this.Type = type_
	return &this
}

// NewPostDomainRequestWithDefaults instantiates a new PostDomainRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostDomainRequestWithDefaults() *PostDomainRequest {
	this := PostDomainRequest{}
	var expireSec int32 = 0
	this.ExpireSec = &expireSec
	var refreshSec int32 = 0
	this.RefreshSec = &refreshSec
	var retrySec int32 = 0
	this.RetrySec = &retrySec
	var status string = "active"
	this.Status = &status
	var ttlSec int32 = 0
	this.TtlSec = &ttlSec
	return &this
}

// GetAxfrIps returns the AxfrIps field value if set, zero value otherwise.
func (o *PostDomainRequest) GetAxfrIps() []string {
	if o == nil || IsNil(o.AxfrIps) {
		var ret []string
		return ret
	}
	return o.AxfrIps
}

// GetAxfrIpsOk returns a tuple with the AxfrIps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostDomainRequest) GetAxfrIpsOk() ([]string, bool) {
	if o == nil || IsNil(o.AxfrIps) {
		return nil, false
	}
	return o.AxfrIps, true
}

// HasAxfrIps returns a boolean if a field has been set.
func (o *PostDomainRequest) HasAxfrIps() bool {
	if o != nil && !IsNil(o.AxfrIps) {
		return true
	}

	return false
}

// SetAxfrIps gets a reference to the given []string and assigns it to the AxfrIps field.
func (o *PostDomainRequest) SetAxfrIps(v []string) {
	o.AxfrIps = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PostDomainRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostDomainRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PostDomainRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PostDomainRequest) SetDescription(v string) {
	o.Description = &v
}

// GetDomain returns the Domain field value
func (o *PostDomainRequest) GetDomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Domain
}

// GetDomainOk returns a tuple with the Domain field value
// and a boolean to check if the value has been set.
func (o *PostDomainRequest) GetDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Domain, true
}

// SetDomain sets field value
func (o *PostDomainRequest) SetDomain(v string) {
	o.Domain = v
}

// GetExpireSec returns the ExpireSec field value if set, zero value otherwise.
func (o *PostDomainRequest) GetExpireSec() int32 {
	if o == nil || IsNil(o.ExpireSec) {
		var ret int32
		return ret
	}
	return *o.ExpireSec
}

// GetExpireSecOk returns a tuple with the ExpireSec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostDomainRequest) GetExpireSecOk() (*int32, bool) {
	if o == nil || IsNil(o.ExpireSec) {
		return nil, false
	}
	return o.ExpireSec, true
}

// HasExpireSec returns a boolean if a field has been set.
func (o *PostDomainRequest) HasExpireSec() bool {
	if o != nil && !IsNil(o.ExpireSec) {
		return true
	}

	return false
}

// SetExpireSec gets a reference to the given int32 and assigns it to the ExpireSec field.
func (o *PostDomainRequest) SetExpireSec(v int32) {
	o.ExpireSec = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
// Deprecated
func (o *PostDomainRequest) GetGroup() string {
	if o == nil || IsNil(o.Group) {
		var ret string
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *PostDomainRequest) GetGroupOk() (*string, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *PostDomainRequest) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given string and assigns it to the Group field.
// Deprecated
func (o *PostDomainRequest) SetGroup(v string) {
	o.Group = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PostDomainRequest) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostDomainRequest) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PostDomainRequest) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *PostDomainRequest) SetId(v int32) {
	o.Id = &v
}

// GetMasterIps returns the MasterIps field value if set, zero value otherwise.
func (o *PostDomainRequest) GetMasterIps() []string {
	if o == nil || IsNil(o.MasterIps) {
		var ret []string
		return ret
	}
	return o.MasterIps
}

// GetMasterIpsOk returns a tuple with the MasterIps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostDomainRequest) GetMasterIpsOk() ([]string, bool) {
	if o == nil || IsNil(o.MasterIps) {
		return nil, false
	}
	return o.MasterIps, true
}

// HasMasterIps returns a boolean if a field has been set.
func (o *PostDomainRequest) HasMasterIps() bool {
	if o != nil && !IsNil(o.MasterIps) {
		return true
	}

	return false
}

// SetMasterIps gets a reference to the given []string and assigns it to the MasterIps field.
func (o *PostDomainRequest) SetMasterIps(v []string) {
	o.MasterIps = v
}

// GetRefreshSec returns the RefreshSec field value if set, zero value otherwise.
func (o *PostDomainRequest) GetRefreshSec() int32 {
	if o == nil || IsNil(o.RefreshSec) {
		var ret int32
		return ret
	}
	return *o.RefreshSec
}

// GetRefreshSecOk returns a tuple with the RefreshSec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostDomainRequest) GetRefreshSecOk() (*int32, bool) {
	if o == nil || IsNil(o.RefreshSec) {
		return nil, false
	}
	return o.RefreshSec, true
}

// HasRefreshSec returns a boolean if a field has been set.
func (o *PostDomainRequest) HasRefreshSec() bool {
	if o != nil && !IsNil(o.RefreshSec) {
		return true
	}

	return false
}

// SetRefreshSec gets a reference to the given int32 and assigns it to the RefreshSec field.
func (o *PostDomainRequest) SetRefreshSec(v int32) {
	o.RefreshSec = &v
}

// GetRetrySec returns the RetrySec field value if set, zero value otherwise.
func (o *PostDomainRequest) GetRetrySec() int32 {
	if o == nil || IsNil(o.RetrySec) {
		var ret int32
		return ret
	}
	return *o.RetrySec
}

// GetRetrySecOk returns a tuple with the RetrySec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostDomainRequest) GetRetrySecOk() (*int32, bool) {
	if o == nil || IsNil(o.RetrySec) {
		return nil, false
	}
	return o.RetrySec, true
}

// HasRetrySec returns a boolean if a field has been set.
func (o *PostDomainRequest) HasRetrySec() bool {
	if o != nil && !IsNil(o.RetrySec) {
		return true
	}

	return false
}

// SetRetrySec gets a reference to the given int32 and assigns it to the RetrySec field.
func (o *PostDomainRequest) SetRetrySec(v int32) {
	o.RetrySec = &v
}

// GetSoaEmail returns the SoaEmail field value if set, zero value otherwise.
func (o *PostDomainRequest) GetSoaEmail() string {
	if o == nil || IsNil(o.SoaEmail) {
		var ret string
		return ret
	}
	return *o.SoaEmail
}

// GetSoaEmailOk returns a tuple with the SoaEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostDomainRequest) GetSoaEmailOk() (*string, bool) {
	if o == nil || IsNil(o.SoaEmail) {
		return nil, false
	}
	return o.SoaEmail, true
}

// HasSoaEmail returns a boolean if a field has been set.
func (o *PostDomainRequest) HasSoaEmail() bool {
	if o != nil && !IsNil(o.SoaEmail) {
		return true
	}

	return false
}

// SetSoaEmail gets a reference to the given string and assigns it to the SoaEmail field.
func (o *PostDomainRequest) SetSoaEmail(v string) {
	o.SoaEmail = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *PostDomainRequest) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostDomainRequest) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *PostDomainRequest) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *PostDomainRequest) SetStatus(v string) {
	o.Status = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *PostDomainRequest) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostDomainRequest) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *PostDomainRequest) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *PostDomainRequest) SetTags(v []string) {
	o.Tags = v
}

// GetTtlSec returns the TtlSec field value if set, zero value otherwise.
func (o *PostDomainRequest) GetTtlSec() int32 {
	if o == nil || IsNil(o.TtlSec) {
		var ret int32
		return ret
	}
	return *o.TtlSec
}

// GetTtlSecOk returns a tuple with the TtlSec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostDomainRequest) GetTtlSecOk() (*int32, bool) {
	if o == nil || IsNil(o.TtlSec) {
		return nil, false
	}
	return o.TtlSec, true
}

// HasTtlSec returns a boolean if a field has been set.
func (o *PostDomainRequest) HasTtlSec() bool {
	if o != nil && !IsNil(o.TtlSec) {
		return true
	}

	return false
}

// SetTtlSec gets a reference to the given int32 and assigns it to the TtlSec field.
func (o *PostDomainRequest) SetTtlSec(v int32) {
	o.TtlSec = &v
}

// GetType returns the Type field value
func (o *PostDomainRequest) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *PostDomainRequest) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *PostDomainRequest) SetType(v string) {
	o.Type = v
}

func (o PostDomainRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostDomainRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AxfrIps) {
		toSerialize["axfr_ips"] = o.AxfrIps
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["domain"] = o.Domain
	if !IsNil(o.ExpireSec) {
		toSerialize["expire_sec"] = o.ExpireSec
	}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.MasterIps) {
		toSerialize["master_ips"] = o.MasterIps
	}
	if !IsNil(o.RefreshSec) {
		toSerialize["refresh_sec"] = o.RefreshSec
	}
	if !IsNil(o.RetrySec) {
		toSerialize["retry_sec"] = o.RetrySec
	}
	if !IsNil(o.SoaEmail) {
		toSerialize["soa_email"] = o.SoaEmail
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.TtlSec) {
		toSerialize["ttl_sec"] = o.TtlSec
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *PostDomainRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"domain",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPostDomainRequest := _PostDomainRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPostDomainRequest)

	if err != nil {
		return err
	}

	*o = PostDomainRequest(varPostDomainRequest)

	return err
}

type NullablePostDomainRequest struct {
	value *PostDomainRequest
	isSet bool
}

func (v NullablePostDomainRequest) Get() *PostDomainRequest {
	return v.value
}

func (v *NullablePostDomainRequest) Set(val *PostDomainRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePostDomainRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePostDomainRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostDomainRequest(val *PostDomainRequest) *NullablePostDomainRequest {
	return &NullablePostDomainRequest{value: val, isSet: true}
}

func (v NullablePostDomainRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostDomainRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


