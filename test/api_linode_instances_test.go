/*
Linode API

Testing LinodeInstancesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_LinodeInstancesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test LinodeInstancesAPIService DeleteDisk", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var linodeId int32
		var diskId int32

		resp, httpRes, err := apiClient.LinodeInstancesAPI.DeleteDisk(context.Background(), apiVersion, linodeId, diskId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinodeInstancesAPIService DeleteLinodeConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var linodeId int32
		var configId int32

		resp, httpRes, err := apiClient.LinodeInstancesAPI.DeleteLinodeConfig(context.Background(), apiVersion, linodeId, configId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinodeInstancesAPIService DeleteLinodeConfigInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var linodeId int32
		var configId int32
		var interfaceId int32

		resp, httpRes, err := apiClient.LinodeInstancesAPI.DeleteLinodeConfigInterface(context.Background(), apiVersion, linodeId, configId, interfaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinodeInstancesAPIService DeleteLinodeInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var linodeId int32

		resp, httpRes, err := apiClient.LinodeInstancesAPI.DeleteLinodeInstance(context.Background(), apiVersion, linodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinodeInstancesAPIService DeleteLinodeIp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var linodeId int32
		var address string

		resp, httpRes, err := apiClient.LinodeInstancesAPI.DeleteLinodeIp(context.Background(), apiVersion, linodeId, address).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinodeInstancesAPIService GetBackup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var linodeId int32
		var backupId int32

		resp, httpRes, err := apiClient.LinodeInstancesAPI.GetBackup(context.Background(), apiVersion, linodeId, backupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinodeInstancesAPIService GetBackups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var linodeId int32

		resp, httpRes, err := apiClient.LinodeInstancesAPI.GetBackups(context.Background(), apiVersion, linodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinodeInstancesAPIService GetKernel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var kernelId string

		resp, httpRes, err := apiClient.LinodeInstancesAPI.GetKernel(context.Background(), apiVersion, kernelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinodeInstancesAPIService GetKernels", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string

		resp, httpRes, err := apiClient.LinodeInstancesAPI.GetKernels(context.Background(), apiVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinodeInstancesAPIService GetLinodeConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var linodeId int32
		var configId int32

		resp, httpRes, err := apiClient.LinodeInstancesAPI.GetLinodeConfig(context.Background(), apiVersion, linodeId, configId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinodeInstancesAPIService GetLinodeConfigInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var linodeId int32
		var configId int32
		var interfaceId int32

		resp, httpRes, err := apiClient.LinodeInstancesAPI.GetLinodeConfigInterface(context.Background(), apiVersion, linodeId, configId, interfaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinodeInstancesAPIService GetLinodeConfigInterfaces", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var linodeId int32
		var configId int32

		resp, httpRes, err := apiClient.LinodeInstancesAPI.GetLinodeConfigInterfaces(context.Background(), apiVersion, linodeId, configId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinodeInstancesAPIService GetLinodeConfigs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var linodeId int32

		resp, httpRes, err := apiClient.LinodeInstancesAPI.GetLinodeConfigs(context.Background(), apiVersion, linodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinodeInstancesAPIService GetLinodeDisk", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var linodeId int32
		var diskId int32

		resp, httpRes, err := apiClient.LinodeInstancesAPI.GetLinodeDisk(context.Background(), apiVersion, linodeId, diskId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinodeInstancesAPIService GetLinodeDisks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var linodeId int32

		resp, httpRes, err := apiClient.LinodeInstancesAPI.GetLinodeDisks(context.Background(), apiVersion, linodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinodeInstancesAPIService GetLinodeFirewalls", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var linodeId int32

		resp, httpRes, err := apiClient.LinodeInstancesAPI.GetLinodeFirewalls(context.Background(), apiVersion, linodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinodeInstancesAPIService GetLinodeInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var linodeId int32

		resp, httpRes, err := apiClient.LinodeInstancesAPI.GetLinodeInstance(context.Background(), apiVersion, linodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinodeInstancesAPIService GetLinodeInstances", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string

		resp, httpRes, err := apiClient.LinodeInstancesAPI.GetLinodeInstances(context.Background(), apiVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinodeInstancesAPIService GetLinodeIp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var linodeId int32
		var address string

		resp, httpRes, err := apiClient.LinodeInstancesAPI.GetLinodeIp(context.Background(), apiVersion, linodeId, address).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinodeInstancesAPIService GetLinodeIps", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var linodeId int32

		resp, httpRes, err := apiClient.LinodeInstancesAPI.GetLinodeIps(context.Background(), apiVersion, linodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinodeInstancesAPIService GetLinodeNodeBalancers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var linodeId int32

		resp, httpRes, err := apiClient.LinodeInstancesAPI.GetLinodeNodeBalancers(context.Background(), apiVersion, linodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinodeInstancesAPIService GetLinodeStats", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var linodeId int32

		resp, httpRes, err := apiClient.LinodeInstancesAPI.GetLinodeStats(context.Background(), apiVersion, linodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinodeInstancesAPIService GetLinodeStatsByYearMonth", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var linodeId int32
		var year int32
		var month int32

		resp, httpRes, err := apiClient.LinodeInstancesAPI.GetLinodeStatsByYearMonth(context.Background(), apiVersion, linodeId, year, month).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinodeInstancesAPIService GetLinodeTransfer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var linodeId int32

		resp, httpRes, err := apiClient.LinodeInstancesAPI.GetLinodeTransfer(context.Background(), apiVersion, linodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinodeInstancesAPIService GetLinodeTransferByYearMonth", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var linodeId int32
		var year int32
		var month int32

		resp, httpRes, err := apiClient.LinodeInstancesAPI.GetLinodeTransferByYearMonth(context.Background(), apiVersion, linodeId, year, month).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinodeInstancesAPIService GetLinodeType", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var typeId string

		resp, httpRes, err := apiClient.LinodeInstancesAPI.GetLinodeType(context.Background(), apiVersion, typeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinodeInstancesAPIService GetLinodeTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string

		resp, httpRes, err := apiClient.LinodeInstancesAPI.GetLinodeTypes(context.Background(), apiVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinodeInstancesAPIService GetLinodeVolumes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var linodeId int32

		resp, httpRes, err := apiClient.LinodeInstancesAPI.GetLinodeVolumes(context.Background(), apiVersion, linodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinodeInstancesAPIService PostAddLinodeConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var linodeId int32

		resp, httpRes, err := apiClient.LinodeInstancesAPI.PostAddLinodeConfig(context.Background(), apiVersion, linodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinodeInstancesAPIService PostAddLinodeDisk", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var linodeId int32

		resp, httpRes, err := apiClient.LinodeInstancesAPI.PostAddLinodeDisk(context.Background(), apiVersion, linodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinodeInstancesAPIService PostAddLinodeIp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var linodeId int32

		resp, httpRes, err := apiClient.LinodeInstancesAPI.PostAddLinodeIp(context.Background(), apiVersion, linodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinodeInstancesAPIService PostApplyFirewalls", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var linodeId int32

		resp, httpRes, err := apiClient.LinodeInstancesAPI.PostApplyFirewalls(context.Background(), apiVersion, linodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinodeInstancesAPIService PostBootLinodeInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var linodeId int32

		resp, httpRes, err := apiClient.LinodeInstancesAPI.PostBootLinodeInstance(context.Background(), apiVersion, linodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinodeInstancesAPIService PostCancelBackups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var linodeId int32

		resp, httpRes, err := apiClient.LinodeInstancesAPI.PostCancelBackups(context.Background(), apiVersion, linodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinodeInstancesAPIService PostCloneLinodeDisk", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var linodeId int32
		var diskId int32

		resp, httpRes, err := apiClient.LinodeInstancesAPI.PostCloneLinodeDisk(context.Background(), apiVersion, linodeId, diskId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinodeInstancesAPIService PostCloneLinodeInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var linodeId int32

		resp, httpRes, err := apiClient.LinodeInstancesAPI.PostCloneLinodeInstance(context.Background(), apiVersion, linodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinodeInstancesAPIService PostEnableBackups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var linodeId int32

		resp, httpRes, err := apiClient.LinodeInstancesAPI.PostEnableBackups(context.Background(), apiVersion, linodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinodeInstancesAPIService PostLinodeConfigInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var linodeId int32
		var configId int32

		resp, httpRes, err := apiClient.LinodeInstancesAPI.PostLinodeConfigInterface(context.Background(), apiVersion, linodeId, configId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinodeInstancesAPIService PostLinodeConfigInterfaces", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var linodeId int32
		var configId int32

		resp, httpRes, err := apiClient.LinodeInstancesAPI.PostLinodeConfigInterfaces(context.Background(), apiVersion, linodeId, configId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinodeInstancesAPIService PostLinodeInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string

		resp, httpRes, err := apiClient.LinodeInstancesAPI.PostLinodeInstance(context.Background(), apiVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinodeInstancesAPIService PostMigrateLinodeInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var linodeId int32

		resp, httpRes, err := apiClient.LinodeInstancesAPI.PostMigrateLinodeInstance(context.Background(), apiVersion, linodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinodeInstancesAPIService PostMutateLinodeInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var linodeId int32

		resp, httpRes, err := apiClient.LinodeInstancesAPI.PostMutateLinodeInstance(context.Background(), apiVersion, linodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinodeInstancesAPIService PostRebootLinodeInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var linodeId int32

		resp, httpRes, err := apiClient.LinodeInstancesAPI.PostRebootLinodeInstance(context.Background(), apiVersion, linodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinodeInstancesAPIService PostRebuildLinodeInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var linodeId int32

		resp, httpRes, err := apiClient.LinodeInstancesAPI.PostRebuildLinodeInstance(context.Background(), apiVersion, linodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinodeInstancesAPIService PostRescueLinodeInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var linodeId int32

		resp, httpRes, err := apiClient.LinodeInstancesAPI.PostRescueLinodeInstance(context.Background(), apiVersion, linodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinodeInstancesAPIService PostResetDiskPassword", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var linodeId int32
		var diskId int32

		resp, httpRes, err := apiClient.LinodeInstancesAPI.PostResetDiskPassword(context.Background(), apiVersion, linodeId, diskId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinodeInstancesAPIService PostResetLinodePassword", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var linodeId int32

		resp, httpRes, err := apiClient.LinodeInstancesAPI.PostResetLinodePassword(context.Background(), apiVersion, linodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinodeInstancesAPIService PostResizeDisk", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var linodeId int32
		var diskId int32

		resp, httpRes, err := apiClient.LinodeInstancesAPI.PostResizeDisk(context.Background(), apiVersion, linodeId, diskId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinodeInstancesAPIService PostResizeLinodeInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var linodeId int32

		resp, httpRes, err := apiClient.LinodeInstancesAPI.PostResizeLinodeInstance(context.Background(), apiVersion, linodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinodeInstancesAPIService PostRestoreBackup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var linodeId int32
		var backupId int32

		resp, httpRes, err := apiClient.LinodeInstancesAPI.PostRestoreBackup(context.Background(), apiVersion, linodeId, backupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinodeInstancesAPIService PostShutdownLinodeInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var linodeId int32

		resp, httpRes, err := apiClient.LinodeInstancesAPI.PostShutdownLinodeInstance(context.Background(), apiVersion, linodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinodeInstancesAPIService PostSnapshot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var linodeId int32

		resp, httpRes, err := apiClient.LinodeInstancesAPI.PostSnapshot(context.Background(), apiVersion, linodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinodeInstancesAPIService PutDisk", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var linodeId int32
		var diskId int32

		resp, httpRes, err := apiClient.LinodeInstancesAPI.PutDisk(context.Background(), apiVersion, linodeId, diskId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinodeInstancesAPIService PutLinodeConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var linodeId int32
		var configId int32

		resp, httpRes, err := apiClient.LinodeInstancesAPI.PutLinodeConfig(context.Background(), apiVersion, linodeId, configId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinodeInstancesAPIService PutLinodeConfigInterface", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var linodeId int32
		var configId int32
		var interfaceId int32

		resp, httpRes, err := apiClient.LinodeInstancesAPI.PutLinodeConfigInterface(context.Background(), apiVersion, linodeId, configId, interfaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinodeInstancesAPIService PutLinodeInstance", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var linodeId int32

		resp, httpRes, err := apiClient.LinodeInstancesAPI.PutLinodeInstance(context.Background(), apiVersion, linodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LinodeInstancesAPIService PutLinodeIp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var linodeId int32
		var address string

		resp, httpRes, err := apiClient.LinodeInstancesAPI.PutLinodeIp(context.Background(), apiVersion, linodeId, address).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
