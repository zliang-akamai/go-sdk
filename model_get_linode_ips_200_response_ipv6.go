/*
Linode API

[Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

API version: 4.189.2
Contact: support@linode.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GetLinodeIps200ResponseIpv6 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetLinodeIps200ResponseIpv6{}

// GetLinodeIps200ResponseIpv6 Information about this Linode's IPv6 addresses.
type GetLinodeIps200ResponseIpv6 struct {
	// A list of IPv6 range objects assigned to this Linode.
	Global []GetLinodeIps200ResponseIpv6GlobalInner `json:"global,omitempty"`
	LinkLocal *GetLinodeIps200ResponseIpv6LinkLocal `json:"link_local,omitempty"`
	Slaac *GetLinodeIps200ResponseIpv6Slaac `json:"slaac,omitempty"`
}

// NewGetLinodeIps200ResponseIpv6 instantiates a new GetLinodeIps200ResponseIpv6 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetLinodeIps200ResponseIpv6() *GetLinodeIps200ResponseIpv6 {
	this := GetLinodeIps200ResponseIpv6{}
	return &this
}

// NewGetLinodeIps200ResponseIpv6WithDefaults instantiates a new GetLinodeIps200ResponseIpv6 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetLinodeIps200ResponseIpv6WithDefaults() *GetLinodeIps200ResponseIpv6 {
	this := GetLinodeIps200ResponseIpv6{}
	return &this
}

// GetGlobal returns the Global field value if set, zero value otherwise.
func (o *GetLinodeIps200ResponseIpv6) GetGlobal() []GetLinodeIps200ResponseIpv6GlobalInner {
	if o == nil || IsNil(o.Global) {
		var ret []GetLinodeIps200ResponseIpv6GlobalInner
		return ret
	}
	return o.Global
}

// GetGlobalOk returns a tuple with the Global field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLinodeIps200ResponseIpv6) GetGlobalOk() ([]GetLinodeIps200ResponseIpv6GlobalInner, bool) {
	if o == nil || IsNil(o.Global) {
		return nil, false
	}
	return o.Global, true
}

// HasGlobal returns a boolean if a field has been set.
func (o *GetLinodeIps200ResponseIpv6) HasGlobal() bool {
	if o != nil && !IsNil(o.Global) {
		return true
	}

	return false
}

// SetGlobal gets a reference to the given []GetLinodeIps200ResponseIpv6GlobalInner and assigns it to the Global field.
func (o *GetLinodeIps200ResponseIpv6) SetGlobal(v []GetLinodeIps200ResponseIpv6GlobalInner) {
	o.Global = v
}

// GetLinkLocal returns the LinkLocal field value if set, zero value otherwise.
func (o *GetLinodeIps200ResponseIpv6) GetLinkLocal() GetLinodeIps200ResponseIpv6LinkLocal {
	if o == nil || IsNil(o.LinkLocal) {
		var ret GetLinodeIps200ResponseIpv6LinkLocal
		return ret
	}
	return *o.LinkLocal
}

// GetLinkLocalOk returns a tuple with the LinkLocal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLinodeIps200ResponseIpv6) GetLinkLocalOk() (*GetLinodeIps200ResponseIpv6LinkLocal, bool) {
	if o == nil || IsNil(o.LinkLocal) {
		return nil, false
	}
	return o.LinkLocal, true
}

// HasLinkLocal returns a boolean if a field has been set.
func (o *GetLinodeIps200ResponseIpv6) HasLinkLocal() bool {
	if o != nil && !IsNil(o.LinkLocal) {
		return true
	}

	return false
}

// SetLinkLocal gets a reference to the given GetLinodeIps200ResponseIpv6LinkLocal and assigns it to the LinkLocal field.
func (o *GetLinodeIps200ResponseIpv6) SetLinkLocal(v GetLinodeIps200ResponseIpv6LinkLocal) {
	o.LinkLocal = &v
}

// GetSlaac returns the Slaac field value if set, zero value otherwise.
func (o *GetLinodeIps200ResponseIpv6) GetSlaac() GetLinodeIps200ResponseIpv6Slaac {
	if o == nil || IsNil(o.Slaac) {
		var ret GetLinodeIps200ResponseIpv6Slaac
		return ret
	}
	return *o.Slaac
}

// GetSlaacOk returns a tuple with the Slaac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLinodeIps200ResponseIpv6) GetSlaacOk() (*GetLinodeIps200ResponseIpv6Slaac, bool) {
	if o == nil || IsNil(o.Slaac) {
		return nil, false
	}
	return o.Slaac, true
}

// HasSlaac returns a boolean if a field has been set.
func (o *GetLinodeIps200ResponseIpv6) HasSlaac() bool {
	if o != nil && !IsNil(o.Slaac) {
		return true
	}

	return false
}

// SetSlaac gets a reference to the given GetLinodeIps200ResponseIpv6Slaac and assigns it to the Slaac field.
func (o *GetLinodeIps200ResponseIpv6) SetSlaac(v GetLinodeIps200ResponseIpv6Slaac) {
	o.Slaac = &v
}

func (o GetLinodeIps200ResponseIpv6) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetLinodeIps200ResponseIpv6) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Global) {
		toSerialize["global"] = o.Global
	}
	if !IsNil(o.LinkLocal) {
		toSerialize["link_local"] = o.LinkLocal
	}
	if !IsNil(o.Slaac) {
		toSerialize["slaac"] = o.Slaac
	}
	return toSerialize, nil
}

type NullableGetLinodeIps200ResponseIpv6 struct {
	value *GetLinodeIps200ResponseIpv6
	isSet bool
}

func (v NullableGetLinodeIps200ResponseIpv6) Get() *GetLinodeIps200ResponseIpv6 {
	return v.value
}

func (v *NullableGetLinodeIps200ResponseIpv6) Set(val *GetLinodeIps200ResponseIpv6) {
	v.value = val
	v.isSet = true
}

func (v NullableGetLinodeIps200ResponseIpv6) IsSet() bool {
	return v.isSet
}

func (v *NullableGetLinodeIps200ResponseIpv6) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetLinodeIps200ResponseIpv6(val *GetLinodeIps200ResponseIpv6) *NullableGetLinodeIps200ResponseIpv6 {
	return &NullableGetLinodeIps200ResponseIpv6{value: val, isSet: true}
}

func (v NullableGetLinodeIps200ResponseIpv6) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetLinodeIps200ResponseIpv6) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


