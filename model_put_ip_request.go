/*
Linode API

[Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

API version: 4.189.2
Contact: support@linode.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PutIpRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PutIpRequest{}

// PutIpRequest struct for PutIpRequest
type PutIpRequest struct {
	// The reverse DNS assigned to this address. For public IPv4 addresses, this will be set to a default value provided by Linode if not explicitly set.
	Rdns NullableString `json:"rdns"`
}

type _PutIpRequest PutIpRequest

// NewPutIpRequest instantiates a new PutIpRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPutIpRequest(rdns NullableString) *PutIpRequest {
	this := PutIpRequest{}
	this.Rdns = rdns
	return &this
}

// NewPutIpRequestWithDefaults instantiates a new PutIpRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPutIpRequestWithDefaults() *PutIpRequest {
	this := PutIpRequest{}
	return &this
}

// GetRdns returns the Rdns field value
// If the value is explicit nil, the zero value for string will be returned
func (o *PutIpRequest) GetRdns() string {
	if o == nil || o.Rdns.Get() == nil {
		var ret string
		return ret
	}

	return *o.Rdns.Get()
}

// GetRdnsOk returns a tuple with the Rdns field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PutIpRequest) GetRdnsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rdns.Get(), o.Rdns.IsSet()
}

// SetRdns sets field value
func (o *PutIpRequest) SetRdns(v string) {
	o.Rdns.Set(&v)
}

func (o PutIpRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PutIpRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["rdns"] = o.Rdns.Get()
	return toSerialize, nil
}

func (o *PutIpRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"rdns",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPutIpRequest := _PutIpRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPutIpRequest)

	if err != nil {
		return err
	}

	*o = PutIpRequest(varPutIpRequest)

	return err
}

type NullablePutIpRequest struct {
	value *PutIpRequest
	isSet bool
}

func (v NullablePutIpRequest) Get() *PutIpRequest {
	return v.value
}

func (v *NullablePutIpRequest) Set(val *PutIpRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePutIpRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePutIpRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePutIpRequest(val *PutIpRequest) *NullablePutIpRequest {
	return &NullablePutIpRequest{value: val, isSet: true}
}

func (v NullablePutIpRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePutIpRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


