/*
Linode API

[Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

API version: 4.189.2
Contact: support@linode.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PostNodeBalancerNodeRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostNodeBalancerNodeRequest{}

// PostNodeBalancerNodeRequest struct for PostNodeBalancerNodeRequest
type PostNodeBalancerNodeRequest struct {
	// The private IP Address where this backend can be reached. This _must_ be a private IP address.
	Address string `json:"address"`
	// The NodeBalancer Config ID that this Node belongs to.
	ConfigId *int32 `json:"config_id,omitempty"`
	// This node's unique ID.
	Id *int32 `json:"id,omitempty"`
	// The label for this node.  This is for display purposes only.
	Label string `json:"label" validate:"regexp=[a-zA-Z0-9-_.]{3,32}"`
	// The mode this NodeBalancer should use when sending traffic to this backend.  - If set to `accept` this backend is accepting traffic. - If set to `reject` this backend will not receive traffic. - If set to `drain` this backend will not receive _new_ traffic, but connections already pinned to it will continue to be routed to it. - If set to `backup`, this backend will only receive traffic if all `accept` nodes are down.
	Mode *string `json:"mode,omitempty"`
	// The NodeBalancer ID that this Node belongs to.
	NodebalancerId *int32 `json:"nodebalancer_id,omitempty"`
	// The current status of this node, based on the configured checks of its NodeBalancer Config.
	Status *string `json:"status,omitempty"`
	// Used when picking a backend to serve a request and is not pinned to a single backend yet.  Nodes with a higher weight will receive more traffic.
	Weight *int32 `json:"weight,omitempty"`
}

type _PostNodeBalancerNodeRequest PostNodeBalancerNodeRequest

// NewPostNodeBalancerNodeRequest instantiates a new PostNodeBalancerNodeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostNodeBalancerNodeRequest(address string, label string) *PostNodeBalancerNodeRequest {
	this := PostNodeBalancerNodeRequest{}
	this.Address = address
	this.Label = label
	return &this
}

// NewPostNodeBalancerNodeRequestWithDefaults instantiates a new PostNodeBalancerNodeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostNodeBalancerNodeRequestWithDefaults() *PostNodeBalancerNodeRequest {
	this := PostNodeBalancerNodeRequest{}
	return &this
}

// GetAddress returns the Address field value
func (o *PostNodeBalancerNodeRequest) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *PostNodeBalancerNodeRequest) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *PostNodeBalancerNodeRequest) SetAddress(v string) {
	o.Address = v
}

// GetConfigId returns the ConfigId field value if set, zero value otherwise.
func (o *PostNodeBalancerNodeRequest) GetConfigId() int32 {
	if o == nil || IsNil(o.ConfigId) {
		var ret int32
		return ret
	}
	return *o.ConfigId
}

// GetConfigIdOk returns a tuple with the ConfigId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostNodeBalancerNodeRequest) GetConfigIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ConfigId) {
		return nil, false
	}
	return o.ConfigId, true
}

// HasConfigId returns a boolean if a field has been set.
func (o *PostNodeBalancerNodeRequest) HasConfigId() bool {
	if o != nil && !IsNil(o.ConfigId) {
		return true
	}

	return false
}

// SetConfigId gets a reference to the given int32 and assigns it to the ConfigId field.
func (o *PostNodeBalancerNodeRequest) SetConfigId(v int32) {
	o.ConfigId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PostNodeBalancerNodeRequest) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostNodeBalancerNodeRequest) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PostNodeBalancerNodeRequest) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *PostNodeBalancerNodeRequest) SetId(v int32) {
	o.Id = &v
}

// GetLabel returns the Label field value
func (o *PostNodeBalancerNodeRequest) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *PostNodeBalancerNodeRequest) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *PostNodeBalancerNodeRequest) SetLabel(v string) {
	o.Label = v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *PostNodeBalancerNodeRequest) GetMode() string {
	if o == nil || IsNil(o.Mode) {
		var ret string
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostNodeBalancerNodeRequest) GetModeOk() (*string, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *PostNodeBalancerNodeRequest) HasMode() bool {
	if o != nil && !IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given string and assigns it to the Mode field.
func (o *PostNodeBalancerNodeRequest) SetMode(v string) {
	o.Mode = &v
}

// GetNodebalancerId returns the NodebalancerId field value if set, zero value otherwise.
func (o *PostNodeBalancerNodeRequest) GetNodebalancerId() int32 {
	if o == nil || IsNil(o.NodebalancerId) {
		var ret int32
		return ret
	}
	return *o.NodebalancerId
}

// GetNodebalancerIdOk returns a tuple with the NodebalancerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostNodeBalancerNodeRequest) GetNodebalancerIdOk() (*int32, bool) {
	if o == nil || IsNil(o.NodebalancerId) {
		return nil, false
	}
	return o.NodebalancerId, true
}

// HasNodebalancerId returns a boolean if a field has been set.
func (o *PostNodeBalancerNodeRequest) HasNodebalancerId() bool {
	if o != nil && !IsNil(o.NodebalancerId) {
		return true
	}

	return false
}

// SetNodebalancerId gets a reference to the given int32 and assigns it to the NodebalancerId field.
func (o *PostNodeBalancerNodeRequest) SetNodebalancerId(v int32) {
	o.NodebalancerId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *PostNodeBalancerNodeRequest) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostNodeBalancerNodeRequest) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *PostNodeBalancerNodeRequest) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *PostNodeBalancerNodeRequest) SetStatus(v string) {
	o.Status = &v
}

// GetWeight returns the Weight field value if set, zero value otherwise.
func (o *PostNodeBalancerNodeRequest) GetWeight() int32 {
	if o == nil || IsNil(o.Weight) {
		var ret int32
		return ret
	}
	return *o.Weight
}

// GetWeightOk returns a tuple with the Weight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostNodeBalancerNodeRequest) GetWeightOk() (*int32, bool) {
	if o == nil || IsNil(o.Weight) {
		return nil, false
	}
	return o.Weight, true
}

// HasWeight returns a boolean if a field has been set.
func (o *PostNodeBalancerNodeRequest) HasWeight() bool {
	if o != nil && !IsNil(o.Weight) {
		return true
	}

	return false
}

// SetWeight gets a reference to the given int32 and assigns it to the Weight field.
func (o *PostNodeBalancerNodeRequest) SetWeight(v int32) {
	o.Weight = &v
}

func (o PostNodeBalancerNodeRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostNodeBalancerNodeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["address"] = o.Address
	if !IsNil(o.ConfigId) {
		toSerialize["config_id"] = o.ConfigId
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["label"] = o.Label
	if !IsNil(o.Mode) {
		toSerialize["mode"] = o.Mode
	}
	if !IsNil(o.NodebalancerId) {
		toSerialize["nodebalancer_id"] = o.NodebalancerId
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Weight) {
		toSerialize["weight"] = o.Weight
	}
	return toSerialize, nil
}

func (o *PostNodeBalancerNodeRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"address",
		"label",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPostNodeBalancerNodeRequest := _PostNodeBalancerNodeRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPostNodeBalancerNodeRequest)

	if err != nil {
		return err
	}

	*o = PostNodeBalancerNodeRequest(varPostNodeBalancerNodeRequest)

	return err
}

type NullablePostNodeBalancerNodeRequest struct {
	value *PostNodeBalancerNodeRequest
	isSet bool
}

func (v NullablePostNodeBalancerNodeRequest) Get() *PostNodeBalancerNodeRequest {
	return v.value
}

func (v *NullablePostNodeBalancerNodeRequest) Set(val *PostNodeBalancerNodeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePostNodeBalancerNodeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePostNodeBalancerNodeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostNodeBalancerNodeRequest(val *PostNodeBalancerNodeRequest) *NullablePostNodeBalancerNodeRequest {
	return &NullablePostNodeBalancerNodeRequest{value: val, isSet: true}
}

func (v NullablePostNodeBalancerNodeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostNodeBalancerNodeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


