/*
Linode API

[Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

API version: 4.189.2
Contact: support@linode.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PostRebuildLinodeInstanceRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostRebuildLinodeInstanceRequest{}

// PostRebuildLinodeInstanceRequest struct for PostRebuildLinodeInstanceRequest
type PostRebuildLinodeInstanceRequest struct {
	// A list of public SSH keys that will be automatically appended to the root user's `~/.ssh/authorized_keys` file when deploying from an Image.
	AuthorizedKeys []string `json:"authorized_keys,omitempty"`
	// A list of usernames. If the usernames have associated SSH keys, the keys will be appended to the root users `~/.ssh/authorized_keys` file automatically when deploying from an Image.
	AuthorizedUsers []string `json:"authorized_users,omitempty"`
	// This field defaults to `true` if the Linode is created with an Image or from a Backup. If it is deployed from an Image or a Backup and you wish it to remain `offline` after deployment, set this to `false`.
	Booted *bool `json:"booted,omitempty"`
	// Local disk encryption ensures that your data stored on Linodes is secured. Disk encryption protects against unauthorized data access by keeping the data encrypted if the disk is ever removed from the data center, decommissioned, or disposed of. The platform manages the encryption and decryption for you.  By default, encryption is `enabled` on all Linodes. If you opted out of encryption or if the Linode was created prior to local disk encryption support, you can encrypt your data using [Rebuild](https://techdocs.akamai.com/linode-api/reference/post-rebuild-linode-instance).
	DiskEncryption *string `json:"disk_encryption,omitempty"`
	// An Image ID to deploy the Linode Disk from.  Run the [List images](https://techdocs.akamai.com/linode-api/reference/get-images) operation with authentication to view all available Images. Official Linode Images start with `linode/`, while your Account's Images start with `private/`. Creating a disk from a Private Image requires `read_only` or `read_write` permissions for that Image. Run the [Update a user's grants](https://techdocs.akamai.com/linode-api/reference/put-user-grants) operation to adjust permissions for an Account Image.
	Image string `json:"image"`
	Metadata *PostLinodeInstanceRequestAllOfMetadata `json:"metadata,omitempty"`
	// This sets the root user's password on a newly created Linode Disk when deploying from an Image.  - __Required__ when creating a Linode Disk from an Image, including when using a StackScript.  - Must meet a password strength score requirement that is calculated internally by the API. If the strength requirement is not met, you will receive a `Password does not meet strength requirement` error.
	RootPass string `json:"root_pass"`
	// This field is required only if the StackScript being deployed requires input data from the User for successful completion. See [User Defined Fields (UDFs)](https://www.linode.com/docs/products/tools/stackscripts/guides/write-a-custom-script/#declare-user-defined-fields-udfs) for more details.  This field is required to be valid JSON.  Total length cannot exceed 65,535 characters.
	StackscriptData map[string]interface{} `json:"stackscript_data,omitempty"`
	// A StackScript ID that will cause the referenced StackScript to be run during deployment of this Linode. A compatible `image` is required to use a StackScript. To get a list of available StackScript and their permitted Images, run [List StackScripts](https://techdocs.akamai.com/linode-api/reference/get-stack-scripts). This field cannot be used when deploying from a Backup or a Private Image.
	StackscriptId *int32 `json:"stackscript_id,omitempty"`
	// The ID of the [Linode type](https://techdocs.akamai.com/linode-api/reference/get-linode-types) to resize to with this request.
	Type *string `json:"type,omitempty"`
}

type _PostRebuildLinodeInstanceRequest PostRebuildLinodeInstanceRequest

// NewPostRebuildLinodeInstanceRequest instantiates a new PostRebuildLinodeInstanceRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostRebuildLinodeInstanceRequest(image string, rootPass string) *PostRebuildLinodeInstanceRequest {
	this := PostRebuildLinodeInstanceRequest{}
	var booted bool = true
	this.Booted = &booted
	this.Image = image
	this.RootPass = rootPass
	return &this
}

// NewPostRebuildLinodeInstanceRequestWithDefaults instantiates a new PostRebuildLinodeInstanceRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostRebuildLinodeInstanceRequestWithDefaults() *PostRebuildLinodeInstanceRequest {
	this := PostRebuildLinodeInstanceRequest{}
	var booted bool = true
	this.Booted = &booted
	return &this
}

// GetAuthorizedKeys returns the AuthorizedKeys field value if set, zero value otherwise.
func (o *PostRebuildLinodeInstanceRequest) GetAuthorizedKeys() []string {
	if o == nil || IsNil(o.AuthorizedKeys) {
		var ret []string
		return ret
	}
	return o.AuthorizedKeys
}

// GetAuthorizedKeysOk returns a tuple with the AuthorizedKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostRebuildLinodeInstanceRequest) GetAuthorizedKeysOk() ([]string, bool) {
	if o == nil || IsNil(o.AuthorizedKeys) {
		return nil, false
	}
	return o.AuthorizedKeys, true
}

// HasAuthorizedKeys returns a boolean if a field has been set.
func (o *PostRebuildLinodeInstanceRequest) HasAuthorizedKeys() bool {
	if o != nil && !IsNil(o.AuthorizedKeys) {
		return true
	}

	return false
}

// SetAuthorizedKeys gets a reference to the given []string and assigns it to the AuthorizedKeys field.
func (o *PostRebuildLinodeInstanceRequest) SetAuthorizedKeys(v []string) {
	o.AuthorizedKeys = v
}

// GetAuthorizedUsers returns the AuthorizedUsers field value if set, zero value otherwise.
func (o *PostRebuildLinodeInstanceRequest) GetAuthorizedUsers() []string {
	if o == nil || IsNil(o.AuthorizedUsers) {
		var ret []string
		return ret
	}
	return o.AuthorizedUsers
}

// GetAuthorizedUsersOk returns a tuple with the AuthorizedUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostRebuildLinodeInstanceRequest) GetAuthorizedUsersOk() ([]string, bool) {
	if o == nil || IsNil(o.AuthorizedUsers) {
		return nil, false
	}
	return o.AuthorizedUsers, true
}

// HasAuthorizedUsers returns a boolean if a field has been set.
func (o *PostRebuildLinodeInstanceRequest) HasAuthorizedUsers() bool {
	if o != nil && !IsNil(o.AuthorizedUsers) {
		return true
	}

	return false
}

// SetAuthorizedUsers gets a reference to the given []string and assigns it to the AuthorizedUsers field.
func (o *PostRebuildLinodeInstanceRequest) SetAuthorizedUsers(v []string) {
	o.AuthorizedUsers = v
}

// GetBooted returns the Booted field value if set, zero value otherwise.
func (o *PostRebuildLinodeInstanceRequest) GetBooted() bool {
	if o == nil || IsNil(o.Booted) {
		var ret bool
		return ret
	}
	return *o.Booted
}

// GetBootedOk returns a tuple with the Booted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostRebuildLinodeInstanceRequest) GetBootedOk() (*bool, bool) {
	if o == nil || IsNil(o.Booted) {
		return nil, false
	}
	return o.Booted, true
}

// HasBooted returns a boolean if a field has been set.
func (o *PostRebuildLinodeInstanceRequest) HasBooted() bool {
	if o != nil && !IsNil(o.Booted) {
		return true
	}

	return false
}

// SetBooted gets a reference to the given bool and assigns it to the Booted field.
func (o *PostRebuildLinodeInstanceRequest) SetBooted(v bool) {
	o.Booted = &v
}

// GetDiskEncryption returns the DiskEncryption field value if set, zero value otherwise.
func (o *PostRebuildLinodeInstanceRequest) GetDiskEncryption() string {
	if o == nil || IsNil(o.DiskEncryption) {
		var ret string
		return ret
	}
	return *o.DiskEncryption
}

// GetDiskEncryptionOk returns a tuple with the DiskEncryption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostRebuildLinodeInstanceRequest) GetDiskEncryptionOk() (*string, bool) {
	if o == nil || IsNil(o.DiskEncryption) {
		return nil, false
	}
	return o.DiskEncryption, true
}

// HasDiskEncryption returns a boolean if a field has been set.
func (o *PostRebuildLinodeInstanceRequest) HasDiskEncryption() bool {
	if o != nil && !IsNil(o.DiskEncryption) {
		return true
	}

	return false
}

// SetDiskEncryption gets a reference to the given string and assigns it to the DiskEncryption field.
func (o *PostRebuildLinodeInstanceRequest) SetDiskEncryption(v string) {
	o.DiskEncryption = &v
}

// GetImage returns the Image field value
func (o *PostRebuildLinodeInstanceRequest) GetImage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Image
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
func (o *PostRebuildLinodeInstanceRequest) GetImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Image, true
}

// SetImage sets field value
func (o *PostRebuildLinodeInstanceRequest) SetImage(v string) {
	o.Image = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *PostRebuildLinodeInstanceRequest) GetMetadata() PostLinodeInstanceRequestAllOfMetadata {
	if o == nil || IsNil(o.Metadata) {
		var ret PostLinodeInstanceRequestAllOfMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostRebuildLinodeInstanceRequest) GetMetadataOk() (*PostLinodeInstanceRequestAllOfMetadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *PostRebuildLinodeInstanceRequest) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given PostLinodeInstanceRequestAllOfMetadata and assigns it to the Metadata field.
func (o *PostRebuildLinodeInstanceRequest) SetMetadata(v PostLinodeInstanceRequestAllOfMetadata) {
	o.Metadata = &v
}

// GetRootPass returns the RootPass field value
func (o *PostRebuildLinodeInstanceRequest) GetRootPass() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RootPass
}

// GetRootPassOk returns a tuple with the RootPass field value
// and a boolean to check if the value has been set.
func (o *PostRebuildLinodeInstanceRequest) GetRootPassOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RootPass, true
}

// SetRootPass sets field value
func (o *PostRebuildLinodeInstanceRequest) SetRootPass(v string) {
	o.RootPass = v
}

// GetStackscriptData returns the StackscriptData field value if set, zero value otherwise.
func (o *PostRebuildLinodeInstanceRequest) GetStackscriptData() map[string]interface{} {
	if o == nil || IsNil(o.StackscriptData) {
		var ret map[string]interface{}
		return ret
	}
	return o.StackscriptData
}

// GetStackscriptDataOk returns a tuple with the StackscriptData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostRebuildLinodeInstanceRequest) GetStackscriptDataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.StackscriptData) {
		return map[string]interface{}{}, false
	}
	return o.StackscriptData, true
}

// HasStackscriptData returns a boolean if a field has been set.
func (o *PostRebuildLinodeInstanceRequest) HasStackscriptData() bool {
	if o != nil && !IsNil(o.StackscriptData) {
		return true
	}

	return false
}

// SetStackscriptData gets a reference to the given map[string]interface{} and assigns it to the StackscriptData field.
func (o *PostRebuildLinodeInstanceRequest) SetStackscriptData(v map[string]interface{}) {
	o.StackscriptData = v
}

// GetStackscriptId returns the StackscriptId field value if set, zero value otherwise.
func (o *PostRebuildLinodeInstanceRequest) GetStackscriptId() int32 {
	if o == nil || IsNil(o.StackscriptId) {
		var ret int32
		return ret
	}
	return *o.StackscriptId
}

// GetStackscriptIdOk returns a tuple with the StackscriptId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostRebuildLinodeInstanceRequest) GetStackscriptIdOk() (*int32, bool) {
	if o == nil || IsNil(o.StackscriptId) {
		return nil, false
	}
	return o.StackscriptId, true
}

// HasStackscriptId returns a boolean if a field has been set.
func (o *PostRebuildLinodeInstanceRequest) HasStackscriptId() bool {
	if o != nil && !IsNil(o.StackscriptId) {
		return true
	}

	return false
}

// SetStackscriptId gets a reference to the given int32 and assigns it to the StackscriptId field.
func (o *PostRebuildLinodeInstanceRequest) SetStackscriptId(v int32) {
	o.StackscriptId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PostRebuildLinodeInstanceRequest) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostRebuildLinodeInstanceRequest) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PostRebuildLinodeInstanceRequest) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PostRebuildLinodeInstanceRequest) SetType(v string) {
	o.Type = &v
}

func (o PostRebuildLinodeInstanceRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostRebuildLinodeInstanceRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AuthorizedKeys) {
		toSerialize["authorized_keys"] = o.AuthorizedKeys
	}
	if !IsNil(o.AuthorizedUsers) {
		toSerialize["authorized_users"] = o.AuthorizedUsers
	}
	if !IsNil(o.Booted) {
		toSerialize["booted"] = o.Booted
	}
	if !IsNil(o.DiskEncryption) {
		toSerialize["disk_encryption"] = o.DiskEncryption
	}
	toSerialize["image"] = o.Image
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	toSerialize["root_pass"] = o.RootPass
	if !IsNil(o.StackscriptData) {
		toSerialize["stackscript_data"] = o.StackscriptData
	}
	if !IsNil(o.StackscriptId) {
		toSerialize["stackscript_id"] = o.StackscriptId
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

func (o *PostRebuildLinodeInstanceRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"image",
		"root_pass",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPostRebuildLinodeInstanceRequest := _PostRebuildLinodeInstanceRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPostRebuildLinodeInstanceRequest)

	if err != nil {
		return err
	}

	*o = PostRebuildLinodeInstanceRequest(varPostRebuildLinodeInstanceRequest)

	return err
}

type NullablePostRebuildLinodeInstanceRequest struct {
	value *PostRebuildLinodeInstanceRequest
	isSet bool
}

func (v NullablePostRebuildLinodeInstanceRequest) Get() *PostRebuildLinodeInstanceRequest {
	return v.value
}

func (v *NullablePostRebuildLinodeInstanceRequest) Set(val *PostRebuildLinodeInstanceRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePostRebuildLinodeInstanceRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePostRebuildLinodeInstanceRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostRebuildLinodeInstanceRequest(val *PostRebuildLinodeInstanceRequest) *NullablePostRebuildLinodeInstanceRequest {
	return &NullablePostRebuildLinodeInstanceRequest{value: val, isSet: true}
}

func (v NullablePostRebuildLinodeInstanceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostRebuildLinodeInstanceRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


