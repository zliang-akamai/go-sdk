/*
Linode API

Testing VPCsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_VPCsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test VPCsAPIService DeleteVpc", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var vpcId int32

		resp, httpRes, err := apiClient.VPCsAPI.DeleteVpc(context.Background(), apiVersion, vpcId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VPCsAPIService DeleteVpcSubnet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var vpcId int32
		var vpcSubnetId int32

		resp, httpRes, err := apiClient.VPCsAPI.DeleteVpcSubnet(context.Background(), apiVersion, vpcId, vpcSubnetId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VPCsAPIService GetVpc", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var vpcId int32

		resp, httpRes, err := apiClient.VPCsAPI.GetVpc(context.Background(), apiVersion, vpcId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VPCsAPIService GetVpcIps", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var vpcId int32

		resp, httpRes, err := apiClient.VPCsAPI.GetVpcIps(context.Background(), apiVersion, vpcId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VPCsAPIService GetVpcSubnet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var vpcId int32
		var vpcSubnetId int32

		resp, httpRes, err := apiClient.VPCsAPI.GetVpcSubnet(context.Background(), apiVersion, vpcId, vpcSubnetId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VPCsAPIService GetVpcSubnets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var vpcId int32

		resp, httpRes, err := apiClient.VPCsAPI.GetVpcSubnets(context.Background(), apiVersion, vpcId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VPCsAPIService GetVpcs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string

		resp, httpRes, err := apiClient.VPCsAPI.GetVpcs(context.Background(), apiVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VPCsAPIService GetVpcsIps", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string

		resp, httpRes, err := apiClient.VPCsAPI.GetVpcsIps(context.Background(), apiVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VPCsAPIService PostVpc", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string

		resp, httpRes, err := apiClient.VPCsAPI.PostVpc(context.Background(), apiVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VPCsAPIService PostVpcSubnet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var vpcId int32

		resp, httpRes, err := apiClient.VPCsAPI.PostVpcSubnet(context.Background(), apiVersion, vpcId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VPCsAPIService PutVpc", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var vpcId int32

		resp, httpRes, err := apiClient.VPCsAPI.PutVpc(context.Background(), apiVersion, vpcId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VPCsAPIService PutVpcSubnet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var vpcId int32
		var vpcSubnetId int32

		resp, httpRes, err := apiClient.VPCsAPI.PutVpcSubnet(context.Background(), apiVersion, vpcId, vpcSubnetId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
