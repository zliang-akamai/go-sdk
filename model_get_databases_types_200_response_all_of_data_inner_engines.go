/*
Linode API

[Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

API version: 4.189.2
Contact: support@linode.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GetDatabasesTypes200ResponseAllOfDataInnerEngines type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetDatabasesTypes200ResponseAllOfDataInnerEngines{}

// GetDatabasesTypes200ResponseAllOfDataInnerEngines struct for GetDatabasesTypes200ResponseAllOfDataInnerEngines
type GetDatabasesTypes200ResponseAllOfDataInnerEngines struct {
	// Pricing details for MySQL Managed Databases.
	Mysql []GetDatabasesTypes200ResponseAllOfDataInnerEnginesMysqlInner `json:"mysql,omitempty"`
	// Pricing details for PostgreSQL Managed Databases.
	Postgresql []GetDatabasesTypes200ResponseAllOfDataInnerEnginesMysqlInner `json:"postgresql,omitempty"`
}

// NewGetDatabasesTypes200ResponseAllOfDataInnerEngines instantiates a new GetDatabasesTypes200ResponseAllOfDataInnerEngines object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetDatabasesTypes200ResponseAllOfDataInnerEngines() *GetDatabasesTypes200ResponseAllOfDataInnerEngines {
	this := GetDatabasesTypes200ResponseAllOfDataInnerEngines{}
	return &this
}

// NewGetDatabasesTypes200ResponseAllOfDataInnerEnginesWithDefaults instantiates a new GetDatabasesTypes200ResponseAllOfDataInnerEngines object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetDatabasesTypes200ResponseAllOfDataInnerEnginesWithDefaults() *GetDatabasesTypes200ResponseAllOfDataInnerEngines {
	this := GetDatabasesTypes200ResponseAllOfDataInnerEngines{}
	return &this
}

// GetMysql returns the Mysql field value if set, zero value otherwise.
func (o *GetDatabasesTypes200ResponseAllOfDataInnerEngines) GetMysql() []GetDatabasesTypes200ResponseAllOfDataInnerEnginesMysqlInner {
	if o == nil || IsNil(o.Mysql) {
		var ret []GetDatabasesTypes200ResponseAllOfDataInnerEnginesMysqlInner
		return ret
	}
	return o.Mysql
}

// GetMysqlOk returns a tuple with the Mysql field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetDatabasesTypes200ResponseAllOfDataInnerEngines) GetMysqlOk() ([]GetDatabasesTypes200ResponseAllOfDataInnerEnginesMysqlInner, bool) {
	if o == nil || IsNil(o.Mysql) {
		return nil, false
	}
	return o.Mysql, true
}

// HasMysql returns a boolean if a field has been set.
func (o *GetDatabasesTypes200ResponseAllOfDataInnerEngines) HasMysql() bool {
	if o != nil && !IsNil(o.Mysql) {
		return true
	}

	return false
}

// SetMysql gets a reference to the given []GetDatabasesTypes200ResponseAllOfDataInnerEnginesMysqlInner and assigns it to the Mysql field.
func (o *GetDatabasesTypes200ResponseAllOfDataInnerEngines) SetMysql(v []GetDatabasesTypes200ResponseAllOfDataInnerEnginesMysqlInner) {
	o.Mysql = v
}

// GetPostgresql returns the Postgresql field value if set, zero value otherwise.
func (o *GetDatabasesTypes200ResponseAllOfDataInnerEngines) GetPostgresql() []GetDatabasesTypes200ResponseAllOfDataInnerEnginesMysqlInner {
	if o == nil || IsNil(o.Postgresql) {
		var ret []GetDatabasesTypes200ResponseAllOfDataInnerEnginesMysqlInner
		return ret
	}
	return o.Postgresql
}

// GetPostgresqlOk returns a tuple with the Postgresql field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetDatabasesTypes200ResponseAllOfDataInnerEngines) GetPostgresqlOk() ([]GetDatabasesTypes200ResponseAllOfDataInnerEnginesMysqlInner, bool) {
	if o == nil || IsNil(o.Postgresql) {
		return nil, false
	}
	return o.Postgresql, true
}

// HasPostgresql returns a boolean if a field has been set.
func (o *GetDatabasesTypes200ResponseAllOfDataInnerEngines) HasPostgresql() bool {
	if o != nil && !IsNil(o.Postgresql) {
		return true
	}

	return false
}

// SetPostgresql gets a reference to the given []GetDatabasesTypes200ResponseAllOfDataInnerEnginesMysqlInner and assigns it to the Postgresql field.
func (o *GetDatabasesTypes200ResponseAllOfDataInnerEngines) SetPostgresql(v []GetDatabasesTypes200ResponseAllOfDataInnerEnginesMysqlInner) {
	o.Postgresql = v
}

func (o GetDatabasesTypes200ResponseAllOfDataInnerEngines) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetDatabasesTypes200ResponseAllOfDataInnerEngines) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Mysql) {
		toSerialize["mysql"] = o.Mysql
	}
	if !IsNil(o.Postgresql) {
		toSerialize["postgresql"] = o.Postgresql
	}
	return toSerialize, nil
}

type NullableGetDatabasesTypes200ResponseAllOfDataInnerEngines struct {
	value *GetDatabasesTypes200ResponseAllOfDataInnerEngines
	isSet bool
}

func (v NullableGetDatabasesTypes200ResponseAllOfDataInnerEngines) Get() *GetDatabasesTypes200ResponseAllOfDataInnerEngines {
	return v.value
}

func (v *NullableGetDatabasesTypes200ResponseAllOfDataInnerEngines) Set(val *GetDatabasesTypes200ResponseAllOfDataInnerEngines) {
	v.value = val
	v.isSet = true
}

func (v NullableGetDatabasesTypes200ResponseAllOfDataInnerEngines) IsSet() bool {
	return v.isSet
}

func (v *NullableGetDatabasesTypes200ResponseAllOfDataInnerEngines) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetDatabasesTypes200ResponseAllOfDataInnerEngines(val *GetDatabasesTypes200ResponseAllOfDataInnerEngines) *NullableGetDatabasesTypes200ResponseAllOfDataInnerEngines {
	return &NullableGetDatabasesTypes200ResponseAllOfDataInnerEngines{value: val, isSet: true}
}

func (v NullableGetDatabasesTypes200ResponseAllOfDataInnerEngines) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetDatabasesTypes200ResponseAllOfDataInnerEngines) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


