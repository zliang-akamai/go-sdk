/*
Linode API

[Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

API version: 4.189.2
Contact: support@linode.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PostLkeClusterRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostLkeClusterRequest{}

// PostLkeClusterRequest struct for PostLkeClusterRequest
type PostLkeClusterRequest struct {
	ControlPlane *GetLkeClusters200ResponseDataInnerControlPlane `json:"control_plane,omitempty"`
	// The desired Kubernetes version for this Kubernetes cluster in the format of &lt;major&gt;.&lt;minor&gt;, and the latest supported patch version will be deployed.
	K8sVersion string `json:"k8s_version"`
	// This Kubernetes cluster's unique label for display purposes only. Labels have the following constraints:    - UTF-8 characters will be returned by the API using escape sequences of their Unicode code points. For example, the Japanese character _„Åã_ is 3 bytes in UTF-8 (`0xE382AB`). Its Unicode code point is 2 bytes (`0x30AB`). APIv4 supports this character and the API will return it as the escape sequence using six 1 byte characters which represent 2 bytes of Unicode code point (`\"\\u30ab\"`).    - 4 byte UTF-8 characters are not supported.    - If the label is entirely composed of UTF-8 characters, the API response will return the code points using up to 193 1 byte characters.
	Label string `json:"label"`
	NodePools []PostLkeClusterRequestNodePoolsInner `json:"node_pools"`
	// This Kubernetes cluster's location.
	Region string `json:"region"`
	// An array of tags applied to the Kubernetes cluster. Tags are for organizational purposes only.
	Tags []string `json:"tags,omitempty"`
}

type _PostLkeClusterRequest PostLkeClusterRequest

// NewPostLkeClusterRequest instantiates a new PostLkeClusterRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostLkeClusterRequest(k8sVersion string, label string, nodePools []PostLkeClusterRequestNodePoolsInner, region string) *PostLkeClusterRequest {
	this := PostLkeClusterRequest{}
	this.K8sVersion = k8sVersion
	this.Label = label
	this.NodePools = nodePools
	this.Region = region
	return &this
}

// NewPostLkeClusterRequestWithDefaults instantiates a new PostLkeClusterRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostLkeClusterRequestWithDefaults() *PostLkeClusterRequest {
	this := PostLkeClusterRequest{}
	return &this
}

// GetControlPlane returns the ControlPlane field value if set, zero value otherwise.
func (o *PostLkeClusterRequest) GetControlPlane() GetLkeClusters200ResponseDataInnerControlPlane {
	if o == nil || IsNil(o.ControlPlane) {
		var ret GetLkeClusters200ResponseDataInnerControlPlane
		return ret
	}
	return *o.ControlPlane
}

// GetControlPlaneOk returns a tuple with the ControlPlane field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostLkeClusterRequest) GetControlPlaneOk() (*GetLkeClusters200ResponseDataInnerControlPlane, bool) {
	if o == nil || IsNil(o.ControlPlane) {
		return nil, false
	}
	return o.ControlPlane, true
}

// HasControlPlane returns a boolean if a field has been set.
func (o *PostLkeClusterRequest) HasControlPlane() bool {
	if o != nil && !IsNil(o.ControlPlane) {
		return true
	}

	return false
}

// SetControlPlane gets a reference to the given GetLkeClusters200ResponseDataInnerControlPlane and assigns it to the ControlPlane field.
func (o *PostLkeClusterRequest) SetControlPlane(v GetLkeClusters200ResponseDataInnerControlPlane) {
	o.ControlPlane = &v
}

// GetK8sVersion returns the K8sVersion field value
func (o *PostLkeClusterRequest) GetK8sVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.K8sVersion
}

// GetK8sVersionOk returns a tuple with the K8sVersion field value
// and a boolean to check if the value has been set.
func (o *PostLkeClusterRequest) GetK8sVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.K8sVersion, true
}

// SetK8sVersion sets field value
func (o *PostLkeClusterRequest) SetK8sVersion(v string) {
	o.K8sVersion = v
}

// GetLabel returns the Label field value
func (o *PostLkeClusterRequest) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *PostLkeClusterRequest) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *PostLkeClusterRequest) SetLabel(v string) {
	o.Label = v
}

// GetNodePools returns the NodePools field value
func (o *PostLkeClusterRequest) GetNodePools() []PostLkeClusterRequestNodePoolsInner {
	if o == nil {
		var ret []PostLkeClusterRequestNodePoolsInner
		return ret
	}

	return o.NodePools
}

// GetNodePoolsOk returns a tuple with the NodePools field value
// and a boolean to check if the value has been set.
func (o *PostLkeClusterRequest) GetNodePoolsOk() ([]PostLkeClusterRequestNodePoolsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.NodePools, true
}

// SetNodePools sets field value
func (o *PostLkeClusterRequest) SetNodePools(v []PostLkeClusterRequestNodePoolsInner) {
	o.NodePools = v
}

// GetRegion returns the Region field value
func (o *PostLkeClusterRequest) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *PostLkeClusterRequest) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *PostLkeClusterRequest) SetRegion(v string) {
	o.Region = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *PostLkeClusterRequest) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostLkeClusterRequest) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *PostLkeClusterRequest) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *PostLkeClusterRequest) SetTags(v []string) {
	o.Tags = v
}

func (o PostLkeClusterRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostLkeClusterRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ControlPlane) {
		toSerialize["control_plane"] = o.ControlPlane
	}
	toSerialize["k8s_version"] = o.K8sVersion
	toSerialize["label"] = o.Label
	toSerialize["node_pools"] = o.NodePools
	toSerialize["region"] = o.Region
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

func (o *PostLkeClusterRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"k8s_version",
		"label",
		"node_pools",
		"region",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPostLkeClusterRequest := _PostLkeClusterRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPostLkeClusterRequest)

	if err != nil {
		return err
	}

	*o = PostLkeClusterRequest(varPostLkeClusterRequest)

	return err
}

type NullablePostLkeClusterRequest struct {
	value *PostLkeClusterRequest
	isSet bool
}

func (v NullablePostLkeClusterRequest) Get() *PostLkeClusterRequest {
	return v.value
}

func (v *NullablePostLkeClusterRequest) Set(val *PostLkeClusterRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePostLkeClusterRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePostLkeClusterRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostLkeClusterRequest(val *PostLkeClusterRequest) *NullablePostLkeClusterRequest {
	return &NullablePostLkeClusterRequest{value: val, isSet: true}
}

func (v NullablePostLkeClusterRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostLkeClusterRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


