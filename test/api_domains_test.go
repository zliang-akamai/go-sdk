/*
Linode API

Testing DomainsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_DomainsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DomainsAPIService DeleteDomain", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var domainId int32

		resp, httpRes, err := apiClient.DomainsAPI.DeleteDomain(context.Background(), apiVersion, domainId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DomainsAPIService DeleteDomainRecord", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var domainId int32
		var recordId int32

		resp, httpRes, err := apiClient.DomainsAPI.DeleteDomainRecord(context.Background(), apiVersion, domainId, recordId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DomainsAPIService GetDomain", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var domainId int32

		resp, httpRes, err := apiClient.DomainsAPI.GetDomain(context.Background(), apiVersion, domainId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DomainsAPIService GetDomainRecord", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var domainId int32
		var recordId int32

		resp, httpRes, err := apiClient.DomainsAPI.GetDomainRecord(context.Background(), apiVersion, domainId, recordId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DomainsAPIService GetDomainRecords", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var domainId int32

		resp, httpRes, err := apiClient.DomainsAPI.GetDomainRecords(context.Background(), apiVersion, domainId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DomainsAPIService GetDomainZone", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var domainId string

		resp, httpRes, err := apiClient.DomainsAPI.GetDomainZone(context.Background(), apiVersion, domainId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DomainsAPIService GetDomains", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string

		resp, httpRes, err := apiClient.DomainsAPI.GetDomains(context.Background(), apiVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DomainsAPIService PostCloneDomain", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var domainId string

		resp, httpRes, err := apiClient.DomainsAPI.PostCloneDomain(context.Background(), apiVersion, domainId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DomainsAPIService PostDomain", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string

		resp, httpRes, err := apiClient.DomainsAPI.PostDomain(context.Background(), apiVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DomainsAPIService PostDomainRecord", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var domainId int32

		resp, httpRes, err := apiClient.DomainsAPI.PostDomainRecord(context.Background(), apiVersion, domainId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DomainsAPIService PostImportDomain", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string

		resp, httpRes, err := apiClient.DomainsAPI.PostImportDomain(context.Background(), apiVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DomainsAPIService PutDomain", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var domainId int32

		resp, httpRes, err := apiClient.DomainsAPI.PutDomain(context.Background(), apiVersion, domainId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DomainsAPIService PutDomainRecord", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var domainId int32
		var recordId int32

		resp, httpRes, err := apiClient.DomainsAPI.PutDomainRecord(context.Background(), apiVersion, domainId, recordId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
