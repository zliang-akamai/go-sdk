/*
Linode API

[Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

API version: 4.189.2
Contact: support@linode.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the NodeBalancerTransfer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodeBalancerTransfer{}

// NodeBalancerTransfer Information about the amount of transfer this NodeBalancer has had so far this month.
type NodeBalancerTransfer struct {
	// The total outbound transfer, in MB, used for this NodeBalancer this month.
	In NullableFloat32 `json:"in,omitempty"`
	// The total inbound transfer, in MB, used for this NodeBalancer this month.
	Out NullableFloat32 `json:"out,omitempty"`
	// The total transfer, in MB, used by this NodeBalancer this month.
	Total NullableFloat32 `json:"total,omitempty"`
}

// NewNodeBalancerTransfer instantiates a new NodeBalancerTransfer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeBalancerTransfer() *NodeBalancerTransfer {
	this := NodeBalancerTransfer{}
	return &this
}

// NewNodeBalancerTransferWithDefaults instantiates a new NodeBalancerTransfer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeBalancerTransferWithDefaults() *NodeBalancerTransfer {
	this := NodeBalancerTransfer{}
	return &this
}

// GetIn returns the In field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeBalancerTransfer) GetIn() float32 {
	if o == nil || IsNil(o.In.Get()) {
		var ret float32
		return ret
	}
	return *o.In.Get()
}

// GetInOk returns a tuple with the In field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeBalancerTransfer) GetInOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.In.Get(), o.In.IsSet()
}

// HasIn returns a boolean if a field has been set.
func (o *NodeBalancerTransfer) HasIn() bool {
	if o != nil && o.In.IsSet() {
		return true
	}

	return false
}

// SetIn gets a reference to the given NullableFloat32 and assigns it to the In field.
func (o *NodeBalancerTransfer) SetIn(v float32) {
	o.In.Set(&v)
}
// SetInNil sets the value for In to be an explicit nil
func (o *NodeBalancerTransfer) SetInNil() {
	o.In.Set(nil)
}

// UnsetIn ensures that no value is present for In, not even an explicit nil
func (o *NodeBalancerTransfer) UnsetIn() {
	o.In.Unset()
}

// GetOut returns the Out field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeBalancerTransfer) GetOut() float32 {
	if o == nil || IsNil(o.Out.Get()) {
		var ret float32
		return ret
	}
	return *o.Out.Get()
}

// GetOutOk returns a tuple with the Out field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeBalancerTransfer) GetOutOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Out.Get(), o.Out.IsSet()
}

// HasOut returns a boolean if a field has been set.
func (o *NodeBalancerTransfer) HasOut() bool {
	if o != nil && o.Out.IsSet() {
		return true
	}

	return false
}

// SetOut gets a reference to the given NullableFloat32 and assigns it to the Out field.
func (o *NodeBalancerTransfer) SetOut(v float32) {
	o.Out.Set(&v)
}
// SetOutNil sets the value for Out to be an explicit nil
func (o *NodeBalancerTransfer) SetOutNil() {
	o.Out.Set(nil)
}

// UnsetOut ensures that no value is present for Out, not even an explicit nil
func (o *NodeBalancerTransfer) UnsetOut() {
	o.Out.Unset()
}

// GetTotal returns the Total field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeBalancerTransfer) GetTotal() float32 {
	if o == nil || IsNil(o.Total.Get()) {
		var ret float32
		return ret
	}
	return *o.Total.Get()
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeBalancerTransfer) GetTotalOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Total.Get(), o.Total.IsSet()
}

// HasTotal returns a boolean if a field has been set.
func (o *NodeBalancerTransfer) HasTotal() bool {
	if o != nil && o.Total.IsSet() {
		return true
	}

	return false
}

// SetTotal gets a reference to the given NullableFloat32 and assigns it to the Total field.
func (o *NodeBalancerTransfer) SetTotal(v float32) {
	o.Total.Set(&v)
}
// SetTotalNil sets the value for Total to be an explicit nil
func (o *NodeBalancerTransfer) SetTotalNil() {
	o.Total.Set(nil)
}

// UnsetTotal ensures that no value is present for Total, not even an explicit nil
func (o *NodeBalancerTransfer) UnsetTotal() {
	o.Total.Unset()
}

func (o NodeBalancerTransfer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeBalancerTransfer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.In.IsSet() {
		toSerialize["in"] = o.In.Get()
	}
	if o.Out.IsSet() {
		toSerialize["out"] = o.Out.Get()
	}
	if o.Total.IsSet() {
		toSerialize["total"] = o.Total.Get()
	}
	return toSerialize, nil
}

type NullableNodeBalancerTransfer struct {
	value *NodeBalancerTransfer
	isSet bool
}

func (v NullableNodeBalancerTransfer) Get() *NodeBalancerTransfer {
	return v.value
}

func (v *NullableNodeBalancerTransfer) Set(val *NodeBalancerTransfer) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeBalancerTransfer) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeBalancerTransfer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeBalancerTransfer(val *NodeBalancerTransfer) *NullableNodeBalancerTransfer {
	return &NullableNodeBalancerTransfer{value: val, isSet: true}
}

func (v NullableNodeBalancerTransfer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeBalancerTransfer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


