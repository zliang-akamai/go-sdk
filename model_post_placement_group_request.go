/*
Linode API

[Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

API version: 4.189.2
Contact: support@linode.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PostPlacementGroupRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostPlacementGroupRequest{}

// PostPlacementGroupRequest struct for PostPlacementGroupRequest
type PostPlacementGroupRequest struct {
	// A unique name for the placement group. A placement group `label` has the following constraints:  - It needs to begin and end with an alphanumeric character. - It can only consist of alphanumeric characters, hyphens (`-`), underscores (`_`), or periods (`.`).
	Label string `json:"label"`
	// How requests to add future compute instances to your placement group are handled:  - `strict`. Don't add a compute instance if it breaks the grouped-together or spread-apart model set by your `placement_group_type`. For example, with `anti-affinity:local` as your `placement_group_type`, assume it already has three qualifying compute instances on separate hosts, to support the spread-apart model. If a fourth compute instance is assigned that's on the same host as one of the existing three, an error is thrown and the system won't add it. Ensures the placement group stays compliant with your selected model. - `flexible`. Add a new compute instance, even if it breaks the grouped-together or spread-apart model set by your `placement_group_type`. Breaking the model makes the placement group non-compliant. You need to wait for Akamai to move the offending compute instances to make the group compliant again, once the necessary capacity is available in the region. Offers flexibility to add future compute instances if compliance isn't an immediate concern.  > ðŸ“˜ > > Once you create a placement group, you can't change its `placement_group_policy` setting.
	PlacementGroupPolicy string `json:"placement_group_policy"`
	// How compute instances are distributed in your placement group. A `placement_group_type` using anti-affinity (`anti-affinity:local`) places compute instances in separate hosts, but still in the same region. This best supports the spread-apart model for high availability. A `placement_group_type` using affinity places compute instances physically close together, possibly on the same host. This supports the grouped-together model for low-latency.  > ðŸ“˜ > > Currently, only `anti_affinity:local` is available for `placement_group_type`.
	PlacementGroupType string `json:"placement_group_type"`
	// The data center that houses the compute instances you want to add to your placement group. Run the [List Linodes](https://techdocs.akamai.com/linode-api/reference/get-linode-instances) operation to view your compute instances and store the `region` identifier.
	Region string `json:"region"`
}

type _PostPlacementGroupRequest PostPlacementGroupRequest

// NewPostPlacementGroupRequest instantiates a new PostPlacementGroupRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostPlacementGroupRequest(label string, placementGroupPolicy string, placementGroupType string, region string) *PostPlacementGroupRequest {
	this := PostPlacementGroupRequest{}
	this.Label = label
	this.PlacementGroupPolicy = placementGroupPolicy
	this.PlacementGroupType = placementGroupType
	this.Region = region
	return &this
}

// NewPostPlacementGroupRequestWithDefaults instantiates a new PostPlacementGroupRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostPlacementGroupRequestWithDefaults() *PostPlacementGroupRequest {
	this := PostPlacementGroupRequest{}
	return &this
}

// GetLabel returns the Label field value
func (o *PostPlacementGroupRequest) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *PostPlacementGroupRequest) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *PostPlacementGroupRequest) SetLabel(v string) {
	o.Label = v
}

// GetPlacementGroupPolicy returns the PlacementGroupPolicy field value
func (o *PostPlacementGroupRequest) GetPlacementGroupPolicy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PlacementGroupPolicy
}

// GetPlacementGroupPolicyOk returns a tuple with the PlacementGroupPolicy field value
// and a boolean to check if the value has been set.
func (o *PostPlacementGroupRequest) GetPlacementGroupPolicyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlacementGroupPolicy, true
}

// SetPlacementGroupPolicy sets field value
func (o *PostPlacementGroupRequest) SetPlacementGroupPolicy(v string) {
	o.PlacementGroupPolicy = v
}

// GetPlacementGroupType returns the PlacementGroupType field value
func (o *PostPlacementGroupRequest) GetPlacementGroupType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PlacementGroupType
}

// GetPlacementGroupTypeOk returns a tuple with the PlacementGroupType field value
// and a boolean to check if the value has been set.
func (o *PostPlacementGroupRequest) GetPlacementGroupTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlacementGroupType, true
}

// SetPlacementGroupType sets field value
func (o *PostPlacementGroupRequest) SetPlacementGroupType(v string) {
	o.PlacementGroupType = v
}

// GetRegion returns the Region field value
func (o *PostPlacementGroupRequest) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *PostPlacementGroupRequest) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *PostPlacementGroupRequest) SetRegion(v string) {
	o.Region = v
}

func (o PostPlacementGroupRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostPlacementGroupRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["label"] = o.Label
	toSerialize["placement_group_policy"] = o.PlacementGroupPolicy
	toSerialize["placement_group_type"] = o.PlacementGroupType
	toSerialize["region"] = o.Region
	return toSerialize, nil
}

func (o *PostPlacementGroupRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"label",
		"placement_group_policy",
		"placement_group_type",
		"region",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPostPlacementGroupRequest := _PostPlacementGroupRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPostPlacementGroupRequest)

	if err != nil {
		return err
	}

	*o = PostPlacementGroupRequest(varPostPlacementGroupRequest)

	return err
}

type NullablePostPlacementGroupRequest struct {
	value *PostPlacementGroupRequest
	isSet bool
}

func (v NullablePostPlacementGroupRequest) Get() *PostPlacementGroupRequest {
	return v.value
}

func (v *NullablePostPlacementGroupRequest) Set(val *PostPlacementGroupRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePostPlacementGroupRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePostPlacementGroupRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostPlacementGroupRequest(val *PostPlacementGroupRequest) *NullablePostPlacementGroupRequest {
	return &NullablePostPlacementGroupRequest{value: val, isSet: true}
}

func (v NullablePostPlacementGroupRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostPlacementGroupRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


