/*
Linode API

[Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

API version: 4.189.2
Contact: support@linode.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PutDatabasesPostgreSqlInstanceRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PutDatabasesPostgreSqlInstanceRequest{}

// PutDatabasesPostgreSqlInstanceRequest Updated information for the Managed PostgreSQL Database.
type PutDatabasesPostgreSqlInstanceRequest struct {
	// A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.  By default, this is an empty array (`[]`), which blocks all connections (both public and private) to the Managed Database.  If `0.0.0.0/0` is a value in this list, then all IP addresses can access the Managed Database.
	AllowList []string `json:"allow_list,omitempty"`
	// A unique, user-defined string referring to the Managed Database.
	Label *string `json:"label,omitempty"`
	// Request re-sizing of your cluster to a Linode Type with more disk space. For example, you could request a Linode Type that uses a higher plan.  - Needs to be a Linode Type with more disk space than your current Linode.  - Resizing to a larger Linode Type can accrue additional cost. Review the `price` output from the [List types](https://techdocs.akamai.com/linode-api/reference/get-linode-types) operation for more information.  - You can't update the `allow_list` and set a new `type` in the same request.  - Any active updates to your cluster need to complete before you can request a resize. The reverse is also true: An active resizing needs to complete before you can perform any other update.
	Type *string `json:"type,omitempty"`
	Updates *GetDatabasesInstances200ResponseAllOfDataInnerUpdates `json:"updates,omitempty"`
}

// NewPutDatabasesPostgreSqlInstanceRequest instantiates a new PutDatabasesPostgreSqlInstanceRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPutDatabasesPostgreSqlInstanceRequest() *PutDatabasesPostgreSqlInstanceRequest {
	this := PutDatabasesPostgreSqlInstanceRequest{}
	return &this
}

// NewPutDatabasesPostgreSqlInstanceRequestWithDefaults instantiates a new PutDatabasesPostgreSqlInstanceRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPutDatabasesPostgreSqlInstanceRequestWithDefaults() *PutDatabasesPostgreSqlInstanceRequest {
	this := PutDatabasesPostgreSqlInstanceRequest{}
	return &this
}

// GetAllowList returns the AllowList field value if set, zero value otherwise.
func (o *PutDatabasesPostgreSqlInstanceRequest) GetAllowList() []string {
	if o == nil || IsNil(o.AllowList) {
		var ret []string
		return ret
	}
	return o.AllowList
}

// GetAllowListOk returns a tuple with the AllowList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutDatabasesPostgreSqlInstanceRequest) GetAllowListOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowList) {
		return nil, false
	}
	return o.AllowList, true
}

// HasAllowList returns a boolean if a field has been set.
func (o *PutDatabasesPostgreSqlInstanceRequest) HasAllowList() bool {
	if o != nil && !IsNil(o.AllowList) {
		return true
	}

	return false
}

// SetAllowList gets a reference to the given []string and assigns it to the AllowList field.
func (o *PutDatabasesPostgreSqlInstanceRequest) SetAllowList(v []string) {
	o.AllowList = v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *PutDatabasesPostgreSqlInstanceRequest) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutDatabasesPostgreSqlInstanceRequest) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *PutDatabasesPostgreSqlInstanceRequest) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *PutDatabasesPostgreSqlInstanceRequest) SetLabel(v string) {
	o.Label = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PutDatabasesPostgreSqlInstanceRequest) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutDatabasesPostgreSqlInstanceRequest) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PutDatabasesPostgreSqlInstanceRequest) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PutDatabasesPostgreSqlInstanceRequest) SetType(v string) {
	o.Type = &v
}

// GetUpdates returns the Updates field value if set, zero value otherwise.
func (o *PutDatabasesPostgreSqlInstanceRequest) GetUpdates() GetDatabasesInstances200ResponseAllOfDataInnerUpdates {
	if o == nil || IsNil(o.Updates) {
		var ret GetDatabasesInstances200ResponseAllOfDataInnerUpdates
		return ret
	}
	return *o.Updates
}

// GetUpdatesOk returns a tuple with the Updates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PutDatabasesPostgreSqlInstanceRequest) GetUpdatesOk() (*GetDatabasesInstances200ResponseAllOfDataInnerUpdates, bool) {
	if o == nil || IsNil(o.Updates) {
		return nil, false
	}
	return o.Updates, true
}

// HasUpdates returns a boolean if a field has been set.
func (o *PutDatabasesPostgreSqlInstanceRequest) HasUpdates() bool {
	if o != nil && !IsNil(o.Updates) {
		return true
	}

	return false
}

// SetUpdates gets a reference to the given GetDatabasesInstances200ResponseAllOfDataInnerUpdates and assigns it to the Updates field.
func (o *PutDatabasesPostgreSqlInstanceRequest) SetUpdates(v GetDatabasesInstances200ResponseAllOfDataInnerUpdates) {
	o.Updates = &v
}

func (o PutDatabasesPostgreSqlInstanceRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PutDatabasesPostgreSqlInstanceRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllowList) {
		toSerialize["allow_list"] = o.AllowList
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Updates) {
		toSerialize["updates"] = o.Updates
	}
	return toSerialize, nil
}

type NullablePutDatabasesPostgreSqlInstanceRequest struct {
	value *PutDatabasesPostgreSqlInstanceRequest
	isSet bool
}

func (v NullablePutDatabasesPostgreSqlInstanceRequest) Get() *PutDatabasesPostgreSqlInstanceRequest {
	return v.value
}

func (v *NullablePutDatabasesPostgreSqlInstanceRequest) Set(val *PutDatabasesPostgreSqlInstanceRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePutDatabasesPostgreSqlInstanceRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePutDatabasesPostgreSqlInstanceRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePutDatabasesPostgreSqlInstanceRequest(val *PutDatabasesPostgreSqlInstanceRequest) *NullablePutDatabasesPostgreSqlInstanceRequest {
	return &NullablePutDatabasesPostgreSqlInstanceRequest{value: val, isSet: true}
}

func (v NullablePutDatabasesPostgreSqlInstanceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePutDatabasesPostgreSqlInstanceRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


