/*
Linode API

[Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

API version: 4.189.2
Contact: support@linode.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PostMigrateLinodeInstanceRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostMigrateLinodeInstanceRequest{}

// PostMigrateLinodeInstanceRequest struct for PostMigrateLinodeInstanceRequest
type PostMigrateLinodeInstanceRequest struct {
	PlacementGroup *PostMigrateLinodeInstanceRequestPlacementGroup `json:"placement_group,omitempty"`
	// The region to which the Linode will be migrated. Must be a valid region slug. A list of regions can be viewed by running the [List regions](https://techdocs.akamai.com/linode-api/reference/get-regions) operation. A cross data center migration will cancel a pending migration that has not yet been initiated. A cross data center migration will initiate a `linode_migrate_datacenter_create` event.
	Region *string `json:"region,omitempty"`
	// Type of migration used in moving to a new host or Linode type.  `warm`: the Linode will not power down until the migration is complete. Warm migrations are not available for DC migrations.  `cold`: the Linode will be powered down and migrated. When the migration is complete, the Linode will be powered on.
	Type *string `json:"type,omitempty"`
	// When initiating a cross DC migration, setting this value to true will also ensure that the Linode is upgraded to the latest generation of hardware that corresponds to your Linode's Type, if any free upgrades are available for it. If no free upgrades are available, and this value is set to true, then the endpoint will return a 400 error code and the migration will not be performed. If the data center set in the `region` field does not allow upgrades, then the endpoint will return a 400 error code and the migration will not be performed.
	Upgrade *bool `json:"upgrade,omitempty"`
}

// NewPostMigrateLinodeInstanceRequest instantiates a new PostMigrateLinodeInstanceRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostMigrateLinodeInstanceRequest() *PostMigrateLinodeInstanceRequest {
	this := PostMigrateLinodeInstanceRequest{}
	var type_ string = "cold"
	this.Type = &type_
	var upgrade bool = false
	this.Upgrade = &upgrade
	return &this
}

// NewPostMigrateLinodeInstanceRequestWithDefaults instantiates a new PostMigrateLinodeInstanceRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostMigrateLinodeInstanceRequestWithDefaults() *PostMigrateLinodeInstanceRequest {
	this := PostMigrateLinodeInstanceRequest{}
	var type_ string = "cold"
	this.Type = &type_
	var upgrade bool = false
	this.Upgrade = &upgrade
	return &this
}

// GetPlacementGroup returns the PlacementGroup field value if set, zero value otherwise.
func (o *PostMigrateLinodeInstanceRequest) GetPlacementGroup() PostMigrateLinodeInstanceRequestPlacementGroup {
	if o == nil || IsNil(o.PlacementGroup) {
		var ret PostMigrateLinodeInstanceRequestPlacementGroup
		return ret
	}
	return *o.PlacementGroup
}

// GetPlacementGroupOk returns a tuple with the PlacementGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostMigrateLinodeInstanceRequest) GetPlacementGroupOk() (*PostMigrateLinodeInstanceRequestPlacementGroup, bool) {
	if o == nil || IsNil(o.PlacementGroup) {
		return nil, false
	}
	return o.PlacementGroup, true
}

// HasPlacementGroup returns a boolean if a field has been set.
func (o *PostMigrateLinodeInstanceRequest) HasPlacementGroup() bool {
	if o != nil && !IsNil(o.PlacementGroup) {
		return true
	}

	return false
}

// SetPlacementGroup gets a reference to the given PostMigrateLinodeInstanceRequestPlacementGroup and assigns it to the PlacementGroup field.
func (o *PostMigrateLinodeInstanceRequest) SetPlacementGroup(v PostMigrateLinodeInstanceRequestPlacementGroup) {
	o.PlacementGroup = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *PostMigrateLinodeInstanceRequest) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostMigrateLinodeInstanceRequest) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *PostMigrateLinodeInstanceRequest) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *PostMigrateLinodeInstanceRequest) SetRegion(v string) {
	o.Region = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PostMigrateLinodeInstanceRequest) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostMigrateLinodeInstanceRequest) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PostMigrateLinodeInstanceRequest) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PostMigrateLinodeInstanceRequest) SetType(v string) {
	o.Type = &v
}

// GetUpgrade returns the Upgrade field value if set, zero value otherwise.
func (o *PostMigrateLinodeInstanceRequest) GetUpgrade() bool {
	if o == nil || IsNil(o.Upgrade) {
		var ret bool
		return ret
	}
	return *o.Upgrade
}

// GetUpgradeOk returns a tuple with the Upgrade field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostMigrateLinodeInstanceRequest) GetUpgradeOk() (*bool, bool) {
	if o == nil || IsNil(o.Upgrade) {
		return nil, false
	}
	return o.Upgrade, true
}

// HasUpgrade returns a boolean if a field has been set.
func (o *PostMigrateLinodeInstanceRequest) HasUpgrade() bool {
	if o != nil && !IsNil(o.Upgrade) {
		return true
	}

	return false
}

// SetUpgrade gets a reference to the given bool and assigns it to the Upgrade field.
func (o *PostMigrateLinodeInstanceRequest) SetUpgrade(v bool) {
	o.Upgrade = &v
}

func (o PostMigrateLinodeInstanceRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostMigrateLinodeInstanceRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PlacementGroup) {
		toSerialize["placement_group"] = o.PlacementGroup
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Upgrade) {
		toSerialize["upgrade"] = o.Upgrade
	}
	return toSerialize, nil
}

type NullablePostMigrateLinodeInstanceRequest struct {
	value *PostMigrateLinodeInstanceRequest
	isSet bool
}

func (v NullablePostMigrateLinodeInstanceRequest) Get() *PostMigrateLinodeInstanceRequest {
	return v.value
}

func (v *NullablePostMigrateLinodeInstanceRequest) Set(val *PostMigrateLinodeInstanceRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePostMigrateLinodeInstanceRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePostMigrateLinodeInstanceRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostMigrateLinodeInstanceRequest(val *PostMigrateLinodeInstanceRequest) *NullablePostMigrateLinodeInstanceRequest {
	return &NullablePostMigrateLinodeInstanceRequest{value: val, isSet: true}
}

func (v NullablePostMigrateLinodeInstanceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostMigrateLinodeInstanceRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


