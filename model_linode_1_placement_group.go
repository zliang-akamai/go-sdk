/*
Linode API

[Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

API version: 4.189.2
Contact: support@linode.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Linode1PlacementGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Linode1PlacementGroup{}

// Linode1PlacementGroup Details on the [placement group](https://www.linode.com/docs/products/compute/compute-instances/guides/placement-groups/) that this Linode belongs to. Empty if the Linode isn't in a placement group.
type Linode1PlacementGroup struct {
	// The placement group's ID. You need to provide it for all operations that affect it.
	Id *int32 `json:"id,omitempty"`
	// The unique name set for the placement group. A label has these constraints:  - It needs to begin and end with an alphanumeric character. - It can only consist of alphanumeric characters, hyphens (`-`), underscores (`_`) or periods (`.`).
	Label *string `json:"label,omitempty"`
	// How requests to add future compute instances to your placement group are handled, and whether it remains compliant:  - `strict`. Don't assign a new compute instance if it breaks the grouped-together or spread-apart model set by the `placement_group_type`. Use this to ensure the placement group stays compliant (`is_compliant: true`). - `flexible`. Assign a new compute instance, even if it breaks the grouped-together or spread-apart model set by the `placement_group_type`. This makes the group non-compliant (`is_compliant: false`). You need to wait for Akamai to move the offending compute instance to make it compliant again, once the necessary capacity is available in the region. Offers flexibility to add future compute instances if compliance isn't an immediate concern.  <<LB>>  > ðŸ“˜ > > In rare cases, non-compliance can occur with a `strict` placement group if Akamai needs to failover or migrate your compute instances for maintenance. Fixing non-compliance for a `strict` placement group is prioritized over a `flexible` group.
	PlacementGroupPolicy *string `json:"placement_group_policy,omitempty"`
	// How compute instances are distributed in your placement group. A `placement_group_type` using anti-affinity (`anti-affinity:local`) places compute instances in separate hosts, but still in the same region. This best supports the spread-apart model for high availability. A `placement_group_type` using affinity places compute instances physically close together, possibly on the same host. This supports the grouped-together model for low-latency.  > ðŸ“˜ > > Currently, only `anti_affinity:local` is available for `placement_group_type`.
	PlacementGroupType *string `json:"placement_group_type,omitempty"`
}

// NewLinode1PlacementGroup instantiates a new Linode1PlacementGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinode1PlacementGroup() *Linode1PlacementGroup {
	this := Linode1PlacementGroup{}
	return &this
}

// NewLinode1PlacementGroupWithDefaults instantiates a new Linode1PlacementGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinode1PlacementGroupWithDefaults() *Linode1PlacementGroup {
	this := Linode1PlacementGroup{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Linode1PlacementGroup) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Linode1PlacementGroup) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Linode1PlacementGroup) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Linode1PlacementGroup) SetId(v int32) {
	o.Id = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *Linode1PlacementGroup) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Linode1PlacementGroup) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *Linode1PlacementGroup) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *Linode1PlacementGroup) SetLabel(v string) {
	o.Label = &v
}

// GetPlacementGroupPolicy returns the PlacementGroupPolicy field value if set, zero value otherwise.
func (o *Linode1PlacementGroup) GetPlacementGroupPolicy() string {
	if o == nil || IsNil(o.PlacementGroupPolicy) {
		var ret string
		return ret
	}
	return *o.PlacementGroupPolicy
}

// GetPlacementGroupPolicyOk returns a tuple with the PlacementGroupPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Linode1PlacementGroup) GetPlacementGroupPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.PlacementGroupPolicy) {
		return nil, false
	}
	return o.PlacementGroupPolicy, true
}

// HasPlacementGroupPolicy returns a boolean if a field has been set.
func (o *Linode1PlacementGroup) HasPlacementGroupPolicy() bool {
	if o != nil && !IsNil(o.PlacementGroupPolicy) {
		return true
	}

	return false
}

// SetPlacementGroupPolicy gets a reference to the given string and assigns it to the PlacementGroupPolicy field.
func (o *Linode1PlacementGroup) SetPlacementGroupPolicy(v string) {
	o.PlacementGroupPolicy = &v
}

// GetPlacementGroupType returns the PlacementGroupType field value if set, zero value otherwise.
func (o *Linode1PlacementGroup) GetPlacementGroupType() string {
	if o == nil || IsNil(o.PlacementGroupType) {
		var ret string
		return ret
	}
	return *o.PlacementGroupType
}

// GetPlacementGroupTypeOk returns a tuple with the PlacementGroupType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Linode1PlacementGroup) GetPlacementGroupTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PlacementGroupType) {
		return nil, false
	}
	return o.PlacementGroupType, true
}

// HasPlacementGroupType returns a boolean if a field has been set.
func (o *Linode1PlacementGroup) HasPlacementGroupType() bool {
	if o != nil && !IsNil(o.PlacementGroupType) {
		return true
	}

	return false
}

// SetPlacementGroupType gets a reference to the given string and assigns it to the PlacementGroupType field.
func (o *Linode1PlacementGroup) SetPlacementGroupType(v string) {
	o.PlacementGroupType = &v
}

func (o Linode1PlacementGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Linode1PlacementGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.PlacementGroupPolicy) {
		toSerialize["placement_group_policy"] = o.PlacementGroupPolicy
	}
	if !IsNil(o.PlacementGroupType) {
		toSerialize["placement_group_type"] = o.PlacementGroupType
	}
	return toSerialize, nil
}

type NullableLinode1PlacementGroup struct {
	value *Linode1PlacementGroup
	isSet bool
}

func (v NullableLinode1PlacementGroup) Get() *Linode1PlacementGroup {
	return v.value
}

func (v *NullableLinode1PlacementGroup) Set(val *Linode1PlacementGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableLinode1PlacementGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableLinode1PlacementGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinode1PlacementGroup(val *Linode1PlacementGroup) *NullableLinode1PlacementGroup {
	return &NullableLinode1PlacementGroup{value: val, isSet: true}
}

func (v NullableLinode1PlacementGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinode1PlacementGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


