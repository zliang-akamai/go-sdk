/*
Linode API

Testing VolumesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_VolumesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test VolumesAPIService DeleteVolume", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var volumeId int32

		resp, httpRes, err := apiClient.VolumesAPI.DeleteVolume(context.Background(), apiVersion, volumeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VolumesAPIService GetVolume", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var volumeId int32

		resp, httpRes, err := apiClient.VolumesAPI.GetVolume(context.Background(), apiVersion, volumeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VolumesAPIService GetVolumeTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string

		resp, httpRes, err := apiClient.VolumesAPI.GetVolumeTypes(context.Background(), apiVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VolumesAPIService GetVolumes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string

		resp, httpRes, err := apiClient.VolumesAPI.GetVolumes(context.Background(), apiVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VolumesAPIService PostAttachVolume", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var volumeId int32

		resp, httpRes, err := apiClient.VolumesAPI.PostAttachVolume(context.Background(), apiVersion, volumeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VolumesAPIService PostCloneVolume", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var volumeId int32

		resp, httpRes, err := apiClient.VolumesAPI.PostCloneVolume(context.Background(), apiVersion, volumeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VolumesAPIService PostDetachVolume", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var volumeId int32

		resp, httpRes, err := apiClient.VolumesAPI.PostDetachVolume(context.Background(), apiVersion, volumeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VolumesAPIService PostResizeVolume", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var volumeId int32

		resp, httpRes, err := apiClient.VolumesAPI.PostResizeVolume(context.Background(), apiVersion, volumeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VolumesAPIService PostVolume", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string

		resp, httpRes, err := apiClient.VolumesAPI.PostVolume(context.Background(), apiVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VolumesAPIService PutVolume", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var volumeId int32

		resp, httpRes, err := apiClient.VolumesAPI.PutVolume(context.Background(), apiVersion, volumeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
