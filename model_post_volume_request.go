/*
Linode API

[Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

API version: 4.189.2
Contact: support@linode.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PostVolumeRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostVolumeRequest{}

// PostVolumeRequest struct for PostVolumeRequest
type PostVolumeRequest struct {
	// When creating a Volume attached to a Linode, the ID of the Linode Config to include the new Volume in. This Config must belong to the Linode referenced by `linode_id`. Must _not_ be provided if `linode_id` is not sent. If a `linode_id` is sent without a `config_id`, the volume will be attached:    - to the Linode's only config if it only has one config.   - to the Linode's last used config, if possible.  If no config can be selected for attachment, an error will be returned.
	ConfigId *int32 `json:"config_id,omitempty"`
	// Enables encryption on the volume. Full disk encryption ensures the data stored on a block storage volume drive is secure. It protects against unauthorized access by keeping the data encrypted if the volume drive is removed from the data center, decommissioned, or disposed of.  The platform automatically manages the encryption and decryption process for you. You can use an encrypted volume the same way as you use a non-encrypted volume.  You can enable or disable disk encryption only when creating new block storage volumes. After a volume is created, the encryption setting can't be changed.
	Encryption *string `json:"encryption,omitempty"`
	// The Volume's label, which is also used in the `filesystem_path` of the resulting volume.
	Label string `json:"label" validate:"regexp=^[a-zA-Z]((?!--|__)[a-zA-Z0-9-_])+$"`
	// The Linode this volume should be attached to upon creation. If not given, the volume will be created without an attachment.
	LinodeId *int32 `json:"linode_id,omitempty"`
	// The Region to deploy this Volume in. This is only required if a linode_id is not given.
	Region *string `json:"region,omitempty"`
	// The initial size of this volume, in GB.  Be aware that volumes may only be resized up after creation.
	Size *int32 `json:"size,omitempty"`
	// An array of Tags applied to this object.  Tags are for organizational purposes only.
	Tags []string `json:"tags,omitempty"`
}

type _PostVolumeRequest PostVolumeRequest

// NewPostVolumeRequest instantiates a new PostVolumeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostVolumeRequest(label string) *PostVolumeRequest {
	this := PostVolumeRequest{}
	var encryption string = "disabled"
	this.Encryption = &encryption
	this.Label = label
	var size int32 = 20
	this.Size = &size
	return &this
}

// NewPostVolumeRequestWithDefaults instantiates a new PostVolumeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostVolumeRequestWithDefaults() *PostVolumeRequest {
	this := PostVolumeRequest{}
	var encryption string = "disabled"
	this.Encryption = &encryption
	var size int32 = 20
	this.Size = &size
	return &this
}

// GetConfigId returns the ConfigId field value if set, zero value otherwise.
func (o *PostVolumeRequest) GetConfigId() int32 {
	if o == nil || IsNil(o.ConfigId) {
		var ret int32
		return ret
	}
	return *o.ConfigId
}

// GetConfigIdOk returns a tuple with the ConfigId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostVolumeRequest) GetConfigIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ConfigId) {
		return nil, false
	}
	return o.ConfigId, true
}

// HasConfigId returns a boolean if a field has been set.
func (o *PostVolumeRequest) HasConfigId() bool {
	if o != nil && !IsNil(o.ConfigId) {
		return true
	}

	return false
}

// SetConfigId gets a reference to the given int32 and assigns it to the ConfigId field.
func (o *PostVolumeRequest) SetConfigId(v int32) {
	o.ConfigId = &v
}

// GetEncryption returns the Encryption field value if set, zero value otherwise.
func (o *PostVolumeRequest) GetEncryption() string {
	if o == nil || IsNil(o.Encryption) {
		var ret string
		return ret
	}
	return *o.Encryption
}

// GetEncryptionOk returns a tuple with the Encryption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostVolumeRequest) GetEncryptionOk() (*string, bool) {
	if o == nil || IsNil(o.Encryption) {
		return nil, false
	}
	return o.Encryption, true
}

// HasEncryption returns a boolean if a field has been set.
func (o *PostVolumeRequest) HasEncryption() bool {
	if o != nil && !IsNil(o.Encryption) {
		return true
	}

	return false
}

// SetEncryption gets a reference to the given string and assigns it to the Encryption field.
func (o *PostVolumeRequest) SetEncryption(v string) {
	o.Encryption = &v
}

// GetLabel returns the Label field value
func (o *PostVolumeRequest) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *PostVolumeRequest) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *PostVolumeRequest) SetLabel(v string) {
	o.Label = v
}

// GetLinodeId returns the LinodeId field value if set, zero value otherwise.
func (o *PostVolumeRequest) GetLinodeId() int32 {
	if o == nil || IsNil(o.LinodeId) {
		var ret int32
		return ret
	}
	return *o.LinodeId
}

// GetLinodeIdOk returns a tuple with the LinodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostVolumeRequest) GetLinodeIdOk() (*int32, bool) {
	if o == nil || IsNil(o.LinodeId) {
		return nil, false
	}
	return o.LinodeId, true
}

// HasLinodeId returns a boolean if a field has been set.
func (o *PostVolumeRequest) HasLinodeId() bool {
	if o != nil && !IsNil(o.LinodeId) {
		return true
	}

	return false
}

// SetLinodeId gets a reference to the given int32 and assigns it to the LinodeId field.
func (o *PostVolumeRequest) SetLinodeId(v int32) {
	o.LinodeId = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *PostVolumeRequest) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostVolumeRequest) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *PostVolumeRequest) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *PostVolumeRequest) SetRegion(v string) {
	o.Region = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *PostVolumeRequest) GetSize() int32 {
	if o == nil || IsNil(o.Size) {
		var ret int32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostVolumeRequest) GetSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *PostVolumeRequest) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int32 and assigns it to the Size field.
func (o *PostVolumeRequest) SetSize(v int32) {
	o.Size = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *PostVolumeRequest) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostVolumeRequest) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *PostVolumeRequest) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *PostVolumeRequest) SetTags(v []string) {
	o.Tags = v
}

func (o PostVolumeRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostVolumeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConfigId) {
		toSerialize["config_id"] = o.ConfigId
	}
	if !IsNil(o.Encryption) {
		toSerialize["encryption"] = o.Encryption
	}
	toSerialize["label"] = o.Label
	if !IsNil(o.LinodeId) {
		toSerialize["linode_id"] = o.LinodeId
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

func (o *PostVolumeRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"label",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPostVolumeRequest := _PostVolumeRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPostVolumeRequest)

	if err != nil {
		return err
	}

	*o = PostVolumeRequest(varPostVolumeRequest)

	return err
}

type NullablePostVolumeRequest struct {
	value *PostVolumeRequest
	isSet bool
}

func (v NullablePostVolumeRequest) Get() *PostVolumeRequest {
	return v.value
}

func (v *NullablePostVolumeRequest) Set(val *PostVolumeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePostVolumeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePostVolumeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostVolumeRequest(val *PostVolumeRequest) *NullablePostVolumeRequest {
	return &NullablePostVolumeRequest{value: val, isSet: true}
}

func (v NullablePostVolumeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostVolumeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


