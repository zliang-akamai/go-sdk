/*
Linode API

[Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

API version: 4.189.2
Contact: support@linode.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ErrorObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrorObject{}

// ErrorObject An object for describing a single error that occurred during the processing of a request.
type ErrorObject struct {
	// The field in the request that caused this error. This may be a path, separated by periods in the case of nested fields. In some cases this may come back as `null` if the error is not specific to any single element of the request.
	Field *string `json:"field,omitempty"`
	// What happened to cause this error. In most cases, this can be fixed immediately by changing the data you sent in the request, but in some cases you will be instructed to [Open a support ticket](https://techdocs.akamai.com/linode-api/reference/post-ticket) or perform some other action before you can complete the request successfully.
	Reason *string `json:"reason,omitempty"`
}

// NewErrorObject instantiates a new ErrorObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorObject() *ErrorObject {
	this := ErrorObject{}
	return &this
}

// NewErrorObjectWithDefaults instantiates a new ErrorObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorObjectWithDefaults() *ErrorObject {
	this := ErrorObject{}
	return &this
}

// GetField returns the Field field value if set, zero value otherwise.
func (o *ErrorObject) GetField() string {
	if o == nil || IsNil(o.Field) {
		var ret string
		return ret
	}
	return *o.Field
}

// GetFieldOk returns a tuple with the Field field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorObject) GetFieldOk() (*string, bool) {
	if o == nil || IsNil(o.Field) {
		return nil, false
	}
	return o.Field, true
}

// HasField returns a boolean if a field has been set.
func (o *ErrorObject) HasField() bool {
	if o != nil && !IsNil(o.Field) {
		return true
	}

	return false
}

// SetField gets a reference to the given string and assigns it to the Field field.
func (o *ErrorObject) SetField(v string) {
	o.Field = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *ErrorObject) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorObject) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *ErrorObject) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *ErrorObject) SetReason(v string) {
	o.Reason = &v
}

func (o ErrorObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ErrorObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Field) {
		toSerialize["field"] = o.Field
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	return toSerialize, nil
}

type NullableErrorObject struct {
	value *ErrorObject
	isSet bool
}

func (v NullableErrorObject) Get() *ErrorObject {
	return v.value
}

func (v *NullableErrorObject) Set(val *ErrorObject) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorObject) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorObject(val *ErrorObject) *NullableErrorObject {
	return &NullableErrorObject{value: val, isSet: true}
}

func (v NullableErrorObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


