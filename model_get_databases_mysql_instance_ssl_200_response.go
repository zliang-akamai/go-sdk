/*
Linode API

[Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

API version: 4.189.2
Contact: support@linode.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GetDatabasesMysqlInstanceSsl200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetDatabasesMysqlInstanceSsl200Response{}

// GetDatabasesMysqlInstanceSsl200Response Managed Database SSL object.
type GetDatabasesMysqlInstanceSsl200Response struct {
	// The base64-encoded SSL CA certificate for the Managed Database instance.
	CaCertificate *string `json:"ca_certificate,omitempty"`
}

// NewGetDatabasesMysqlInstanceSsl200Response instantiates a new GetDatabasesMysqlInstanceSsl200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetDatabasesMysqlInstanceSsl200Response() *GetDatabasesMysqlInstanceSsl200Response {
	this := GetDatabasesMysqlInstanceSsl200Response{}
	return &this
}

// NewGetDatabasesMysqlInstanceSsl200ResponseWithDefaults instantiates a new GetDatabasesMysqlInstanceSsl200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetDatabasesMysqlInstanceSsl200ResponseWithDefaults() *GetDatabasesMysqlInstanceSsl200Response {
	this := GetDatabasesMysqlInstanceSsl200Response{}
	return &this
}

// GetCaCertificate returns the CaCertificate field value if set, zero value otherwise.
func (o *GetDatabasesMysqlInstanceSsl200Response) GetCaCertificate() string {
	if o == nil || IsNil(o.CaCertificate) {
		var ret string
		return ret
	}
	return *o.CaCertificate
}

// GetCaCertificateOk returns a tuple with the CaCertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetDatabasesMysqlInstanceSsl200Response) GetCaCertificateOk() (*string, bool) {
	if o == nil || IsNil(o.CaCertificate) {
		return nil, false
	}
	return o.CaCertificate, true
}

// HasCaCertificate returns a boolean if a field has been set.
func (o *GetDatabasesMysqlInstanceSsl200Response) HasCaCertificate() bool {
	if o != nil && !IsNil(o.CaCertificate) {
		return true
	}

	return false
}

// SetCaCertificate gets a reference to the given string and assigns it to the CaCertificate field.
func (o *GetDatabasesMysqlInstanceSsl200Response) SetCaCertificate(v string) {
	o.CaCertificate = &v
}

func (o GetDatabasesMysqlInstanceSsl200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetDatabasesMysqlInstanceSsl200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CaCertificate) {
		toSerialize["ca_certificate"] = o.CaCertificate
	}
	return toSerialize, nil
}

type NullableGetDatabasesMysqlInstanceSsl200Response struct {
	value *GetDatabasesMysqlInstanceSsl200Response
	isSet bool
}

func (v NullableGetDatabasesMysqlInstanceSsl200Response) Get() *GetDatabasesMysqlInstanceSsl200Response {
	return v.value
}

func (v *NullableGetDatabasesMysqlInstanceSsl200Response) Set(val *GetDatabasesMysqlInstanceSsl200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetDatabasesMysqlInstanceSsl200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetDatabasesMysqlInstanceSsl200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetDatabasesMysqlInstanceSsl200Response(val *GetDatabasesMysqlInstanceSsl200Response) *NullableGetDatabasesMysqlInstanceSsl200Response {
	return &NullableGetDatabasesMysqlInstanceSsl200Response{value: val, isSet: true}
}

func (v NullableGetDatabasesMysqlInstanceSsl200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetDatabasesMysqlInstanceSsl200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


