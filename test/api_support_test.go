/*
Linode API

Testing SupportAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_SupportAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SupportAPIService GetTicket", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var ticketId int32

		resp, httpRes, err := apiClient.SupportAPI.GetTicket(context.Background(), apiVersion, ticketId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SupportAPIService GetTicketReplies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var ticketId int32

		resp, httpRes, err := apiClient.SupportAPI.GetTicketReplies(context.Background(), apiVersion, ticketId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SupportAPIService GetTickets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string

		resp, httpRes, err := apiClient.SupportAPI.GetTickets(context.Background(), apiVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SupportAPIService PostCloseTicket", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var ticketId int32

		resp, httpRes, err := apiClient.SupportAPI.PostCloseTicket(context.Background(), apiVersion, ticketId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SupportAPIService PostTicket", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string

		resp, httpRes, err := apiClient.SupportAPI.PostTicket(context.Background(), apiVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SupportAPIService PostTicketAttachment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var ticketId int32

		resp, httpRes, err := apiClient.SupportAPI.PostTicketAttachment(context.Background(), apiVersion, ticketId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SupportAPIService PostTicketReply", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var ticketId int32

		resp, httpRes, err := apiClient.SupportAPI.PostTicketReply(context.Background(), apiVersion, ticketId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
