/*
Linode API

Testing NetworkingAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_NetworkingAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test NetworkingAPIService DeleteFirewall", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var firewallId int32

		resp, httpRes, err := apiClient.NetworkingAPI.DeleteFirewall(context.Background(), apiVersion, firewallId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkingAPIService DeleteFirewallDevice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var firewallId int32
		var deviceId int32

		resp, httpRes, err := apiClient.NetworkingAPI.DeleteFirewallDevice(context.Background(), apiVersion, firewallId, deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkingAPIService DeleteIpv6Range", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var range_ string

		resp, httpRes, err := apiClient.NetworkingAPI.DeleteIpv6Range(context.Background(), apiVersion, range_).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkingAPIService GetFirewall", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var firewallId int32

		resp, httpRes, err := apiClient.NetworkingAPI.GetFirewall(context.Background(), apiVersion, firewallId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkingAPIService GetFirewallDevice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var firewallId int32
		var deviceId int32

		resp, httpRes, err := apiClient.NetworkingAPI.GetFirewallDevice(context.Background(), apiVersion, firewallId, deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkingAPIService GetFirewallDevices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var firewallId int32

		resp, httpRes, err := apiClient.NetworkingAPI.GetFirewallDevices(context.Background(), apiVersion, firewallId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkingAPIService GetFirewallRuleVersion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var firewallId int32
		var version int32

		resp, httpRes, err := apiClient.NetworkingAPI.GetFirewallRuleVersion(context.Background(), apiVersion, firewallId, version).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkingAPIService GetFirewallRuleVersions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var firewallId int32

		resp, httpRes, err := apiClient.NetworkingAPI.GetFirewallRuleVersions(context.Background(), apiVersion, firewallId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkingAPIService GetFirewallRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var firewallId int32

		resp, httpRes, err := apiClient.NetworkingAPI.GetFirewallRules(context.Background(), apiVersion, firewallId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkingAPIService GetFirewalls", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string

		resp, httpRes, err := apiClient.NetworkingAPI.GetFirewalls(context.Background(), apiVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkingAPIService GetIp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var address string

		resp, httpRes, err := apiClient.NetworkingAPI.GetIp(context.Background(), apiVersion, address).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkingAPIService GetIps", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string

		resp, httpRes, err := apiClient.NetworkingAPI.GetIps(context.Background(), apiVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkingAPIService GetIpv6Pools", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string

		resp, httpRes, err := apiClient.NetworkingAPI.GetIpv6Pools(context.Background(), apiVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkingAPIService GetIpv6Range", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var range_ string

		resp, httpRes, err := apiClient.NetworkingAPI.GetIpv6Range(context.Background(), apiVersion, range_).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkingAPIService GetIpv6Ranges", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string

		resp, httpRes, err := apiClient.NetworkingAPI.GetIpv6Ranges(context.Background(), apiVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkingAPIService GetVlans", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string

		resp, httpRes, err := apiClient.NetworkingAPI.GetVlans(context.Background(), apiVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkingAPIService PostAllocateIp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string

		resp, httpRes, err := apiClient.NetworkingAPI.PostAllocateIp(context.Background(), apiVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkingAPIService PostAssignIps", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string

		resp, httpRes, err := apiClient.NetworkingAPI.PostAssignIps(context.Background(), apiVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkingAPIService PostAssignIpv4s", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string

		resp, httpRes, err := apiClient.NetworkingAPI.PostAssignIpv4s(context.Background(), apiVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkingAPIService PostFirewallDevice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var firewallId int32

		resp, httpRes, err := apiClient.NetworkingAPI.PostFirewallDevice(context.Background(), apiVersion, firewallId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkingAPIService PostFirewalls", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string

		resp, httpRes, err := apiClient.NetworkingAPI.PostFirewalls(context.Background(), apiVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkingAPIService PostIpv6Range", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string

		resp, httpRes, err := apiClient.NetworkingAPI.PostIpv6Range(context.Background(), apiVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkingAPIService PostShareIps", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string

		resp, httpRes, err := apiClient.NetworkingAPI.PostShareIps(context.Background(), apiVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkingAPIService PostShareIpv4s", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string

		resp, httpRes, err := apiClient.NetworkingAPI.PostShareIpv4s(context.Background(), apiVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkingAPIService PutFirewall", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var firewallId int32

		resp, httpRes, err := apiClient.NetworkingAPI.PutFirewall(context.Background(), apiVersion, firewallId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkingAPIService PutFirewallRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var firewallId int32

		resp, httpRes, err := apiClient.NetworkingAPI.PutFirewallRules(context.Background(), apiVersion, firewallId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworkingAPIService PutIp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var address string

		resp, httpRes, err := apiClient.NetworkingAPI.PutIp(context.Background(), apiVersion, address).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
