/*
Linode API

[Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

API version: 4.189.2
Contact: support@linode.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PostImageRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostImageRequest{}

// PostImageRequest struct for PostImageRequest
type PostImageRequest struct {
	// Whether this image supports [cloud-init](https://www.linode.com/docs/guides/write-files-with-cloud-init/).
	CloudInit *bool `json:"cloud_init,omitempty"`
	// A detailed description of this image.
	Description *string `json:"description,omitempty"`
	// The ID of the target Linode disk for this image.
	DiskId int32 `json:"disk_id"`
	// The short title for this image. If not provided, the disk's current label is used.
	Label *string `json:"label,omitempty"`
	// Tags used for organizational purposes. A tag can be from 3 to 100 characters long, and an image can have a maximum of 500 total tags.
	Tags []string `json:"tags,omitempty"`
}

type _PostImageRequest PostImageRequest

// NewPostImageRequest instantiates a new PostImageRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostImageRequest(diskId int32) *PostImageRequest {
	this := PostImageRequest{}
	this.DiskId = diskId
	return &this
}

// NewPostImageRequestWithDefaults instantiates a new PostImageRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostImageRequestWithDefaults() *PostImageRequest {
	this := PostImageRequest{}
	return &this
}

// GetCloudInit returns the CloudInit field value if set, zero value otherwise.
func (o *PostImageRequest) GetCloudInit() bool {
	if o == nil || IsNil(o.CloudInit) {
		var ret bool
		return ret
	}
	return *o.CloudInit
}

// GetCloudInitOk returns a tuple with the CloudInit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostImageRequest) GetCloudInitOk() (*bool, bool) {
	if o == nil || IsNil(o.CloudInit) {
		return nil, false
	}
	return o.CloudInit, true
}

// HasCloudInit returns a boolean if a field has been set.
func (o *PostImageRequest) HasCloudInit() bool {
	if o != nil && !IsNil(o.CloudInit) {
		return true
	}

	return false
}

// SetCloudInit gets a reference to the given bool and assigns it to the CloudInit field.
func (o *PostImageRequest) SetCloudInit(v bool) {
	o.CloudInit = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PostImageRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostImageRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PostImageRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PostImageRequest) SetDescription(v string) {
	o.Description = &v
}

// GetDiskId returns the DiskId field value
func (o *PostImageRequest) GetDiskId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DiskId
}

// GetDiskIdOk returns a tuple with the DiskId field value
// and a boolean to check if the value has been set.
func (o *PostImageRequest) GetDiskIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DiskId, true
}

// SetDiskId sets field value
func (o *PostImageRequest) SetDiskId(v int32) {
	o.DiskId = v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *PostImageRequest) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostImageRequest) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *PostImageRequest) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *PostImageRequest) SetLabel(v string) {
	o.Label = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *PostImageRequest) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostImageRequest) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *PostImageRequest) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *PostImageRequest) SetTags(v []string) {
	o.Tags = v
}

func (o PostImageRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostImageRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CloudInit) {
		toSerialize["cloud_init"] = o.CloudInit
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["disk_id"] = o.DiskId
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

func (o *PostImageRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"disk_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPostImageRequest := _PostImageRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPostImageRequest)

	if err != nil {
		return err
	}

	*o = PostImageRequest(varPostImageRequest)

	return err
}

type NullablePostImageRequest struct {
	value *PostImageRequest
	isSet bool
}

func (v NullablePostImageRequest) Get() *PostImageRequest {
	return v.value
}

func (v *NullablePostImageRequest) Set(val *PostImageRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePostImageRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePostImageRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostImageRequest(val *PostImageRequest) *NullablePostImageRequest {
	return &NullablePostImageRequest{value: val, isSet: true}
}

func (v NullablePostImageRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostImageRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


