/*
Linode API

[Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

API version: 4.189.2
Contact: support@linode.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PostResizeDiskRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostResizeDiskRequest{}

// PostResizeDiskRequest struct for PostResizeDiskRequest
type PostResizeDiskRequest struct {
	// The desired size, in MB, of the disk.
	Size int32 `json:"size"`
}

type _PostResizeDiskRequest PostResizeDiskRequest

// NewPostResizeDiskRequest instantiates a new PostResizeDiskRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostResizeDiskRequest(size int32) *PostResizeDiskRequest {
	this := PostResizeDiskRequest{}
	this.Size = size
	return &this
}

// NewPostResizeDiskRequestWithDefaults instantiates a new PostResizeDiskRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostResizeDiskRequestWithDefaults() *PostResizeDiskRequest {
	this := PostResizeDiskRequest{}
	return &this
}

// GetSize returns the Size field value
func (o *PostResizeDiskRequest) GetSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *PostResizeDiskRequest) GetSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *PostResizeDiskRequest) SetSize(v int32) {
	o.Size = v
}

func (o PostResizeDiskRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostResizeDiskRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["size"] = o.Size
	return toSerialize, nil
}

func (o *PostResizeDiskRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"size",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPostResizeDiskRequest := _PostResizeDiskRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPostResizeDiskRequest)

	if err != nil {
		return err
	}

	*o = PostResizeDiskRequest(varPostResizeDiskRequest)

	return err
}

type NullablePostResizeDiskRequest struct {
	value *PostResizeDiskRequest
	isSet bool
}

func (v NullablePostResizeDiskRequest) Get() *PostResizeDiskRequest {
	return v.value
}

func (v *NullablePostResizeDiskRequest) Set(val *PostResizeDiskRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePostResizeDiskRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePostResizeDiskRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostResizeDiskRequest(val *PostResizeDiskRequest) *NullablePostResizeDiskRequest {
	return &NullablePostResizeDiskRequest{value: val, isSet: true}
}

func (v NullablePostResizeDiskRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostResizeDiskRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


