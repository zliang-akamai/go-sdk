/*
Linode API

[Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

API version: 4.189.2
Contact: support@linode.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PostUploadImageRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostUploadImageRequest{}

// PostUploadImageRequest struct for PostUploadImageRequest
type PostUploadImageRequest struct {
	// Whether the uploaded Image supports cloud-init.
	CloudInit *bool `json:"cloud_init,omitempty"`
	// Description for the uploaded image.
	Description *string `json:"description,omitempty"`
	// Label for the uploaded image.
	Label string `json:"label"`
	// The region to upload to. Once uploaded, the image can be used in any region.
	Region string `json:"region"`
	// Tags you can use to organize images. A tag can be from 3 to 100 characters long, and an image can have a maximum of 500 total tags.
	Tags []string `json:"tags,omitempty"`
}

type _PostUploadImageRequest PostUploadImageRequest

// NewPostUploadImageRequest instantiates a new PostUploadImageRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostUploadImageRequest(label string, region string) *PostUploadImageRequest {
	this := PostUploadImageRequest{}
	this.Label = label
	this.Region = region
	return &this
}

// NewPostUploadImageRequestWithDefaults instantiates a new PostUploadImageRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostUploadImageRequestWithDefaults() *PostUploadImageRequest {
	this := PostUploadImageRequest{}
	return &this
}

// GetCloudInit returns the CloudInit field value if set, zero value otherwise.
func (o *PostUploadImageRequest) GetCloudInit() bool {
	if o == nil || IsNil(o.CloudInit) {
		var ret bool
		return ret
	}
	return *o.CloudInit
}

// GetCloudInitOk returns a tuple with the CloudInit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostUploadImageRequest) GetCloudInitOk() (*bool, bool) {
	if o == nil || IsNil(o.CloudInit) {
		return nil, false
	}
	return o.CloudInit, true
}

// HasCloudInit returns a boolean if a field has been set.
func (o *PostUploadImageRequest) HasCloudInit() bool {
	if o != nil && !IsNil(o.CloudInit) {
		return true
	}

	return false
}

// SetCloudInit gets a reference to the given bool and assigns it to the CloudInit field.
func (o *PostUploadImageRequest) SetCloudInit(v bool) {
	o.CloudInit = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PostUploadImageRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostUploadImageRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PostUploadImageRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PostUploadImageRequest) SetDescription(v string) {
	o.Description = &v
}

// GetLabel returns the Label field value
func (o *PostUploadImageRequest) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *PostUploadImageRequest) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *PostUploadImageRequest) SetLabel(v string) {
	o.Label = v
}

// GetRegion returns the Region field value
func (o *PostUploadImageRequest) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *PostUploadImageRequest) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *PostUploadImageRequest) SetRegion(v string) {
	o.Region = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *PostUploadImageRequest) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostUploadImageRequest) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *PostUploadImageRequest) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *PostUploadImageRequest) SetTags(v []string) {
	o.Tags = v
}

func (o PostUploadImageRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostUploadImageRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CloudInit) {
		toSerialize["cloud_init"] = o.CloudInit
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["label"] = o.Label
	toSerialize["region"] = o.Region
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

func (o *PostUploadImageRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"label",
		"region",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPostUploadImageRequest := _PostUploadImageRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPostUploadImageRequest)

	if err != nil {
		return err
	}

	*o = PostUploadImageRequest(varPostUploadImageRequest)

	return err
}

type NullablePostUploadImageRequest struct {
	value *PostUploadImageRequest
	isSet bool
}

func (v NullablePostUploadImageRequest) Get() *PostUploadImageRequest {
	return v.value
}

func (v *NullablePostUploadImageRequest) Set(val *PostUploadImageRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePostUploadImageRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePostUploadImageRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostUploadImageRequest(val *PostUploadImageRequest) *NullablePostUploadImageRequest {
	return &NullablePostUploadImageRequest{value: val, isSet: true}
}

func (v NullablePostUploadImageRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostUploadImageRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


