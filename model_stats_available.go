/*
Linode API

[Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

API version: 4.189.2
Contact: support@linode.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the StatsAvailable type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StatsAvailable{}

// StatsAvailable A collection of graph data returned for managed stats.
type StatsAvailable struct {
	// CPU usage stats from the last 24 hours.
	Cpu []StatsAvailableCpuInner `json:"cpu,omitempty"`
	// Disk usage stats from the last 24 hours.
	Disk []StatsAvailableCpuInner `json:"disk,omitempty"`
	// Inbound network traffic stats from the last 24 hours.
	NetIn []StatsAvailableCpuInner `json:"net_in,omitempty"`
	// Outbound network traffic stats from the last 24 hours.
	NetOut []StatsAvailableCpuInner `json:"net_out,omitempty"`
	// Swap usage stats from the last 24 hours.
	Swap []StatsAvailableCpuInner `json:"swap,omitempty"`
}

// NewStatsAvailable instantiates a new StatsAvailable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatsAvailable() *StatsAvailable {
	this := StatsAvailable{}
	return &this
}

// NewStatsAvailableWithDefaults instantiates a new StatsAvailable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatsAvailableWithDefaults() *StatsAvailable {
	this := StatsAvailable{}
	return &this
}

// GetCpu returns the Cpu field value if set, zero value otherwise.
func (o *StatsAvailable) GetCpu() []StatsAvailableCpuInner {
	if o == nil || IsNil(o.Cpu) {
		var ret []StatsAvailableCpuInner
		return ret
	}
	return o.Cpu
}

// GetCpuOk returns a tuple with the Cpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatsAvailable) GetCpuOk() ([]StatsAvailableCpuInner, bool) {
	if o == nil || IsNil(o.Cpu) {
		return nil, false
	}
	return o.Cpu, true
}

// HasCpu returns a boolean if a field has been set.
func (o *StatsAvailable) HasCpu() bool {
	if o != nil && !IsNil(o.Cpu) {
		return true
	}

	return false
}

// SetCpu gets a reference to the given []StatsAvailableCpuInner and assigns it to the Cpu field.
func (o *StatsAvailable) SetCpu(v []StatsAvailableCpuInner) {
	o.Cpu = v
}

// GetDisk returns the Disk field value if set, zero value otherwise.
func (o *StatsAvailable) GetDisk() []StatsAvailableCpuInner {
	if o == nil || IsNil(o.Disk) {
		var ret []StatsAvailableCpuInner
		return ret
	}
	return o.Disk
}

// GetDiskOk returns a tuple with the Disk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatsAvailable) GetDiskOk() ([]StatsAvailableCpuInner, bool) {
	if o == nil || IsNil(o.Disk) {
		return nil, false
	}
	return o.Disk, true
}

// HasDisk returns a boolean if a field has been set.
func (o *StatsAvailable) HasDisk() bool {
	if o != nil && !IsNil(o.Disk) {
		return true
	}

	return false
}

// SetDisk gets a reference to the given []StatsAvailableCpuInner and assigns it to the Disk field.
func (o *StatsAvailable) SetDisk(v []StatsAvailableCpuInner) {
	o.Disk = v
}

// GetNetIn returns the NetIn field value if set, zero value otherwise.
func (o *StatsAvailable) GetNetIn() []StatsAvailableCpuInner {
	if o == nil || IsNil(o.NetIn) {
		var ret []StatsAvailableCpuInner
		return ret
	}
	return o.NetIn
}

// GetNetInOk returns a tuple with the NetIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatsAvailable) GetNetInOk() ([]StatsAvailableCpuInner, bool) {
	if o == nil || IsNil(o.NetIn) {
		return nil, false
	}
	return o.NetIn, true
}

// HasNetIn returns a boolean if a field has been set.
func (o *StatsAvailable) HasNetIn() bool {
	if o != nil && !IsNil(o.NetIn) {
		return true
	}

	return false
}

// SetNetIn gets a reference to the given []StatsAvailableCpuInner and assigns it to the NetIn field.
func (o *StatsAvailable) SetNetIn(v []StatsAvailableCpuInner) {
	o.NetIn = v
}

// GetNetOut returns the NetOut field value if set, zero value otherwise.
func (o *StatsAvailable) GetNetOut() []StatsAvailableCpuInner {
	if o == nil || IsNil(o.NetOut) {
		var ret []StatsAvailableCpuInner
		return ret
	}
	return o.NetOut
}

// GetNetOutOk returns a tuple with the NetOut field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatsAvailable) GetNetOutOk() ([]StatsAvailableCpuInner, bool) {
	if o == nil || IsNil(o.NetOut) {
		return nil, false
	}
	return o.NetOut, true
}

// HasNetOut returns a boolean if a field has been set.
func (o *StatsAvailable) HasNetOut() bool {
	if o != nil && !IsNil(o.NetOut) {
		return true
	}

	return false
}

// SetNetOut gets a reference to the given []StatsAvailableCpuInner and assigns it to the NetOut field.
func (o *StatsAvailable) SetNetOut(v []StatsAvailableCpuInner) {
	o.NetOut = v
}

// GetSwap returns the Swap field value if set, zero value otherwise.
func (o *StatsAvailable) GetSwap() []StatsAvailableCpuInner {
	if o == nil || IsNil(o.Swap) {
		var ret []StatsAvailableCpuInner
		return ret
	}
	return o.Swap
}

// GetSwapOk returns a tuple with the Swap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatsAvailable) GetSwapOk() ([]StatsAvailableCpuInner, bool) {
	if o == nil || IsNil(o.Swap) {
		return nil, false
	}
	return o.Swap, true
}

// HasSwap returns a boolean if a field has been set.
func (o *StatsAvailable) HasSwap() bool {
	if o != nil && !IsNil(o.Swap) {
		return true
	}

	return false
}

// SetSwap gets a reference to the given []StatsAvailableCpuInner and assigns it to the Swap field.
func (o *StatsAvailable) SetSwap(v []StatsAvailableCpuInner) {
	o.Swap = v
}

func (o StatsAvailable) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StatsAvailable) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cpu) {
		toSerialize["cpu"] = o.Cpu
	}
	if !IsNil(o.Disk) {
		toSerialize["disk"] = o.Disk
	}
	if !IsNil(o.NetIn) {
		toSerialize["net_in"] = o.NetIn
	}
	if !IsNil(o.NetOut) {
		toSerialize["net_out"] = o.NetOut
	}
	if !IsNil(o.Swap) {
		toSerialize["swap"] = o.Swap
	}
	return toSerialize, nil
}

type NullableStatsAvailable struct {
	value *StatsAvailable
	isSet bool
}

func (v NullableStatsAvailable) Get() *StatsAvailable {
	return v.value
}

func (v *NullableStatsAvailable) Set(val *StatsAvailable) {
	v.value = val
	v.isSet = true
}

func (v NullableStatsAvailable) IsSet() bool {
	return v.isSet
}

func (v *NullableStatsAvailable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatsAvailable(val *StatsAvailable) *NullableStatsAvailable {
	return &NullableStatsAvailable{value: val, isSet: true}
}

func (v NullableStatsAvailable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatsAvailable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


