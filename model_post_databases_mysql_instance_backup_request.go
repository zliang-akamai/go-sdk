/*
Linode API

[Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

API version: 4.189.2
Contact: support@linode.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PostDatabasesMysqlInstanceBackupRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostDatabasesMysqlInstanceBackupRequest{}

// PostDatabasesMysqlInstanceBackupRequest Managed Database request object for snapshot backup.
type PostDatabasesMysqlInstanceBackupRequest struct {
	// The label for the Database snapshot backup.  - Can only contain ASCII letters, numbers, and underscores (`_`). - Must be unique among other backup labels for this Database.
	Label string `json:"label"`
	// The Database cluster target. If the Database is a high availability cluster, choosing `secondary` creates a snapshot backup of a replica node.
	Target *string `json:"target,omitempty"`
}

type _PostDatabasesMysqlInstanceBackupRequest PostDatabasesMysqlInstanceBackupRequest

// NewPostDatabasesMysqlInstanceBackupRequest instantiates a new PostDatabasesMysqlInstanceBackupRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostDatabasesMysqlInstanceBackupRequest(label string) *PostDatabasesMysqlInstanceBackupRequest {
	this := PostDatabasesMysqlInstanceBackupRequest{}
	this.Label = label
	var target string = "primary"
	this.Target = &target
	return &this
}

// NewPostDatabasesMysqlInstanceBackupRequestWithDefaults instantiates a new PostDatabasesMysqlInstanceBackupRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostDatabasesMysqlInstanceBackupRequestWithDefaults() *PostDatabasesMysqlInstanceBackupRequest {
	this := PostDatabasesMysqlInstanceBackupRequest{}
	var target string = "primary"
	this.Target = &target
	return &this
}

// GetLabel returns the Label field value
func (o *PostDatabasesMysqlInstanceBackupRequest) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *PostDatabasesMysqlInstanceBackupRequest) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *PostDatabasesMysqlInstanceBackupRequest) SetLabel(v string) {
	o.Label = v
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *PostDatabasesMysqlInstanceBackupRequest) GetTarget() string {
	if o == nil || IsNil(o.Target) {
		var ret string
		return ret
	}
	return *o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostDatabasesMysqlInstanceBackupRequest) GetTargetOk() (*string, bool) {
	if o == nil || IsNil(o.Target) {
		return nil, false
	}
	return o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *PostDatabasesMysqlInstanceBackupRequest) HasTarget() bool {
	if o != nil && !IsNil(o.Target) {
		return true
	}

	return false
}

// SetTarget gets a reference to the given string and assigns it to the Target field.
func (o *PostDatabasesMysqlInstanceBackupRequest) SetTarget(v string) {
	o.Target = &v
}

func (o PostDatabasesMysqlInstanceBackupRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostDatabasesMysqlInstanceBackupRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["label"] = o.Label
	if !IsNil(o.Target) {
		toSerialize["target"] = o.Target
	}
	return toSerialize, nil
}

func (o *PostDatabasesMysqlInstanceBackupRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"label",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPostDatabasesMysqlInstanceBackupRequest := _PostDatabasesMysqlInstanceBackupRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPostDatabasesMysqlInstanceBackupRequest)

	if err != nil {
		return err
	}

	*o = PostDatabasesMysqlInstanceBackupRequest(varPostDatabasesMysqlInstanceBackupRequest)

	return err
}

type NullablePostDatabasesMysqlInstanceBackupRequest struct {
	value *PostDatabasesMysqlInstanceBackupRequest
	isSet bool
}

func (v NullablePostDatabasesMysqlInstanceBackupRequest) Get() *PostDatabasesMysqlInstanceBackupRequest {
	return v.value
}

func (v *NullablePostDatabasesMysqlInstanceBackupRequest) Set(val *PostDatabasesMysqlInstanceBackupRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePostDatabasesMysqlInstanceBackupRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePostDatabasesMysqlInstanceBackupRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostDatabasesMysqlInstanceBackupRequest(val *PostDatabasesMysqlInstanceBackupRequest) *NullablePostDatabasesMysqlInstanceBackupRequest {
	return &NullablePostDatabasesMysqlInstanceBackupRequest{value: val, isSet: true}
}

func (v NullablePostDatabasesMysqlInstanceBackupRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostDatabasesMysqlInstanceBackupRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


