/*
Linode API

Testing PlacementGroupsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_PlacementGroupsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PlacementGroupsAPIService DeletePlacementGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var groupId int32

		resp, httpRes, err := apiClient.PlacementGroupsAPI.DeletePlacementGroup(context.Background(), apiVersion, groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlacementGroupsAPIService GetPlacementGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var groupId int32

		resp, httpRes, err := apiClient.PlacementGroupsAPI.GetPlacementGroup(context.Background(), apiVersion, groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlacementGroupsAPIService GetPlacementGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string

		resp, httpRes, err := apiClient.PlacementGroupsAPI.GetPlacementGroups(context.Background(), apiVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlacementGroupsAPIService PostGroupAddLinode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var groupId int32

		resp, httpRes, err := apiClient.PlacementGroupsAPI.PostGroupAddLinode(context.Background(), apiVersion, groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlacementGroupsAPIService PostGroupUnassign", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var groupId int32

		resp, httpRes, err := apiClient.PlacementGroupsAPI.PostGroupUnassign(context.Background(), apiVersion, groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlacementGroupsAPIService PostPlacementGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string

		resp, httpRes, err := apiClient.PlacementGroupsAPI.PostPlacementGroup(context.Background(), apiVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlacementGroupsAPIService PutPlacementGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var groupId int32

		resp, httpRes, err := apiClient.PlacementGroupsAPI.PutPlacementGroup(context.Background(), apiVersion, groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
