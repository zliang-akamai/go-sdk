/*
Linode API

[Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

API version: 4.189.2
Contact: support@linode.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Agreements type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Agreements{}

// Agreements Acknowledgment status for agreements on your account. When acknowledging any agreements, set them to `true` and omit any remainders.
type Agreements struct {
	// The acknowledgement status for the [cross-border data transfer](https://www.akamai.com/legal/compliance/privacy-trust-center/cross-border-data-transfer-statement) agreement.
	EuModel *bool `json:"eu_model,omitempty"`
	// The acknowledgement status for Akamai's [master service agreement](https://www.linode.com/legal-msa/).
	MasterServiceAgreement *bool `json:"master_service_agreement,omitempty"`
	// The acknowledgement status for Akamai's [privacy statement](https://www.akamai.com/legal/privacy-statement).
	PrivacyPolicy *bool `json:"privacy_policy,omitempty"`
}

// NewAgreements instantiates a new Agreements object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAgreements() *Agreements {
	this := Agreements{}
	return &this
}

// NewAgreementsWithDefaults instantiates a new Agreements object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAgreementsWithDefaults() *Agreements {
	this := Agreements{}
	return &this
}

// GetEuModel returns the EuModel field value if set, zero value otherwise.
func (o *Agreements) GetEuModel() bool {
	if o == nil || IsNil(o.EuModel) {
		var ret bool
		return ret
	}
	return *o.EuModel
}

// GetEuModelOk returns a tuple with the EuModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Agreements) GetEuModelOk() (*bool, bool) {
	if o == nil || IsNil(o.EuModel) {
		return nil, false
	}
	return o.EuModel, true
}

// HasEuModel returns a boolean if a field has been set.
func (o *Agreements) HasEuModel() bool {
	if o != nil && !IsNil(o.EuModel) {
		return true
	}

	return false
}

// SetEuModel gets a reference to the given bool and assigns it to the EuModel field.
func (o *Agreements) SetEuModel(v bool) {
	o.EuModel = &v
}

// GetMasterServiceAgreement returns the MasterServiceAgreement field value if set, zero value otherwise.
func (o *Agreements) GetMasterServiceAgreement() bool {
	if o == nil || IsNil(o.MasterServiceAgreement) {
		var ret bool
		return ret
	}
	return *o.MasterServiceAgreement
}

// GetMasterServiceAgreementOk returns a tuple with the MasterServiceAgreement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Agreements) GetMasterServiceAgreementOk() (*bool, bool) {
	if o == nil || IsNil(o.MasterServiceAgreement) {
		return nil, false
	}
	return o.MasterServiceAgreement, true
}

// HasMasterServiceAgreement returns a boolean if a field has been set.
func (o *Agreements) HasMasterServiceAgreement() bool {
	if o != nil && !IsNil(o.MasterServiceAgreement) {
		return true
	}

	return false
}

// SetMasterServiceAgreement gets a reference to the given bool and assigns it to the MasterServiceAgreement field.
func (o *Agreements) SetMasterServiceAgreement(v bool) {
	o.MasterServiceAgreement = &v
}

// GetPrivacyPolicy returns the PrivacyPolicy field value if set, zero value otherwise.
func (o *Agreements) GetPrivacyPolicy() bool {
	if o == nil || IsNil(o.PrivacyPolicy) {
		var ret bool
		return ret
	}
	return *o.PrivacyPolicy
}

// GetPrivacyPolicyOk returns a tuple with the PrivacyPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Agreements) GetPrivacyPolicyOk() (*bool, bool) {
	if o == nil || IsNil(o.PrivacyPolicy) {
		return nil, false
	}
	return o.PrivacyPolicy, true
}

// HasPrivacyPolicy returns a boolean if a field has been set.
func (o *Agreements) HasPrivacyPolicy() bool {
	if o != nil && !IsNil(o.PrivacyPolicy) {
		return true
	}

	return false
}

// SetPrivacyPolicy gets a reference to the given bool and assigns it to the PrivacyPolicy field.
func (o *Agreements) SetPrivacyPolicy(v bool) {
	o.PrivacyPolicy = &v
}

func (o Agreements) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Agreements) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EuModel) {
		toSerialize["eu_model"] = o.EuModel
	}
	if !IsNil(o.MasterServiceAgreement) {
		toSerialize["master_service_agreement"] = o.MasterServiceAgreement
	}
	if !IsNil(o.PrivacyPolicy) {
		toSerialize["privacy_policy"] = o.PrivacyPolicy
	}
	return toSerialize, nil
}

type NullableAgreements struct {
	value *Agreements
	isSet bool
}

func (v NullableAgreements) Get() *Agreements {
	return v.value
}

func (v *NullableAgreements) Set(val *Agreements) {
	v.value = val
	v.isSet = true
}

func (v NullableAgreements) IsSet() bool {
	return v.isSet
}

func (v *NullableAgreements) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAgreements(val *Agreements) *NullableAgreements {
	return &NullableAgreements{value: val, isSet: true}
}

func (v NullableAgreements) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAgreements) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


