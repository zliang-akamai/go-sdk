/*
Linode API

[Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

API version: 4.189.2
Contact: support@linode.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PostDatabasesPostgreSqlInstancesRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostDatabasesPostgreSqlInstancesRequest{}

// PostDatabasesPostgreSqlInstancesRequest Managed PostgreSQL Database request object.
type PostDatabasesPostgreSqlInstancesRequest struct {
	// A list of IP addresses that can access the Managed Database. Each item can be a single IP address or a range in CIDR format.  By default, this is an empty array (`[]`), which blocks all connections (both public and private) to the Managed Database.  If `0.0.0.0/0` is a value in this list, then all IP addresses can access the Managed Database.
	AllowList []string `json:"allow_list,omitempty"`
	// The number of Linode Instance nodes deployed to the Managed Database.  Choosing 3 nodes creates a high availability cluster consisting of 1 primary node and 2 replica nodes.
	ClusterSize *int32 `json:"cluster_size,omitempty"`
	// Whether the Managed Databases is encrypted.
	Encrypted *bool `json:"encrypted,omitempty"`
	// The Managed Database engine in engine/version format.
	Engine string `json:"engine"`
	// A unique, user-defined string referring to the Managed Database.
	Label string `json:"label"`
	// The [Region](https://techdocs.akamai.com/linode-api/reference/get-regions) ID for the Managed Database.
	Region string `json:"region"`
	// The synchronization level of the replicating server.  Must be `local` or `off` for the `asynch` replication type.
	ReplicationCommitType *string `json:"replication_commit_type,omitempty"`
	// The replication method used for the Managed Database.  Defaults to `none` for a single cluster and `asynch` for a high availability cluster.  Must be `none` for a single node cluster.  Must be `asynch` for a high availability cluster.
	ReplicationType *string `json:"replication_type,omitempty"`
	// Whether to require SSL credentials to establish a connection to the Managed Database.  Run the [Get managed PostgreSQL database credentials](https://techdocs.akamai.com/linode-api/reference/get-databases-postgre-sql-instance-credentials) operation for access information.
	SslConnection *bool `json:"ssl_connection,omitempty"`
	// The Linode Instance type used by the Managed Database for its nodes.
	Type string `json:"type"`
}

type _PostDatabasesPostgreSqlInstancesRequest PostDatabasesPostgreSqlInstancesRequest

// NewPostDatabasesPostgreSqlInstancesRequest instantiates a new PostDatabasesPostgreSqlInstancesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostDatabasesPostgreSqlInstancesRequest(engine string, label string, region string, type_ string) *PostDatabasesPostgreSqlInstancesRequest {
	this := PostDatabasesPostgreSqlInstancesRequest{}
	var clusterSize int32 = 1
	this.ClusterSize = &clusterSize
	var encrypted bool = false
	this.Encrypted = &encrypted
	this.Engine = engine
	this.Label = label
	this.Region = region
	var replicationCommitType string = "local"
	this.ReplicationCommitType = &replicationCommitType
	var sslConnection bool = true
	this.SslConnection = &sslConnection
	this.Type = type_
	return &this
}

// NewPostDatabasesPostgreSqlInstancesRequestWithDefaults instantiates a new PostDatabasesPostgreSqlInstancesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostDatabasesPostgreSqlInstancesRequestWithDefaults() *PostDatabasesPostgreSqlInstancesRequest {
	this := PostDatabasesPostgreSqlInstancesRequest{}
	var clusterSize int32 = 1
	this.ClusterSize = &clusterSize
	var encrypted bool = false
	this.Encrypted = &encrypted
	var replicationCommitType string = "local"
	this.ReplicationCommitType = &replicationCommitType
	var sslConnection bool = true
	this.SslConnection = &sslConnection
	return &this
}

// GetAllowList returns the AllowList field value if set, zero value otherwise.
func (o *PostDatabasesPostgreSqlInstancesRequest) GetAllowList() []string {
	if o == nil || IsNil(o.AllowList) {
		var ret []string
		return ret
	}
	return o.AllowList
}

// GetAllowListOk returns a tuple with the AllowList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostDatabasesPostgreSqlInstancesRequest) GetAllowListOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowList) {
		return nil, false
	}
	return o.AllowList, true
}

// HasAllowList returns a boolean if a field has been set.
func (o *PostDatabasesPostgreSqlInstancesRequest) HasAllowList() bool {
	if o != nil && !IsNil(o.AllowList) {
		return true
	}

	return false
}

// SetAllowList gets a reference to the given []string and assigns it to the AllowList field.
func (o *PostDatabasesPostgreSqlInstancesRequest) SetAllowList(v []string) {
	o.AllowList = v
}

// GetClusterSize returns the ClusterSize field value if set, zero value otherwise.
func (o *PostDatabasesPostgreSqlInstancesRequest) GetClusterSize() int32 {
	if o == nil || IsNil(o.ClusterSize) {
		var ret int32
		return ret
	}
	return *o.ClusterSize
}

// GetClusterSizeOk returns a tuple with the ClusterSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostDatabasesPostgreSqlInstancesRequest) GetClusterSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.ClusterSize) {
		return nil, false
	}
	return o.ClusterSize, true
}

// HasClusterSize returns a boolean if a field has been set.
func (o *PostDatabasesPostgreSqlInstancesRequest) HasClusterSize() bool {
	if o != nil && !IsNil(o.ClusterSize) {
		return true
	}

	return false
}

// SetClusterSize gets a reference to the given int32 and assigns it to the ClusterSize field.
func (o *PostDatabasesPostgreSqlInstancesRequest) SetClusterSize(v int32) {
	o.ClusterSize = &v
}

// GetEncrypted returns the Encrypted field value if set, zero value otherwise.
func (o *PostDatabasesPostgreSqlInstancesRequest) GetEncrypted() bool {
	if o == nil || IsNil(o.Encrypted) {
		var ret bool
		return ret
	}
	return *o.Encrypted
}

// GetEncryptedOk returns a tuple with the Encrypted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostDatabasesPostgreSqlInstancesRequest) GetEncryptedOk() (*bool, bool) {
	if o == nil || IsNil(o.Encrypted) {
		return nil, false
	}
	return o.Encrypted, true
}

// HasEncrypted returns a boolean if a field has been set.
func (o *PostDatabasesPostgreSqlInstancesRequest) HasEncrypted() bool {
	if o != nil && !IsNil(o.Encrypted) {
		return true
	}

	return false
}

// SetEncrypted gets a reference to the given bool and assigns it to the Encrypted field.
func (o *PostDatabasesPostgreSqlInstancesRequest) SetEncrypted(v bool) {
	o.Encrypted = &v
}

// GetEngine returns the Engine field value
func (o *PostDatabasesPostgreSqlInstancesRequest) GetEngine() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Engine
}

// GetEngineOk returns a tuple with the Engine field value
// and a boolean to check if the value has been set.
func (o *PostDatabasesPostgreSqlInstancesRequest) GetEngineOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Engine, true
}

// SetEngine sets field value
func (o *PostDatabasesPostgreSqlInstancesRequest) SetEngine(v string) {
	o.Engine = v
}

// GetLabel returns the Label field value
func (o *PostDatabasesPostgreSqlInstancesRequest) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *PostDatabasesPostgreSqlInstancesRequest) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *PostDatabasesPostgreSqlInstancesRequest) SetLabel(v string) {
	o.Label = v
}

// GetRegion returns the Region field value
func (o *PostDatabasesPostgreSqlInstancesRequest) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *PostDatabasesPostgreSqlInstancesRequest) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *PostDatabasesPostgreSqlInstancesRequest) SetRegion(v string) {
	o.Region = v
}

// GetReplicationCommitType returns the ReplicationCommitType field value if set, zero value otherwise.
func (o *PostDatabasesPostgreSqlInstancesRequest) GetReplicationCommitType() string {
	if o == nil || IsNil(o.ReplicationCommitType) {
		var ret string
		return ret
	}
	return *o.ReplicationCommitType
}

// GetReplicationCommitTypeOk returns a tuple with the ReplicationCommitType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostDatabasesPostgreSqlInstancesRequest) GetReplicationCommitTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ReplicationCommitType) {
		return nil, false
	}
	return o.ReplicationCommitType, true
}

// HasReplicationCommitType returns a boolean if a field has been set.
func (o *PostDatabasesPostgreSqlInstancesRequest) HasReplicationCommitType() bool {
	if o != nil && !IsNil(o.ReplicationCommitType) {
		return true
	}

	return false
}

// SetReplicationCommitType gets a reference to the given string and assigns it to the ReplicationCommitType field.
func (o *PostDatabasesPostgreSqlInstancesRequest) SetReplicationCommitType(v string) {
	o.ReplicationCommitType = &v
}

// GetReplicationType returns the ReplicationType field value if set, zero value otherwise.
func (o *PostDatabasesPostgreSqlInstancesRequest) GetReplicationType() string {
	if o == nil || IsNil(o.ReplicationType) {
		var ret string
		return ret
	}
	return *o.ReplicationType
}

// GetReplicationTypeOk returns a tuple with the ReplicationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostDatabasesPostgreSqlInstancesRequest) GetReplicationTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ReplicationType) {
		return nil, false
	}
	return o.ReplicationType, true
}

// HasReplicationType returns a boolean if a field has been set.
func (o *PostDatabasesPostgreSqlInstancesRequest) HasReplicationType() bool {
	if o != nil && !IsNil(o.ReplicationType) {
		return true
	}

	return false
}

// SetReplicationType gets a reference to the given string and assigns it to the ReplicationType field.
func (o *PostDatabasesPostgreSqlInstancesRequest) SetReplicationType(v string) {
	o.ReplicationType = &v
}

// GetSslConnection returns the SslConnection field value if set, zero value otherwise.
func (o *PostDatabasesPostgreSqlInstancesRequest) GetSslConnection() bool {
	if o == nil || IsNil(o.SslConnection) {
		var ret bool
		return ret
	}
	return *o.SslConnection
}

// GetSslConnectionOk returns a tuple with the SslConnection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostDatabasesPostgreSqlInstancesRequest) GetSslConnectionOk() (*bool, bool) {
	if o == nil || IsNil(o.SslConnection) {
		return nil, false
	}
	return o.SslConnection, true
}

// HasSslConnection returns a boolean if a field has been set.
func (o *PostDatabasesPostgreSqlInstancesRequest) HasSslConnection() bool {
	if o != nil && !IsNil(o.SslConnection) {
		return true
	}

	return false
}

// SetSslConnection gets a reference to the given bool and assigns it to the SslConnection field.
func (o *PostDatabasesPostgreSqlInstancesRequest) SetSslConnection(v bool) {
	o.SslConnection = &v
}

// GetType returns the Type field value
func (o *PostDatabasesPostgreSqlInstancesRequest) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *PostDatabasesPostgreSqlInstancesRequest) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *PostDatabasesPostgreSqlInstancesRequest) SetType(v string) {
	o.Type = v
}

func (o PostDatabasesPostgreSqlInstancesRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostDatabasesPostgreSqlInstancesRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllowList) {
		toSerialize["allow_list"] = o.AllowList
	}
	if !IsNil(o.ClusterSize) {
		toSerialize["cluster_size"] = o.ClusterSize
	}
	if !IsNil(o.Encrypted) {
		toSerialize["encrypted"] = o.Encrypted
	}
	toSerialize["engine"] = o.Engine
	toSerialize["label"] = o.Label
	toSerialize["region"] = o.Region
	if !IsNil(o.ReplicationCommitType) {
		toSerialize["replication_commit_type"] = o.ReplicationCommitType
	}
	if !IsNil(o.ReplicationType) {
		toSerialize["replication_type"] = o.ReplicationType
	}
	if !IsNil(o.SslConnection) {
		toSerialize["ssl_connection"] = o.SslConnection
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *PostDatabasesPostgreSqlInstancesRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"engine",
		"label",
		"region",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPostDatabasesPostgreSqlInstancesRequest := _PostDatabasesPostgreSqlInstancesRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPostDatabasesPostgreSqlInstancesRequest)

	if err != nil {
		return err
	}

	*o = PostDatabasesPostgreSqlInstancesRequest(varPostDatabasesPostgreSqlInstancesRequest)

	return err
}

type NullablePostDatabasesPostgreSqlInstancesRequest struct {
	value *PostDatabasesPostgreSqlInstancesRequest
	isSet bool
}

func (v NullablePostDatabasesPostgreSqlInstancesRequest) Get() *PostDatabasesPostgreSqlInstancesRequest {
	return v.value
}

func (v *NullablePostDatabasesPostgreSqlInstancesRequest) Set(val *PostDatabasesPostgreSqlInstancesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePostDatabasesPostgreSqlInstancesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePostDatabasesPostgreSqlInstancesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostDatabasesPostgreSqlInstancesRequest(val *PostDatabasesPostgreSqlInstancesRequest) *NullablePostDatabasesPostgreSqlInstancesRequest {
	return &NullablePostDatabasesPostgreSqlInstancesRequest{value: val, isSet: true}
}

func (v NullablePostDatabasesPostgreSqlInstancesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostDatabasesPostgreSqlInstancesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


