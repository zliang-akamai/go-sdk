/*
Linode API

Testing ProfileAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_ProfileAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ProfileAPIService DeletePersonalAccessToken", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var tokenId int32

		resp, httpRes, err := apiClient.ProfileAPI.DeletePersonalAccessToken(context.Background(), apiVersion, tokenId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileAPIService DeleteProfileApp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var appId int32

		resp, httpRes, err := apiClient.ProfileAPI.DeleteProfileApp(context.Background(), apiVersion, appId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileAPIService DeleteProfilePhoneNumber", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string

		resp, httpRes, err := apiClient.ProfileAPI.DeleteProfilePhoneNumber(context.Background(), apiVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileAPIService DeleteSshKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var sshKeyId int32

		resp, httpRes, err := apiClient.ProfileAPI.DeleteSshKey(context.Background(), apiVersion, sshKeyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileAPIService DeleteTrustedDevice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var deviceId int32

		resp, httpRes, err := apiClient.ProfileAPI.DeleteTrustedDevice(context.Background(), apiVersion, deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileAPIService GetDevices", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string

		resp, httpRes, err := apiClient.ProfileAPI.GetDevices(context.Background(), apiVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileAPIService GetPersonalAccessToken", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var tokenId int32

		resp, httpRes, err := apiClient.ProfileAPI.GetPersonalAccessToken(context.Background(), apiVersion, tokenId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileAPIService GetPersonalAccessTokens", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string

		resp, httpRes, err := apiClient.ProfileAPI.GetPersonalAccessTokens(context.Background(), apiVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileAPIService GetProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string

		resp, httpRes, err := apiClient.ProfileAPI.GetProfile(context.Background(), apiVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileAPIService GetProfileApp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var appId int32

		resp, httpRes, err := apiClient.ProfileAPI.GetProfileApp(context.Background(), apiVersion, appId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileAPIService GetProfileApps", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string

		resp, httpRes, err := apiClient.ProfileAPI.GetProfileApps(context.Background(), apiVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileAPIService GetProfileGrants", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string

		resp, httpRes, err := apiClient.ProfileAPI.GetProfileGrants(context.Background(), apiVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileAPIService GetProfileLogin", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var loginId int32

		resp, httpRes, err := apiClient.ProfileAPI.GetProfileLogin(context.Background(), apiVersion, loginId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileAPIService GetProfileLogins", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string

		resp, httpRes, err := apiClient.ProfileAPI.GetProfileLogins(context.Background(), apiVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileAPIService GetSecurityQuestions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string

		resp, httpRes, err := apiClient.ProfileAPI.GetSecurityQuestions(context.Background(), apiVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileAPIService GetSshKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var sshKeyId int32

		resp, httpRes, err := apiClient.ProfileAPI.GetSshKey(context.Background(), apiVersion, sshKeyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileAPIService GetSshKeys", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string

		resp, httpRes, err := apiClient.ProfileAPI.GetSshKeys(context.Background(), apiVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileAPIService GetTrustedDevice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var deviceId int32

		resp, httpRes, err := apiClient.ProfileAPI.GetTrustedDevice(context.Background(), apiVersion, deviceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileAPIService GetUserPreferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string

		resp, httpRes, err := apiClient.ProfileAPI.GetUserPreferences(context.Background(), apiVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileAPIService PostAddSshKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string

		resp, httpRes, err := apiClient.ProfileAPI.PostAddSshKey(context.Background(), apiVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileAPIService PostPersonalAccessToken", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string

		resp, httpRes, err := apiClient.ProfileAPI.PostPersonalAccessToken(context.Background(), apiVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileAPIService PostProfilePhoneNumber", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string

		resp, httpRes, err := apiClient.ProfileAPI.PostProfilePhoneNumber(context.Background(), apiVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileAPIService PostProfilePhoneNumberVerify", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string

		resp, httpRes, err := apiClient.ProfileAPI.PostProfilePhoneNumberVerify(context.Background(), apiVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileAPIService PostSecurityQuestions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string

		resp, httpRes, err := apiClient.ProfileAPI.PostSecurityQuestions(context.Background(), apiVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileAPIService PostTfaConfirm", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string

		resp, httpRes, err := apiClient.ProfileAPI.PostTfaConfirm(context.Background(), apiVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileAPIService PostTfaDisable", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string

		resp, httpRes, err := apiClient.ProfileAPI.PostTfaDisable(context.Background(), apiVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileAPIService PostTfaEnable", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string

		resp, httpRes, err := apiClient.ProfileAPI.PostTfaEnable(context.Background(), apiVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileAPIService PutPersonalAccessToken", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var tokenId int32

		resp, httpRes, err := apiClient.ProfileAPI.PutPersonalAccessToken(context.Background(), apiVersion, tokenId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileAPIService PutProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string

		resp, httpRes, err := apiClient.ProfileAPI.PutProfile(context.Background(), apiVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileAPIService PutSshKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var sshKeyId int32

		resp, httpRes, err := apiClient.ProfileAPI.PutSshKey(context.Background(), apiVersion, sshKeyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfileAPIService PutUserPreferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string

		resp, httpRes, err := apiClient.ProfileAPI.PutUserPreferences(context.Background(), apiVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
