/*
Linode API

[Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

API version: 4.189.2
Contact: support@linode.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PostAllocateIpRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostAllocateIpRequest{}

// PostAllocateIpRequest struct for PostAllocateIpRequest
type PostAllocateIpRequest struct {
	// The ID of a Linode you have access to that this address will be allocated to.
	LinodeId int32 `json:"linode_id"`
	// Whether to create a public or private IPv4 address.
	Public bool `json:"public"`
	// The type of address you are requesting. Only IPv4 addresses may be allocated through this operation.
	Type string `json:"type"`
}

type _PostAllocateIpRequest PostAllocateIpRequest

// NewPostAllocateIpRequest instantiates a new PostAllocateIpRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostAllocateIpRequest(linodeId int32, public bool, type_ string) *PostAllocateIpRequest {
	this := PostAllocateIpRequest{}
	this.LinodeId = linodeId
	this.Public = public
	this.Type = type_
	return &this
}

// NewPostAllocateIpRequestWithDefaults instantiates a new PostAllocateIpRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostAllocateIpRequestWithDefaults() *PostAllocateIpRequest {
	this := PostAllocateIpRequest{}
	return &this
}

// GetLinodeId returns the LinodeId field value
func (o *PostAllocateIpRequest) GetLinodeId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.LinodeId
}

// GetLinodeIdOk returns a tuple with the LinodeId field value
// and a boolean to check if the value has been set.
func (o *PostAllocateIpRequest) GetLinodeIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LinodeId, true
}

// SetLinodeId sets field value
func (o *PostAllocateIpRequest) SetLinodeId(v int32) {
	o.LinodeId = v
}

// GetPublic returns the Public field value
func (o *PostAllocateIpRequest) GetPublic() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Public
}

// GetPublicOk returns a tuple with the Public field value
// and a boolean to check if the value has been set.
func (o *PostAllocateIpRequest) GetPublicOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Public, true
}

// SetPublic sets field value
func (o *PostAllocateIpRequest) SetPublic(v bool) {
	o.Public = v
}

// GetType returns the Type field value
func (o *PostAllocateIpRequest) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *PostAllocateIpRequest) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *PostAllocateIpRequest) SetType(v string) {
	o.Type = v
}

func (o PostAllocateIpRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostAllocateIpRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["linode_id"] = o.LinodeId
	toSerialize["public"] = o.Public
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *PostAllocateIpRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"linode_id",
		"public",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPostAllocateIpRequest := _PostAllocateIpRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPostAllocateIpRequest)

	if err != nil {
		return err
	}

	*o = PostAllocateIpRequest(varPostAllocateIpRequest)

	return err
}

type NullablePostAllocateIpRequest struct {
	value *PostAllocateIpRequest
	isSet bool
}

func (v NullablePostAllocateIpRequest) Get() *PostAllocateIpRequest {
	return v.value
}

func (v *NullablePostAllocateIpRequest) Set(val *PostAllocateIpRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePostAllocateIpRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePostAllocateIpRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostAllocateIpRequest(val *PostAllocateIpRequest) *NullablePostAllocateIpRequest {
	return &NullablePostAllocateIpRequest{value: val, isSet: true}
}

func (v NullablePostAllocateIpRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostAllocateIpRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


