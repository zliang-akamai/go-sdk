/*
Linode API

[Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

API version: 4.189.2
Contact: support@linode.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GetLinodeIps200ResponseIpv4PublicInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetLinodeIps200ResponseIpv4PublicInner{}

// GetLinodeIps200ResponseIpv4PublicInner An IP address that exists in Linode's system, either IPv4 or IPv6.
type GetLinodeIps200ResponseIpv4PublicInner struct {
	// The IP address.
	Address *string `json:"address,omitempty"`
	// The default gateway for this address.
	Gateway NullableString `json:"gateway,omitempty"`
	// The ID of the Linode this address currently belongs to. For IPv4 addresses, this is by default the Linode that this address was assigned to on creation, and these addresses my be moved using the [Assign IPv4s to Linodes](https://techdocs.akamai.com/linode-api/reference/post-assign-ipv4s) operation. For SLAAC and link-local addresses, this value may not be changed.
	LinodeId *int32 `json:"linode_id,omitempty"`
	// The number of bits set in the subnet mask.
	Prefix *int32 `json:"prefix,omitempty"`
	// Whether this is a public or private IP address.
	Public *bool `json:"public,omitempty"`
	// The reverse DNS assigned to this address. For public IPv4 addresses, this will be set to a default value provided by Linode if not explicitly set.
	Rdns NullableString `json:"rdns,omitempty"`
	// The Region this IP address resides in.
	Region *string `json:"region,omitempty"`
	// The mask that separates host bits from network bits for this address.
	SubnetMask *string `json:"subnet_mask,omitempty"`
	// The type of address this is.
	Type *string `json:"type,omitempty"`
	VpcNat11 *GetLinodeIps200ResponseIpv4PublicInnerVpcNat11 `json:"vpc_nat_1_1,omitempty"`
}

// NewGetLinodeIps200ResponseIpv4PublicInner instantiates a new GetLinodeIps200ResponseIpv4PublicInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetLinodeIps200ResponseIpv4PublicInner() *GetLinodeIps200ResponseIpv4PublicInner {
	this := GetLinodeIps200ResponseIpv4PublicInner{}
	return &this
}

// NewGetLinodeIps200ResponseIpv4PublicInnerWithDefaults instantiates a new GetLinodeIps200ResponseIpv4PublicInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetLinodeIps200ResponseIpv4PublicInnerWithDefaults() *GetLinodeIps200ResponseIpv4PublicInner {
	this := GetLinodeIps200ResponseIpv4PublicInner{}
	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *GetLinodeIps200ResponseIpv4PublicInner) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLinodeIps200ResponseIpv4PublicInner) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *GetLinodeIps200ResponseIpv4PublicInner) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *GetLinodeIps200ResponseIpv4PublicInner) SetAddress(v string) {
	o.Address = &v
}

// GetGateway returns the Gateway field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetLinodeIps200ResponseIpv4PublicInner) GetGateway() string {
	if o == nil || IsNil(o.Gateway.Get()) {
		var ret string
		return ret
	}
	return *o.Gateway.Get()
}

// GetGatewayOk returns a tuple with the Gateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetLinodeIps200ResponseIpv4PublicInner) GetGatewayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Gateway.Get(), o.Gateway.IsSet()
}

// HasGateway returns a boolean if a field has been set.
func (o *GetLinodeIps200ResponseIpv4PublicInner) HasGateway() bool {
	if o != nil && o.Gateway.IsSet() {
		return true
	}

	return false
}

// SetGateway gets a reference to the given NullableString and assigns it to the Gateway field.
func (o *GetLinodeIps200ResponseIpv4PublicInner) SetGateway(v string) {
	o.Gateway.Set(&v)
}
// SetGatewayNil sets the value for Gateway to be an explicit nil
func (o *GetLinodeIps200ResponseIpv4PublicInner) SetGatewayNil() {
	o.Gateway.Set(nil)
}

// UnsetGateway ensures that no value is present for Gateway, not even an explicit nil
func (o *GetLinodeIps200ResponseIpv4PublicInner) UnsetGateway() {
	o.Gateway.Unset()
}

// GetLinodeId returns the LinodeId field value if set, zero value otherwise.
func (o *GetLinodeIps200ResponseIpv4PublicInner) GetLinodeId() int32 {
	if o == nil || IsNil(o.LinodeId) {
		var ret int32
		return ret
	}
	return *o.LinodeId
}

// GetLinodeIdOk returns a tuple with the LinodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLinodeIps200ResponseIpv4PublicInner) GetLinodeIdOk() (*int32, bool) {
	if o == nil || IsNil(o.LinodeId) {
		return nil, false
	}
	return o.LinodeId, true
}

// HasLinodeId returns a boolean if a field has been set.
func (o *GetLinodeIps200ResponseIpv4PublicInner) HasLinodeId() bool {
	if o != nil && !IsNil(o.LinodeId) {
		return true
	}

	return false
}

// SetLinodeId gets a reference to the given int32 and assigns it to the LinodeId field.
func (o *GetLinodeIps200ResponseIpv4PublicInner) SetLinodeId(v int32) {
	o.LinodeId = &v
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *GetLinodeIps200ResponseIpv4PublicInner) GetPrefix() int32 {
	if o == nil || IsNil(o.Prefix) {
		var ret int32
		return ret
	}
	return *o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLinodeIps200ResponseIpv4PublicInner) GetPrefixOk() (*int32, bool) {
	if o == nil || IsNil(o.Prefix) {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *GetLinodeIps200ResponseIpv4PublicInner) HasPrefix() bool {
	if o != nil && !IsNil(o.Prefix) {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given int32 and assigns it to the Prefix field.
func (o *GetLinodeIps200ResponseIpv4PublicInner) SetPrefix(v int32) {
	o.Prefix = &v
}

// GetPublic returns the Public field value if set, zero value otherwise.
func (o *GetLinodeIps200ResponseIpv4PublicInner) GetPublic() bool {
	if o == nil || IsNil(o.Public) {
		var ret bool
		return ret
	}
	return *o.Public
}

// GetPublicOk returns a tuple with the Public field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLinodeIps200ResponseIpv4PublicInner) GetPublicOk() (*bool, bool) {
	if o == nil || IsNil(o.Public) {
		return nil, false
	}
	return o.Public, true
}

// HasPublic returns a boolean if a field has been set.
func (o *GetLinodeIps200ResponseIpv4PublicInner) HasPublic() bool {
	if o != nil && !IsNil(o.Public) {
		return true
	}

	return false
}

// SetPublic gets a reference to the given bool and assigns it to the Public field.
func (o *GetLinodeIps200ResponseIpv4PublicInner) SetPublic(v bool) {
	o.Public = &v
}

// GetRdns returns the Rdns field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetLinodeIps200ResponseIpv4PublicInner) GetRdns() string {
	if o == nil || IsNil(o.Rdns.Get()) {
		var ret string
		return ret
	}
	return *o.Rdns.Get()
}

// GetRdnsOk returns a tuple with the Rdns field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetLinodeIps200ResponseIpv4PublicInner) GetRdnsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rdns.Get(), o.Rdns.IsSet()
}

// HasRdns returns a boolean if a field has been set.
func (o *GetLinodeIps200ResponseIpv4PublicInner) HasRdns() bool {
	if o != nil && o.Rdns.IsSet() {
		return true
	}

	return false
}

// SetRdns gets a reference to the given NullableString and assigns it to the Rdns field.
func (o *GetLinodeIps200ResponseIpv4PublicInner) SetRdns(v string) {
	o.Rdns.Set(&v)
}
// SetRdnsNil sets the value for Rdns to be an explicit nil
func (o *GetLinodeIps200ResponseIpv4PublicInner) SetRdnsNil() {
	o.Rdns.Set(nil)
}

// UnsetRdns ensures that no value is present for Rdns, not even an explicit nil
func (o *GetLinodeIps200ResponseIpv4PublicInner) UnsetRdns() {
	o.Rdns.Unset()
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *GetLinodeIps200ResponseIpv4PublicInner) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLinodeIps200ResponseIpv4PublicInner) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *GetLinodeIps200ResponseIpv4PublicInner) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *GetLinodeIps200ResponseIpv4PublicInner) SetRegion(v string) {
	o.Region = &v
}

// GetSubnetMask returns the SubnetMask field value if set, zero value otherwise.
func (o *GetLinodeIps200ResponseIpv4PublicInner) GetSubnetMask() string {
	if o == nil || IsNil(o.SubnetMask) {
		var ret string
		return ret
	}
	return *o.SubnetMask
}

// GetSubnetMaskOk returns a tuple with the SubnetMask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLinodeIps200ResponseIpv4PublicInner) GetSubnetMaskOk() (*string, bool) {
	if o == nil || IsNil(o.SubnetMask) {
		return nil, false
	}
	return o.SubnetMask, true
}

// HasSubnetMask returns a boolean if a field has been set.
func (o *GetLinodeIps200ResponseIpv4PublicInner) HasSubnetMask() bool {
	if o != nil && !IsNil(o.SubnetMask) {
		return true
	}

	return false
}

// SetSubnetMask gets a reference to the given string and assigns it to the SubnetMask field.
func (o *GetLinodeIps200ResponseIpv4PublicInner) SetSubnetMask(v string) {
	o.SubnetMask = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *GetLinodeIps200ResponseIpv4PublicInner) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLinodeIps200ResponseIpv4PublicInner) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *GetLinodeIps200ResponseIpv4PublicInner) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *GetLinodeIps200ResponseIpv4PublicInner) SetType(v string) {
	o.Type = &v
}

// GetVpcNat11 returns the VpcNat11 field value if set, zero value otherwise.
func (o *GetLinodeIps200ResponseIpv4PublicInner) GetVpcNat11() GetLinodeIps200ResponseIpv4PublicInnerVpcNat11 {
	if o == nil || IsNil(o.VpcNat11) {
		var ret GetLinodeIps200ResponseIpv4PublicInnerVpcNat11
		return ret
	}
	return *o.VpcNat11
}

// GetVpcNat11Ok returns a tuple with the VpcNat11 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLinodeIps200ResponseIpv4PublicInner) GetVpcNat11Ok() (*GetLinodeIps200ResponseIpv4PublicInnerVpcNat11, bool) {
	if o == nil || IsNil(o.VpcNat11) {
		return nil, false
	}
	return o.VpcNat11, true
}

// HasVpcNat11 returns a boolean if a field has been set.
func (o *GetLinodeIps200ResponseIpv4PublicInner) HasVpcNat11() bool {
	if o != nil && !IsNil(o.VpcNat11) {
		return true
	}

	return false
}

// SetVpcNat11 gets a reference to the given GetLinodeIps200ResponseIpv4PublicInnerVpcNat11 and assigns it to the VpcNat11 field.
func (o *GetLinodeIps200ResponseIpv4PublicInner) SetVpcNat11(v GetLinodeIps200ResponseIpv4PublicInnerVpcNat11) {
	o.VpcNat11 = &v
}

func (o GetLinodeIps200ResponseIpv4PublicInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetLinodeIps200ResponseIpv4PublicInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if o.Gateway.IsSet() {
		toSerialize["gateway"] = o.Gateway.Get()
	}
	if !IsNil(o.LinodeId) {
		toSerialize["linode_id"] = o.LinodeId
	}
	if !IsNil(o.Prefix) {
		toSerialize["prefix"] = o.Prefix
	}
	if !IsNil(o.Public) {
		toSerialize["public"] = o.Public
	}
	if o.Rdns.IsSet() {
		toSerialize["rdns"] = o.Rdns.Get()
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.SubnetMask) {
		toSerialize["subnet_mask"] = o.SubnetMask
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.VpcNat11) {
		toSerialize["vpc_nat_1_1"] = o.VpcNat11
	}
	return toSerialize, nil
}

type NullableGetLinodeIps200ResponseIpv4PublicInner struct {
	value *GetLinodeIps200ResponseIpv4PublicInner
	isSet bool
}

func (v NullableGetLinodeIps200ResponseIpv4PublicInner) Get() *GetLinodeIps200ResponseIpv4PublicInner {
	return v.value
}

func (v *NullableGetLinodeIps200ResponseIpv4PublicInner) Set(val *GetLinodeIps200ResponseIpv4PublicInner) {
	v.value = val
	v.isSet = true
}

func (v NullableGetLinodeIps200ResponseIpv4PublicInner) IsSet() bool {
	return v.isSet
}

func (v *NullableGetLinodeIps200ResponseIpv4PublicInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetLinodeIps200ResponseIpv4PublicInner(val *GetLinodeIps200ResponseIpv4PublicInner) *NullableGetLinodeIps200ResponseIpv4PublicInner {
	return &NullableGetLinodeIps200ResponseIpv4PublicInner{value: val, isSet: true}
}

func (v NullableGetLinodeIps200ResponseIpv4PublicInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetLinodeIps200ResponseIpv4PublicInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


