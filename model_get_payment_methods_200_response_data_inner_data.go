/*
Linode API

[Read the API documentation](https://techdocs.akamai.com/linode-api/reference/api).

API version: 4.189.2
Contact: support@linode.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// GetPaymentMethods200ResponseDataInnerData - struct for GetPaymentMethods200ResponseDataInnerData
type GetPaymentMethods200ResponseDataInnerData struct {
	CreditCard *CreditCard
	GooglePay *GooglePay
	Paypal *Paypal
}

// CreditCardAsGetPaymentMethods200ResponseDataInnerData is a convenience function that returns CreditCard wrapped in GetPaymentMethods200ResponseDataInnerData
func CreditCardAsGetPaymentMethods200ResponseDataInnerData(v *CreditCard) GetPaymentMethods200ResponseDataInnerData {
	return GetPaymentMethods200ResponseDataInnerData{
		CreditCard: v,
	}
}

// GooglePayAsGetPaymentMethods200ResponseDataInnerData is a convenience function that returns GooglePay wrapped in GetPaymentMethods200ResponseDataInnerData
func GooglePayAsGetPaymentMethods200ResponseDataInnerData(v *GooglePay) GetPaymentMethods200ResponseDataInnerData {
	return GetPaymentMethods200ResponseDataInnerData{
		GooglePay: v,
	}
}

// PaypalAsGetPaymentMethods200ResponseDataInnerData is a convenience function that returns Paypal wrapped in GetPaymentMethods200ResponseDataInnerData
func PaypalAsGetPaymentMethods200ResponseDataInnerData(v *Paypal) GetPaymentMethods200ResponseDataInnerData {
	return GetPaymentMethods200ResponseDataInnerData{
		Paypal: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetPaymentMethods200ResponseDataInnerData) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CreditCard
	err = newStrictDecoder(data).Decode(&dst.CreditCard)
	if err == nil {
		jsonCreditCard, _ := json.Marshal(dst.CreditCard)
		if string(jsonCreditCard) == "{}" { // empty struct
			dst.CreditCard = nil
		} else {
			if err = validator.Validate(dst.CreditCard); err != nil {
				dst.CreditCard = nil
			} else {
				match++
			}
		}
	} else {
		dst.CreditCard = nil
	}

	// try to unmarshal data into GooglePay
	err = newStrictDecoder(data).Decode(&dst.GooglePay)
	if err == nil {
		jsonGooglePay, _ := json.Marshal(dst.GooglePay)
		if string(jsonGooglePay) == "{}" { // empty struct
			dst.GooglePay = nil
		} else {
			if err = validator.Validate(dst.GooglePay); err != nil {
				dst.GooglePay = nil
			} else {
				match++
			}
		}
	} else {
		dst.GooglePay = nil
	}

	// try to unmarshal data into Paypal
	err = newStrictDecoder(data).Decode(&dst.Paypal)
	if err == nil {
		jsonPaypal, _ := json.Marshal(dst.Paypal)
		if string(jsonPaypal) == "{}" { // empty struct
			dst.Paypal = nil
		} else {
			if err = validator.Validate(dst.Paypal); err != nil {
				dst.Paypal = nil
			} else {
				match++
			}
		}
	} else {
		dst.Paypal = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CreditCard = nil
		dst.GooglePay = nil
		dst.Paypal = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetPaymentMethods200ResponseDataInnerData)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetPaymentMethods200ResponseDataInnerData)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetPaymentMethods200ResponseDataInnerData) MarshalJSON() ([]byte, error) {
	if src.CreditCard != nil {
		return json.Marshal(&src.CreditCard)
	}

	if src.GooglePay != nil {
		return json.Marshal(&src.GooglePay)
	}

	if src.Paypal != nil {
		return json.Marshal(&src.Paypal)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetPaymentMethods200ResponseDataInnerData) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CreditCard != nil {
		return obj.CreditCard
	}

	if obj.GooglePay != nil {
		return obj.GooglePay
	}

	if obj.Paypal != nil {
		return obj.Paypal
	}

	// all schemas are nil
	return nil
}

type NullableGetPaymentMethods200ResponseDataInnerData struct {
	value *GetPaymentMethods200ResponseDataInnerData
	isSet bool
}

func (v NullableGetPaymentMethods200ResponseDataInnerData) Get() *GetPaymentMethods200ResponseDataInnerData {
	return v.value
}

func (v *NullableGetPaymentMethods200ResponseDataInnerData) Set(val *GetPaymentMethods200ResponseDataInnerData) {
	v.value = val
	v.isSet = true
}

func (v NullableGetPaymentMethods200ResponseDataInnerData) IsSet() bool {
	return v.isSet
}

func (v *NullableGetPaymentMethods200ResponseDataInnerData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetPaymentMethods200ResponseDataInnerData(val *GetPaymentMethods200ResponseDataInnerData) *NullableGetPaymentMethods200ResponseDataInnerData {
	return &NullableGetPaymentMethods200ResponseDataInnerData{value: val, isSet: true}
}

func (v NullableGetPaymentMethods200ResponseDataInnerData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetPaymentMethods200ResponseDataInnerData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


