/*
Linode API

Testing LongviewAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_LongviewAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test LongviewAPIService DeleteLongviewClient", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var clientId int32

		resp, httpRes, err := apiClient.LongviewAPI.DeleteLongviewClient(context.Background(), apiVersion, clientId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LongviewAPIService GetLongviewClient", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var clientId int32

		resp, httpRes, err := apiClient.LongviewAPI.GetLongviewClient(context.Background(), apiVersion, clientId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LongviewAPIService GetLongviewClients", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string

		resp, httpRes, err := apiClient.LongviewAPI.GetLongviewClients(context.Background(), apiVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LongviewAPIService GetLongviewPlan", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string

		resp, httpRes, err := apiClient.LongviewAPI.GetLongviewPlan(context.Background(), apiVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LongviewAPIService GetLongviewSubscription", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var subscriptionId string

		resp, httpRes, err := apiClient.LongviewAPI.GetLongviewSubscription(context.Background(), apiVersion, subscriptionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LongviewAPIService GetLongviewSubscriptions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string

		resp, httpRes, err := apiClient.LongviewAPI.GetLongviewSubscriptions(context.Background(), apiVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LongviewAPIService GetLongviewTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string

		resp, httpRes, err := apiClient.LongviewAPI.GetLongviewTypes(context.Background(), apiVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LongviewAPIService PostLongviewClient", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string

		resp, httpRes, err := apiClient.LongviewAPI.PostLongviewClient(context.Background(), apiVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LongviewAPIService PutLongviewClient", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string
		var clientId int32

		resp, httpRes, err := apiClient.LongviewAPI.PutLongviewClient(context.Background(), apiVersion, clientId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LongviewAPIService PutLongviewPlan", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiVersion string

		resp, httpRes, err := apiClient.LongviewAPI.PutLongviewPlan(context.Background(), apiVersion).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
